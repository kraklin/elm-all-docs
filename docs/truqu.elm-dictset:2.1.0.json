[
    {
        "name": "DictSet",
        "comment": " A set of unique values. The values can be any type, and the comparison is\ndone using a function `compare : value -> comparable`.\n\nInsert, remove, and query operations all take _O(log n)_ time.\n\n\n# Sets\n\n@docs DictSet\n\n\n# Build\n\n@docs empty, singleton, insert, remove\n\n\n# Query\n\n@docs isEmpty, member, size\n\n\n# Combine\n\n@docs union, intersect, diff\n\n\n# Lists\n\n@docs toList, fromList, keys, values\n\n\n# Transform\n\n@docs map, foldl, foldr, filter, partition\n\n",
        "unions": [
            {
                "name": "DictSet",
                "comment": " Represents a set of unique values together with the compare function\n",
                "args": [
                    "comparable",
                    "a"
                ],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "diff",
                "comment": " Get the difference between the first set and the second. Keeps values that do not appear in the second set.\n",
                "type": "DictSet.DictSet comparable a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
            },
            {
                "name": "empty",
                "comment": " Create an empty set\n",
                "type": "(a -> comparable) -> DictSet.DictSet comparable a"
            },
            {
                "name": "filter",
                "comment": " Create a new set consisting only of elements which satisfy a predicate.\n",
                "type": "(a -> Basics.Bool) -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
            },
            {
                "name": "foldl",
                "comment": " Fold over the values in a set, in order from lowest to highest.\n",
                "type": "(a -> b -> b) -> b -> DictSet.DictSet comparable a -> b"
            },
            {
                "name": "foldr",
                "comment": " Fold over the values in a set, in order from highest to lowest.\n",
                "type": "(a -> b -> b) -> b -> DictSet.DictSet comparable a -> b"
            },
            {
                "name": "fromList",
                "comment": " Convert a list into a set, removing any duplicates.\n",
                "type": "(a -> comparable) -> List.List a -> DictSet.DictSet comparable a"
            },
            {
                "name": "insert",
                "comment": " Insert a new value into a set\n",
                "type": "a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
            },
            {
                "name": "intersect",
                "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\n",
                "type": "DictSet.DictSet comparable a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
            },
            {
                "name": "isEmpty",
                "comment": " Determine if a set is empty\n",
                "type": "DictSet.DictSet comparable a -> Basics.Bool"
            },
            {
                "name": "keys",
                "comment": " Extract the keys from a DictSet\n",
                "type": "DictSet.DictSet comparable a -> List.List comparable"
            },
            {
                "name": "map",
                "comment": " Map a function onto a set, creating a new set with no duplicates.\n",
                "type": "(b -> comparable) -> (a -> b) -> DictSet.DictSet comparable a -> DictSet.DictSet comparable b"
            },
            {
                "name": "member",
                "comment": " Determine if a value is in a set\n",
                "type": "a -> DictSet.DictSet comparable a -> Basics.Bool"
            },
            {
                "name": "partition",
                "comment": " Create two new sets; the first consisting of elements which satisfy a\n",
                "type": "(a -> Basics.Bool) -> DictSet.DictSet comparable a -> ( DictSet.DictSet comparable a, DictSet.DictSet comparable a )"
            },
            {
                "name": "remove",
                "comment": " Remove a value from a set\n",
                "type": "a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
            },
            {
                "name": "singleton",
                "comment": " Create a set with one value\n",
                "type": "(a -> comparable) -> a -> DictSet.DictSet comparable a"
            },
            {
                "name": "size",
                "comment": " Determine the number of elements in a set\n",
                "type": "DictSet.DictSet comparable a -> Basics.Int"
            },
            {
                "name": "toList",
                "comment": " Convert a set into a list.\n",
                "type": "DictSet.DictSet comparable a -> List.List a"
            },
            {
                "name": "union",
                "comment": " Get the union of two sets. Keep all values.\n",
                "type": "DictSet.DictSet comparable a -> DictSet.DictSet comparable a -> DictSet.DictSet comparable a"
            },
            {
                "name": "values",
                "comment": " Extract the values from a DictSet\n",
                "type": "DictSet.DictSet comparable a -> List.List a"
            }
        ],
        "binops": []
    }
]