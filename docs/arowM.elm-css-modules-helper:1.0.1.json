[
    {
        "name": "CssClass",
        "comment": " Provide helper functions to handle CSS modules in Elm without hacks\n\n\n# Types\n\n@docs CssClass\n\n\n# Core functions\n\n@docs decode\n@docs empty\n@docs class\n@docs classList\n\n",
        "unions": [
            {
                "name": "CssClass",
                "comment": " An opaque type representing transformed class name JSON object generated by CSS modules.\n",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "class",
                "comment": " An alternative function to `Html.Attributes.class`.\nThis function actually sets a class attribute with value of transformed class name.\n\ne.g., If provided following JSON object and it is decoded as `cssClass : CssClass` by `decode` function,\n\n```json\n{\n  \"title\": \"_title_xkpkl_5 _title_116zl_1\",\n  \"article\": \"_article_xkpkl_10\",\n}\n```\n\n    CssClasses.class cssClass \"title\"\n\nThis is equivalent to\n\n    Html.Attributes.class \"_title_xkpkl_5 _title_116zl_1\"\n\n",
                "type": "CssClass.CssClass -> String.String -> Html.Attribute msg"
            },
            {
                "name": "classList",
                "comment": " An alternative function to `Html.Attributes.classList`\n",
                "type": "CssClass.CssClass -> List.List ( String.String, Basics.Bool ) -> Html.Attribute msg"
            },
            {
                "name": "decode",
                "comment": " Decode CSS transformed class name JSON object to `CssClass`.\n",
                "type": "Json.Decode.Decoder CssClass.CssClass"
            },
            {
                "name": "empty",
                "comment": " A `CssClass` value which contains nothing.\nThis value can be used as a default value for failing to decode JSON object.\n",
                "type": "CssClass.CssClass"
            }
        ],
        "binops": []
    }
]