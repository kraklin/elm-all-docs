[
    {
        "name": "AWS.CognitoIdentity",
        "comment": "\n\n\n## Amazon Cognito Federated Identities\n\nAmazon Cognito Federated Identities is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. It uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.\n\nUsing Amazon Cognito Federated Identities, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon Cognito user pool, and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.\n\nFor a description of the authentication flow from the Amazon Cognito Developer Guide see `Authentication Flow`.\n\nFor more information see `Amazon Cognito Federated Identities`.\n\n\n# Service definition.\n\n@docs service\n\n\n# Service endpoints.\n\n@docs createIdentityPool, deleteIdentities, deleteIdentityPool, describeIdentity, describeIdentityPool, getCredentialsForIdentity, getId\n@docs getIdentityPoolRoles, getOpenIdToken, getOpenIdTokenForDeveloperIdentity, listIdentities, listIdentityPools, listTagsForResource\n@docs lookupDeveloperIdentity, mergeDeveloperIdentities, setIdentityPoolRoles, tagResource, unlinkDeveloperIdentity, unlinkIdentity\n@docs untagResource, updateIdentityPool\n\n\n# API data model.\n\n@docs AmbiguousRoleResolutionType, CognitoIdentityProvider, CognitoIdentityProviderList, CreateIdentityPoolInput, Credentials\n@docs DeleteIdentitiesInput, DeleteIdentitiesResponse, DeleteIdentityPoolInput, DescribeIdentityInput, DescribeIdentityPoolInput\n@docs DeveloperUserIdentifierList, ErrorCode, GetCredentialsForIdentityInput, GetCredentialsForIdentityResponse, GetIdInput\n@docs GetIdResponse, GetIdentityPoolRolesInput, GetIdentityPoolRolesResponse, GetOpenIdTokenForDeveloperIdentityInput\n@docs GetOpenIdTokenForDeveloperIdentityResponse, GetOpenIdTokenInput, GetOpenIdTokenResponse, IdentitiesList, IdentityDescription\n@docs IdentityIdList, IdentityPool, IdentityPoolShortDescription, IdentityPoolTagsListType, IdentityPoolTagsType, IdentityPoolsList\n@docs IdentityProviders, ListIdentitiesInput, ListIdentitiesResponse, ListIdentityPoolsInput, ListIdentityPoolsResponse\n@docs ListTagsForResourceInput, ListTagsForResourceResponse, LoginsList, LoginsMap, LookupDeveloperIdentityInput\n@docs LookupDeveloperIdentityResponse, MappingRule, MappingRuleMatchType, MappingRulesList, MergeDeveloperIdentitiesInput\n@docs MergeDeveloperIdentitiesResponse, OidcproviderList, RoleMapping, RoleMappingMap, RoleMappingType, RolesMap, RulesConfigurationType\n@docs SamlproviderList, SetIdentityPoolRolesInput, TagResourceInput, TagResourceResponse, UnlinkDeveloperIdentityInput\n@docs UnlinkIdentityInput, UnprocessedIdentityId, UnprocessedIdentityIdList, UntagResourceInput, UntagResourceResponse\n@docs ambiguousRoleResolutionType, errorCode, mappingRuleMatchType, roleMappingType\n\n",
        "unions": [
            {
                "name": "AmbiguousRoleResolutionType",
                "comment": " The AmbiguousRoleResolutionType data model.\n",
                "args": [],
                "cases": [
                    [
                        "AmbiguousRoleResolutionTypeAuthenticatedRole",
                        []
                    ],
                    [
                        "AmbiguousRoleResolutionTypeDeny",
                        []
                    ]
                ]
            },
            {
                "name": "ErrorCode",
                "comment": " The ErrorCode data model.\n",
                "args": [],
                "cases": [
                    [
                        "ErrorCodeAccessDenied",
                        []
                    ],
                    [
                        "ErrorCodeInternalServerError",
                        []
                    ]
                ]
            },
            {
                "name": "MappingRuleMatchType",
                "comment": " The MappingRuleMatchType data model.\n",
                "args": [],
                "cases": [
                    [
                        "MappingRuleMatchTypeEquals",
                        []
                    ],
                    [
                        "MappingRuleMatchTypeContains",
                        []
                    ],
                    [
                        "MappingRuleMatchTypeStartsWith",
                        []
                    ],
                    [
                        "MappingRuleMatchTypeNotEqual",
                        []
                    ]
                ]
            },
            {
                "name": "RoleMappingType",
                "comment": " The RoleMappingType data model.\n",
                "args": [],
                "cases": [
                    [
                        "RoleMappingTypeToken",
                        []
                    ],
                    [
                        "RoleMappingTypeRules",
                        []
                    ]
                ]
            }
        ],
        "aliases": [
            {
                "name": "CognitoIdentityProvider",
                "comment": " The CognitoIdentityProvider data model.\n",
                "args": [],
                "type": "{ clientId : Maybe.Maybe String.String, providerName : Maybe.Maybe String.String, serverSideTokenCheck : Maybe.Maybe Basics.Bool }"
            },
            {
                "name": "CognitoIdentityProviderList",
                "comment": " The CognitoIdentityProviderList data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentity.CognitoIdentityProvider"
            },
            {
                "name": "CreateIdentityPoolInput",
                "comment": " The CreateIdentityPoolInput data model.\n",
                "args": [],
                "type": "{ allowUnauthenticatedIdentities : Basics.Bool, cognitoIdentityProviders : Maybe.Maybe AWS.CognitoIdentity.CognitoIdentityProviderList, developerProviderName : Maybe.Maybe String.String, identityPoolName : String.String, identityPoolTags : Maybe.Maybe AWS.CognitoIdentity.IdentityPoolTagsType, openIdConnectProviderArns : Maybe.Maybe AWS.CognitoIdentity.OidcproviderList, samlProviderArns : Maybe.Maybe AWS.CognitoIdentity.SamlproviderList, supportedLoginProviders : Maybe.Maybe AWS.CognitoIdentity.IdentityProviders }"
            },
            {
                "name": "Credentials",
                "comment": " The Credentials data model.\n",
                "args": [],
                "type": "{ accessKeyId : Maybe.Maybe String.String, expiration : Maybe.Maybe Time.Posix, secretKey : Maybe.Maybe String.String, sessionToken : Maybe.Maybe String.String }"
            },
            {
                "name": "DeleteIdentitiesInput",
                "comment": " The DeleteIdentitiesInput data model.\n",
                "args": [],
                "type": "{ identityIdsToDelete : AWS.CognitoIdentity.IdentityIdList }"
            },
            {
                "name": "DeleteIdentitiesResponse",
                "comment": " The DeleteIdentitiesResponse data model.\n",
                "args": [],
                "type": "{ unprocessedIdentityIds : Maybe.Maybe AWS.CognitoIdentity.UnprocessedIdentityIdList }"
            },
            {
                "name": "DeleteIdentityPoolInput",
                "comment": " The DeleteIdentityPoolInput data model.\n",
                "args": [],
                "type": "{ identityPoolId : String.String }"
            },
            {
                "name": "DescribeIdentityInput",
                "comment": " The DescribeIdentityInput data model.\n",
                "args": [],
                "type": "{ identityId : String.String }"
            },
            {
                "name": "DescribeIdentityPoolInput",
                "comment": " The DescribeIdentityPoolInput data model.\n",
                "args": [],
                "type": "{ identityPoolId : String.String }"
            },
            {
                "name": "DeveloperUserIdentifierList",
                "comment": " The DeveloperUserIdentifierList data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "GetCredentialsForIdentityInput",
                "comment": " The GetCredentialsForIdentityInput data model.\n",
                "args": [],
                "type": "{ customRoleArn : Maybe.Maybe String.String, identityId : String.String, logins : Maybe.Maybe AWS.CognitoIdentity.LoginsMap }"
            },
            {
                "name": "GetCredentialsForIdentityResponse",
                "comment": " The GetCredentialsForIdentityResponse data model.\n",
                "args": [],
                "type": "{ credentials : Maybe.Maybe AWS.CognitoIdentity.Credentials, identityId : Maybe.Maybe String.String }"
            },
            {
                "name": "GetIdInput",
                "comment": " The GetIdInput data model.\n",
                "args": [],
                "type": "{ accountId : Maybe.Maybe String.String, identityPoolId : String.String, logins : Maybe.Maybe AWS.CognitoIdentity.LoginsMap }"
            },
            {
                "name": "GetIdResponse",
                "comment": " The GetIdResponse data model.\n",
                "args": [],
                "type": "{ identityId : Maybe.Maybe String.String }"
            },
            {
                "name": "GetIdentityPoolRolesInput",
                "comment": " The GetIdentityPoolRolesInput data model.\n",
                "args": [],
                "type": "{ identityPoolId : String.String }"
            },
            {
                "name": "GetIdentityPoolRolesResponse",
                "comment": " The GetIdentityPoolRolesResponse data model.\n",
                "args": [],
                "type": "{ identityPoolId : Maybe.Maybe String.String, roleMappings : Maybe.Maybe AWS.CognitoIdentity.RoleMappingMap, roles : Maybe.Maybe AWS.CognitoIdentity.RolesMap }"
            },
            {
                "name": "GetOpenIdTokenForDeveloperIdentityInput",
                "comment": " The GetOpenIdTokenForDeveloperIdentityInput data model.\n",
                "args": [],
                "type": "{ identityId : Maybe.Maybe String.String, identityPoolId : String.String, logins : AWS.CognitoIdentity.LoginsMap, tokenDuration : Maybe.Maybe Basics.Int }"
            },
            {
                "name": "GetOpenIdTokenForDeveloperIdentityResponse",
                "comment": " The GetOpenIdTokenForDeveloperIdentityResponse data model.\n",
                "args": [],
                "type": "{ identityId : Maybe.Maybe String.String, token : Maybe.Maybe String.String }"
            },
            {
                "name": "GetOpenIdTokenInput",
                "comment": " The GetOpenIdTokenInput data model.\n",
                "args": [],
                "type": "{ identityId : String.String, logins : Maybe.Maybe AWS.CognitoIdentity.LoginsMap }"
            },
            {
                "name": "GetOpenIdTokenResponse",
                "comment": " The GetOpenIdTokenResponse data model.\n",
                "args": [],
                "type": "{ identityId : Maybe.Maybe String.String, token : Maybe.Maybe String.String }"
            },
            {
                "name": "IdentitiesList",
                "comment": " The IdentitiesList data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentity.IdentityDescription"
            },
            {
                "name": "IdentityDescription",
                "comment": " The IdentityDescription data model.\n",
                "args": [],
                "type": "{ creationDate : Maybe.Maybe String.String, identityId : Maybe.Maybe String.String, lastModifiedDate : Maybe.Maybe String.String, logins : Maybe.Maybe AWS.CognitoIdentity.LoginsList }"
            },
            {
                "name": "IdentityIdList",
                "comment": " The IdentityIdList data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "IdentityPool",
                "comment": " The IdentityPool data model.\n",
                "args": [],
                "type": "{ allowUnauthenticatedIdentities : Basics.Bool, cognitoIdentityProviders : Maybe.Maybe AWS.CognitoIdentity.CognitoIdentityProviderList, developerProviderName : Maybe.Maybe String.String, identityPoolId : String.String, identityPoolName : String.String, identityPoolTags : Maybe.Maybe AWS.CognitoIdentity.IdentityPoolTagsType, openIdConnectProviderArns : Maybe.Maybe AWS.CognitoIdentity.OidcproviderList, samlProviderArns : Maybe.Maybe AWS.CognitoIdentity.SamlproviderList, supportedLoginProviders : Maybe.Maybe AWS.CognitoIdentity.IdentityProviders }"
            },
            {
                "name": "IdentityPoolShortDescription",
                "comment": " The IdentityPoolShortDescription data model.\n",
                "args": [],
                "type": "{ identityPoolId : Maybe.Maybe String.String, identityPoolName : Maybe.Maybe String.String }"
            },
            {
                "name": "IdentityPoolTagsListType",
                "comment": " The IdentityPoolTagsListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "IdentityPoolTagsType",
                "comment": " The IdentityPoolTagsType data model.\n",
                "args": [],
                "type": "Dict.Dict String.String String.String"
            },
            {
                "name": "IdentityPoolsList",
                "comment": " The IdentityPoolsList data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentity.IdentityPoolShortDescription"
            },
            {
                "name": "IdentityProviders",
                "comment": " The IdentityProviders data model.\n",
                "args": [],
                "type": "Dict.Dict String.String String.String"
            },
            {
                "name": "ListIdentitiesInput",
                "comment": " The ListIdentitiesInput data model.\n",
                "args": [],
                "type": "{ hideDisabled : Maybe.Maybe Basics.Bool, identityPoolId : String.String, maxResults : Basics.Int, nextToken : Maybe.Maybe String.String }"
            },
            {
                "name": "ListIdentitiesResponse",
                "comment": " The ListIdentitiesResponse data model.\n",
                "args": [],
                "type": "{ identities : Maybe.Maybe AWS.CognitoIdentity.IdentitiesList, identityPoolId : Maybe.Maybe String.String, nextToken : Maybe.Maybe String.String }"
            },
            {
                "name": "ListIdentityPoolsInput",
                "comment": " The ListIdentityPoolsInput data model.\n",
                "args": [],
                "type": "{ maxResults : Basics.Int, nextToken : Maybe.Maybe String.String }"
            },
            {
                "name": "ListIdentityPoolsResponse",
                "comment": " The ListIdentityPoolsResponse data model.\n",
                "args": [],
                "type": "{ identityPools : Maybe.Maybe AWS.CognitoIdentity.IdentityPoolsList, nextToken : Maybe.Maybe String.String }"
            },
            {
                "name": "ListTagsForResourceInput",
                "comment": " The ListTagsForResourceInput data model.\n",
                "args": [],
                "type": "{ resourceArn : String.String }"
            },
            {
                "name": "ListTagsForResourceResponse",
                "comment": " The ListTagsForResourceResponse data model.\n",
                "args": [],
                "type": "{ tags : Maybe.Maybe AWS.CognitoIdentity.IdentityPoolTagsType }"
            },
            {
                "name": "LoginsList",
                "comment": " The LoginsList data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "LoginsMap",
                "comment": " The LoginsMap data model.\n",
                "args": [],
                "type": "Dict.Dict String.String String.String"
            },
            {
                "name": "LookupDeveloperIdentityInput",
                "comment": " The LookupDeveloperIdentityInput data model.\n",
                "args": [],
                "type": "{ developerUserIdentifier : Maybe.Maybe String.String, identityId : Maybe.Maybe String.String, identityPoolId : String.String, maxResults : Maybe.Maybe Basics.Int, nextToken : Maybe.Maybe String.String }"
            },
            {
                "name": "LookupDeveloperIdentityResponse",
                "comment": " The LookupDeveloperIdentityResponse data model.\n",
                "args": [],
                "type": "{ developerUserIdentifierList : Maybe.Maybe AWS.CognitoIdentity.DeveloperUserIdentifierList, identityId : Maybe.Maybe String.String, nextToken : Maybe.Maybe String.String }"
            },
            {
                "name": "MappingRule",
                "comment": " The MappingRule data model.\n",
                "args": [],
                "type": "{ claim : String.String, matchType : AWS.CognitoIdentity.MappingRuleMatchType, roleArn : String.String, value : String.String }"
            },
            {
                "name": "MappingRulesList",
                "comment": " The MappingRulesList data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentity.MappingRule"
            },
            {
                "name": "MergeDeveloperIdentitiesInput",
                "comment": " The MergeDeveloperIdentitiesInput data model.\n",
                "args": [],
                "type": "{ destinationUserIdentifier : String.String, developerProviderName : String.String, identityPoolId : String.String, sourceUserIdentifier : String.String }"
            },
            {
                "name": "MergeDeveloperIdentitiesResponse",
                "comment": " The MergeDeveloperIdentitiesResponse data model.\n",
                "args": [],
                "type": "{ identityId : Maybe.Maybe String.String }"
            },
            {
                "name": "OidcproviderList",
                "comment": " The OidcproviderList data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "RoleMapping",
                "comment": " The RoleMapping data model.\n",
                "args": [],
                "type": "{ ambiguousRoleResolution : Maybe.Maybe AWS.CognitoIdentity.AmbiguousRoleResolutionType, rulesConfiguration : Maybe.Maybe AWS.CognitoIdentity.RulesConfigurationType, type_ : AWS.CognitoIdentity.RoleMappingType }"
            },
            {
                "name": "RoleMappingMap",
                "comment": " The RoleMappingMap data model.\n",
                "args": [],
                "type": "Dict.Dict String.String AWS.CognitoIdentity.RoleMapping"
            },
            {
                "name": "RolesMap",
                "comment": " The RolesMap data model.\n",
                "args": [],
                "type": "Dict.Dict String.String String.String"
            },
            {
                "name": "RulesConfigurationType",
                "comment": " The RulesConfigurationType data model.\n",
                "args": [],
                "type": "{ rules : AWS.CognitoIdentity.MappingRulesList }"
            },
            {
                "name": "SamlproviderList",
                "comment": " The SamlproviderList data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "SetIdentityPoolRolesInput",
                "comment": " The SetIdentityPoolRolesInput data model.\n",
                "args": [],
                "type": "{ identityPoolId : String.String, roleMappings : Maybe.Maybe AWS.CognitoIdentity.RoleMappingMap, roles : AWS.CognitoIdentity.RolesMap }"
            },
            {
                "name": "TagResourceInput",
                "comment": " The TagResourceInput data model.\n",
                "args": [],
                "type": "{ resourceArn : String.String, tags : Maybe.Maybe AWS.CognitoIdentity.IdentityPoolTagsType }"
            },
            {
                "name": "TagResourceResponse",
                "comment": " The TagResourceResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "UnlinkDeveloperIdentityInput",
                "comment": " The UnlinkDeveloperIdentityInput data model.\n",
                "args": [],
                "type": "{ developerProviderName : String.String, developerUserIdentifier : String.String, identityId : String.String, identityPoolId : String.String }"
            },
            {
                "name": "UnlinkIdentityInput",
                "comment": " The UnlinkIdentityInput data model.\n",
                "args": [],
                "type": "{ identityId : String.String, logins : AWS.CognitoIdentity.LoginsMap, loginsToRemove : AWS.CognitoIdentity.LoginsList }"
            },
            {
                "name": "UnprocessedIdentityId",
                "comment": " The UnprocessedIdentityId data model.\n",
                "args": [],
                "type": "{ errorCode : Maybe.Maybe AWS.CognitoIdentity.ErrorCode, identityId : Maybe.Maybe String.String }"
            },
            {
                "name": "UnprocessedIdentityIdList",
                "comment": " The UnprocessedIdentityIdList data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentity.UnprocessedIdentityId"
            },
            {
                "name": "UntagResourceInput",
                "comment": " The UntagResourceInput data model.\n",
                "args": [],
                "type": "{ resourceArn : String.String, tagKeys : Maybe.Maybe AWS.CognitoIdentity.IdentityPoolTagsListType }"
            },
            {
                "name": "UntagResourceResponse",
                "comment": " The UntagResourceResponse data model.\n",
                "args": [],
                "type": "{}"
            }
        ],
        "values": [
            {
                "name": "ambiguousRoleResolutionType",
                "comment": " The AmbiguousRoleResolutionType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentity.AmbiguousRoleResolutionType"
            },
            {
                "name": "createIdentityPool",
                "comment": " Creates a new identity pool. The identity pool is a store of user identity information that is specific to your AWS account. The limit on identity pools is 60 per account. The keys for `SupportedLoginProviders` are as follows:\n\n  - Facebook: `graph.facebook.com` Google: `accounts.google.com` Amazon: `www.amazon.com` Twitter: `api.twitter.com` Digits: `www.digits.com`\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.CreateIdentityPoolInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.IdentityPool"
            },
            {
                "name": "deleteIdentities",
                "comment": " Deletes identities from an identity pool. You can specify a list of 1-60 identities that you want to delete.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.DeleteIdentitiesInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.DeleteIdentitiesResponse"
            },
            {
                "name": "deleteIdentityPool",
                "comment": " Deletes an identity pool. Once a pool is deleted, users will not be able to authenticate with the pool.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.DeleteIdentityPoolInput -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "describeIdentity",
                "comment": " Returns metadata related to the given identity, including when the identity was created and any associated linked logins.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.DescribeIdentityInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.IdentityDescription"
            },
            {
                "name": "describeIdentityPool",
                "comment": " Gets details about a particular identity pool, including the pool name, ID description, creation date, and current number of users.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.DescribeIdentityPoolInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.IdentityPool"
            },
            {
                "name": "errorCode",
                "comment": " The ErrorCode data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentity.ErrorCode"
            },
            {
                "name": "getCredentialsForIdentity",
                "comment": " Returns credentials for the provided identity ID. Any provided logins will be validated against supported login providers. If the token is for cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service with the appropriate role for the token.\n\nThis is a public API. You do not need any credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.GetCredentialsForIdentityInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.GetCredentialsForIdentityResponse"
            },
            {
                "name": "getId",
                "comment": " Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an implicit linked account.\n\nThis is a public API. You do not need any credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.GetIdInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.GetIdResponse"
            },
            {
                "name": "getIdentityPoolRoles",
                "comment": " Gets the roles for an identity pool.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.GetIdentityPoolRolesInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.GetIdentityPoolRolesResponse"
            },
            {
                "name": "getOpenIdToken",
                "comment": " Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by `GetId`. You can optionally add additional logins for the identity. Supplying multiple logins creates an implicit link.\n\nThe OpenId token is valid for 10 minutes.\n\nThis is a public API. You do not need any credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.GetOpenIdTokenInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.GetOpenIdTokenResponse"
            },
            {
                "name": "getOpenIdTokenForDeveloperIdentity",
                "comment": " Registers (or retrieves) a Cognito `IdentityId` and an OpenID Connect token for a user authenticated by your backend authentication process. Supplying multiple logins will create an implicit linked account. You can only specify one developer provider as part of the `Logins` map, which is linked to the identity pool. The developer provider is the \"domain\" by which Cognito will refer to your users.\n\nYou can use `GetOpenIdTokenForDeveloperIdentity` to create a new identity and to link new logins (that is, user credentials issued by a public provider or developer provider) to an existing identity. When you want to create a new identity, the `IdentityId` should be null. When you want to associate a new login with an existing authenticated/unauthenticated identity, you can do so by providing the existing `IdentityId`. This API will create the identity in the specified `IdentityPoolId`.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.GetOpenIdTokenForDeveloperIdentityInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.GetOpenIdTokenForDeveloperIdentityResponse"
            },
            {
                "name": "listIdentities",
                "comment": " Lists the identities in an identity pool.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.ListIdentitiesInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.ListIdentitiesResponse"
            },
            {
                "name": "listIdentityPools",
                "comment": " Lists all of the Cognito identity pools registered for your account.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.ListIdentityPoolsInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.ListIdentityPoolsResponse"
            },
            {
                "name": "listTagsForResource",
                "comment": " Lists the tags that are assigned to an Amazon Cognito identity pool.\n\nA tag is a label that you can apply to identity pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.\n\nYou can use this action up to 10 times per second, per account.\n\n",
                "type": "AWS.CognitoIdentity.ListTagsForResourceInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.ListTagsForResourceResponse"
            },
            {
                "name": "lookupDeveloperIdentity",
                "comment": " Retrieves the `IdentityID` associated with a `DeveloperUserIdentifier` or the list of `DeveloperUserIdentifier` values associated with an `IdentityId` for an existing identity. Either `IdentityID` or `DeveloperUserIdentifier` must not be null. If you supply only one of these values, the other value will be searched in the database and returned as a part of the response. If you supply both, `DeveloperUserIdentifier` will be matched against `IdentityID`. If the values are verified against the database, the response returns both values and is the same as the request. Otherwise a `ResourceConflictException` is thrown.\n\n`LookupDeveloperIdentity` is intended for low-throughput control plane operations: for example, to enable customer service to locate an identity ID by username. If you are using it for higher-volume operations such as user authentication, your requests are likely to be throttled. `GetOpenIdTokenForDeveloperIdentity` is a better option for higher-volume operations for user authentication.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.LookupDeveloperIdentityInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.LookupDeveloperIdentityResponse"
            },
            {
                "name": "mappingRuleMatchType",
                "comment": " The MappingRuleMatchType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentity.MappingRuleMatchType"
            },
            {
                "name": "mergeDeveloperIdentities",
                "comment": " Merges two users having different `IdentityId`s, existing in the same identity pool, and identified by the same developer provider. You can use this action to request that discrete users be merged and identified as a single user in the Cognito environment. Cognito associates the given source user (`SourceUserIdentifier`) with the `IdentityId` of the `DestinationUserIdentifier`. Only developer-authenticated users can be merged. If the users to be merged are associated with the same public provider, but as two different users, an exception will be thrown.\n\nThe number of linked logins is limited to 20. So, the number of linked logins for the source user, `SourceUserIdentifier`, and the destination user, `DestinationUserIdentifier`, together should not be larger than 20. Otherwise, an exception will be thrown.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.MergeDeveloperIdentitiesInput -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.MergeDeveloperIdentitiesResponse"
            },
            {
                "name": "roleMappingType",
                "comment": " The RoleMappingType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentity.RoleMappingType"
            },
            {
                "name": "service",
                "comment": " Configuration for this service.\n",
                "type": "AWS.Config.Region -> AWS.Service.Service"
            },
            {
                "name": "setIdentityPoolRoles",
                "comment": " Sets the roles for an identity pool. These roles are used when making calls to `GetCredentialsForIdentity` action.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.SetIdentityPoolRolesInput -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "tagResource",
                "comment": " Assigns a set of tags to an Amazon Cognito identity pool. A tag is a label that you can use to categorize and manage identity pools in different ways, such as by purpose, owner, environment, or other criteria.\n\nEach tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of an identity pool, one for testing and another for production, you might assign an `Environment` tag key to both identity pools. The value of this key might be `Test` for one identity pool and `Production` for the other.\n\nTags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your identity pools. In an IAM policy, you can constrain permissions for identity pools based on specific tags or tag values.\n\nYou can use this action up to 5 times per second, per account. An identity pool can have as many as 50 tags.\n\n",
                "type": "AWS.CognitoIdentity.TagResourceInput -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "unlinkDeveloperIdentity",
                "comment": " Unlinks a `DeveloperUserIdentifier` from an existing identity. Unlinked developer users will be considered new identities next time they are seen. If, for a given Cognito identity, you remove all federated identities as well as the developer user identifier, the Cognito identity becomes inaccessible.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.UnlinkDeveloperIdentityInput -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "unlinkIdentity",
                "comment": " Unlinks a federated identity from an existing account. Unlinked logins will be considered new identities next time they are seen. Removing the last linked login will make this identity inaccessible.\n\nThis is a public API. You do not need any credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.UnlinkIdentityInput -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "untagResource",
                "comment": " Removes the specified tags from an Amazon Cognito identity pool. You can use this action up to 5 times per second, per account\n",
                "type": "AWS.CognitoIdentity.UntagResourceInput -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "updateIdentityPool",
                "comment": " Updates an identity pool.\n\nYou must use AWS Developer credentials to call this API.\n\n",
                "type": "AWS.CognitoIdentity.IdentityPool -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentity.IdentityPool"
            }
        ],
        "binops": []
    },
    {
        "name": "AWS.CognitoIdentityProvider",
        "comment": " Using the Amazon Cognito User Pools API, you can create a user pool to manage directories and users. You can authenticate a user to obtain tokens related to user identity and access policies.\n\nThis API reference provides information about user pools in Amazon Cognito User Pools.\n\nFor more information, see the Amazon Cognito Documentation.\n\n\n# Service definition.\n\n@docs service\n\n\n# Service endpoints.\n\n@docs addCustomAttributes, adminAddUserToGroup, adminConfirmSignUp, adminCreateUser, adminDeleteUser, adminDeleteUserAttributes\n@docs adminDisableProviderForUser, adminDisableUser, adminEnableUser, adminForgetDevice, adminGetDevice, adminGetUser, adminInitiateAuth\n@docs adminLinkProviderForUser, adminListDevices, adminListGroupsForUser, adminListUserAuthEvents, adminRemoveUserFromGroup\n@docs adminResetUserPassword, adminRespondToAuthChallenge, adminSetUserMfapreference, adminSetUserPassword, adminSetUserSettings\n@docs adminUpdateAuthEventFeedback, adminUpdateDeviceStatus, adminUpdateUserAttributes, adminUserGlobalSignOut, associateSoftwareToken\n@docs changePassword, confirmDevice, confirmForgotPassword, confirmSignUp, createGroup, createIdentityProvider, createResourceServer\n@docs createUserImportJob, createUserPool, createUserPoolClient, createUserPoolDomain, deleteGroup, deleteIdentityProvider\n@docs deleteResourceServer, deleteUser, deleteUserAttributes, deleteUserPool, deleteUserPoolClient, deleteUserPoolDomain\n@docs describeIdentityProvider, describeResourceServer, describeRiskConfiguration, describeUserImportJob, describeUserPool\n@docs describeUserPoolClient, describeUserPoolDomain, forgetDevice, forgotPassword, getCsvheader, getDevice, getGroup\n@docs getIdentityProviderByIdentifier, getSigningCertificate, getUicustomization, getUser, getUserAttributeVerificationCode\n@docs getUserPoolMfaConfig, globalSignOut, initiateAuth, listDevices, listGroups, listIdentityProviders, listResourceServers\n@docs listTagsForResource, listUserImportJobs, listUserPoolClients, listUserPools, listUsers, listUsersInGroup, resendConfirmationCode\n@docs respondToAuthChallenge, setRiskConfiguration, setUicustomization, setUserMfapreference, setUserPoolMfaConfig, setUserSettings\n@docs signUp, startUserImportJob, stopUserImportJob, tagResource, untagResource, updateAuthEventFeedback, updateDeviceStatus, updateGroup\n@docs updateIdentityProvider, updateResourceServer, updateUserAttributes, updateUserPool, updateUserPoolClient, updateUserPoolDomain\n@docs verifySoftwareToken, verifyUserAttribute\n\n\n# API data model.\n\n@docs AccountTakeoverActionType, AccountTakeoverActionsType, AccountTakeoverEventActionType, AccountTakeoverRiskConfigurationType\n@docs AddCustomAttributesRequest, AddCustomAttributesResponse, AdminAddUserToGroupRequest, AdminConfirmSignUpRequest\n@docs AdminConfirmSignUpResponse, AdminCreateUserConfigType, AdminCreateUserRequest, AdminCreateUserResponse\n@docs AdminDeleteUserAttributesRequest, AdminDeleteUserAttributesResponse, AdminDeleteUserRequest\n@docs AdminDisableProviderForUserRequest, AdminDisableProviderForUserResponse, AdminDisableUserRequest, AdminDisableUserResponse\n@docs AdminEnableUserRequest, AdminEnableUserResponse, AdminForgetDeviceRequest, AdminGetDeviceRequest, AdminGetDeviceResponse\n@docs AdminGetUserRequest, AdminGetUserResponse, AdminInitiateAuthRequest, AdminInitiateAuthResponse, AdminLinkProviderForUserRequest\n@docs AdminLinkProviderForUserResponse, AdminListDevicesRequest, AdminListDevicesResponse, AdminListGroupsForUserRequest\n@docs AdminListGroupsForUserResponse, AdminListUserAuthEventsRequest, AdminListUserAuthEventsResponse\n@docs AdminRemoveUserFromGroupRequest, AdminResetUserPasswordRequest, AdminResetUserPasswordResponse\n@docs AdminRespondToAuthChallengeRequest, AdminRespondToAuthChallengeResponse, AdminSetUserMfapreferenceRequest\n@docs AdminSetUserMfapreferenceResponse, AdminSetUserPasswordRequest, AdminSetUserPasswordResponse, AdminSetUserSettingsRequest\n@docs AdminSetUserSettingsResponse, AdminUpdateAuthEventFeedbackRequest, AdminUpdateAuthEventFeedbackResponse\n@docs AdminUpdateDeviceStatusRequest, AdminUpdateDeviceStatusResponse, AdminUpdateUserAttributesRequest\n@docs AdminUpdateUserAttributesResponse, AdminUserGlobalSignOutRequest, AdminUserGlobalSignOutResponse, AdvancedSecurityModeType\n@docs AliasAttributeType, AliasAttributesListType, AnalyticsConfigurationType, AnalyticsMetadataType, AssociateSoftwareTokenRequest\n@docs AssociateSoftwareTokenResponse, AttributeDataType, AttributeListType, AttributeMappingType, AttributeNameListType, AttributeType\n@docs AuthEventType, AuthEventsType, AuthFlowType, AuthParametersType, AuthenticationResultType, BlockedIprangeListType\n@docs CallbackUrlsListType, ChallengeName, ChallengeNameType, ChallengeParametersType, ChallengeResponse, ChallengeResponseListType\n@docs ChallengeResponseType, ChallengeResponsesType, ChangePasswordRequest, ChangePasswordResponse, ClientMetadataType\n@docs ClientPermissionListType, CodeDeliveryDetailsListType, CodeDeliveryDetailsType, CompromisedCredentialsActionsType\n@docs CompromisedCredentialsEventActionType, CompromisedCredentialsRiskConfigurationType, ConfirmDeviceRequest\n@docs ConfirmDeviceResponse, ConfirmForgotPasswordRequest, ConfirmForgotPasswordResponse, ConfirmSignUpRequest, ConfirmSignUpResponse\n@docs ContextDataType, CreateGroupRequest, CreateGroupResponse, CreateIdentityProviderRequest, CreateIdentityProviderResponse\n@docs CreateResourceServerRequest, CreateResourceServerResponse, CreateUserImportJobRequest, CreateUserImportJobResponse\n@docs CreateUserPoolClientRequest, CreateUserPoolClientResponse, CreateUserPoolDomainRequest, CreateUserPoolDomainResponse\n@docs CreateUserPoolRequest, CreateUserPoolResponse, CustomAttributesListType, CustomDomainConfigType, DefaultEmailOptionType\n@docs DeleteGroupRequest, DeleteIdentityProviderRequest, DeleteResourceServerRequest, DeleteUserAttributesRequest\n@docs DeleteUserAttributesResponse, DeleteUserPoolClientRequest, DeleteUserPoolDomainRequest, DeleteUserPoolDomainResponse\n@docs DeleteUserPoolRequest, DeleteUserRequest, DeliveryMediumListType, DeliveryMediumType, DescribeIdentityProviderRequest\n@docs DescribeIdentityProviderResponse, DescribeResourceServerRequest, DescribeResourceServerResponse\n@docs DescribeRiskConfigurationRequest, DescribeRiskConfigurationResponse, DescribeUserImportJobRequest\n@docs DescribeUserImportJobResponse, DescribeUserPoolClientRequest, DescribeUserPoolClientResponse, DescribeUserPoolDomainRequest\n@docs DescribeUserPoolDomainResponse, DescribeUserPoolRequest, DescribeUserPoolResponse, DeviceConfigurationType, DeviceListType\n@docs DeviceRememberedStatusType, DeviceSecretVerifierConfigType, DeviceType, DomainDescriptionType, DomainStatusType\n@docs EmailConfigurationType, EmailSendingAccountType, EventContextDataType, EventFeedbackType, EventFilterType, EventFiltersType\n@docs EventResponseType, EventRiskType, EventType, ExplicitAuthFlowsListType, ExplicitAuthFlowsType, FeedbackValueType\n@docs ForgetDeviceRequest, ForgotPasswordRequest, ForgotPasswordResponse, GetCsvheaderRequest, GetCsvheaderResponse, GetDeviceRequest\n@docs GetDeviceResponse, GetGroupRequest, GetGroupResponse, GetIdentityProviderByIdentifierRequest\n@docs GetIdentityProviderByIdentifierResponse, GetSigningCertificateRequest, GetSigningCertificateResponse\n@docs GetUicustomizationRequest, GetUicustomizationResponse, GetUserAttributeVerificationCodeRequest\n@docs GetUserAttributeVerificationCodeResponse, GetUserPoolMfaConfigRequest, GetUserPoolMfaConfigResponse, GetUserRequest\n@docs GetUserResponse, GlobalSignOutRequest, GlobalSignOutResponse, GroupListType, GroupType, HttpHeader, HttpHeaderList\n@docs IdentityProviderType, IdentityProviderTypeType, IdpIdentifiersListType, InitiateAuthRequest, InitiateAuthResponse\n@docs LambdaConfigType, ListDevicesRequest, ListDevicesResponse, ListGroupsRequest, ListGroupsResponse, ListIdentityProvidersRequest\n@docs ListIdentityProvidersResponse, ListOfStringTypes, ListResourceServersRequest, ListResourceServersResponse\n@docs ListTagsForResourceRequest, ListTagsForResourceResponse, ListUserImportJobsRequest, ListUserImportJobsResponse\n@docs ListUserPoolClientsRequest, ListUserPoolClientsResponse, ListUserPoolsRequest, ListUserPoolsResponse, ListUsersInGroupRequest\n@docs ListUsersInGroupResponse, ListUsersRequest, ListUsersResponse, LogoutUrlsListType, MessageActionType, MessageTemplateType\n@docs MfaoptionListType, MfaoptionType, NewDeviceMetadataType, NotifyConfigurationType, NotifyEmailType, NumberAttributeConstraintsType\n@docs OauthFlowType, OauthFlowsType, PasswordPolicyType, ProviderDescription, ProviderDetailsType, ProviderUserIdentifierType\n@docs ProvidersListType, ResendConfirmationCodeRequest, ResendConfirmationCodeResponse, ResourceServerScopeListType\n@docs ResourceServerScopeType, ResourceServerType, ResourceServersListType, RespondToAuthChallengeRequest\n@docs RespondToAuthChallengeResponse, RiskConfigurationType, RiskDecisionType, RiskExceptionConfigurationType, RiskLevelType\n@docs SchemaAttributeType, SchemaAttributesListType, ScopeListType, SearchedAttributeNamesListType, SetRiskConfigurationRequest\n@docs SetRiskConfigurationResponse, SetUicustomizationRequest, SetUicustomizationResponse, SetUserMfapreferenceRequest\n@docs SetUserMfapreferenceResponse, SetUserPoolMfaConfigRequest, SetUserPoolMfaConfigResponse, SetUserSettingsRequest\n@docs SetUserSettingsResponse, SignUpRequest, SignUpResponse, SkippedIprangeListType, SmsConfigurationType, SmsMfaConfigType\n@docs SmsmfaSettingsType, SoftwareTokenMfaConfigType, SoftwareTokenMfaSettingsType, StartUserImportJobRequest\n@docs StartUserImportJobResponse, StatusType, StopUserImportJobRequest, StopUserImportJobResponse, StringAttributeConstraintsType\n@docs SupportedIdentityProvidersListType, TagResourceRequest, TagResourceResponse, UicustomizationType, UntagResourceRequest\n@docs UntagResourceResponse, UpdateAuthEventFeedbackRequest, UpdateAuthEventFeedbackResponse, UpdateDeviceStatusRequest\n@docs UpdateDeviceStatusResponse, UpdateGroupRequest, UpdateGroupResponse, UpdateIdentityProviderRequest\n@docs UpdateIdentityProviderResponse, UpdateResourceServerRequest, UpdateResourceServerResponse, UpdateUserAttributesRequest\n@docs UpdateUserAttributesResponse, UpdateUserPoolClientRequest, UpdateUserPoolClientResponse, UpdateUserPoolDomainRequest\n@docs UpdateUserPoolDomainResponse, UpdateUserPoolRequest, UpdateUserPoolResponse, UserContextDataType, UserImportJobStatusType\n@docs UserImportJobType, UserImportJobsListType, UserMfasettingListType, UserPoolAddOnsType, UserPoolClientDescription\n@docs UserPoolClientListType, UserPoolClientType, UserPoolDescriptionType, UserPoolListType, UserPoolMfaType, UserPoolPolicyType\n@docs UserPoolTagsListType, UserPoolTagsType, UserPoolType, UserStatusType, UserType, UsernameAttributeType, UsernameAttributesListType\n@docs UsersListType, VerificationMessageTemplateType, VerifiedAttributeType, VerifiedAttributesListType, VerifySoftwareTokenRequest\n@docs VerifySoftwareTokenResponse, VerifySoftwareTokenResponseType, VerifyUserAttributeRequest, VerifyUserAttributeResponse\n@docs accountTakeoverEventActionType, advancedSecurityModeType, aliasAttributeType, attributeDataType, authFlowType, challengeName\n@docs challengeNameType, challengeResponse, compromisedCredentialsEventActionType, defaultEmailOptionType, deliveryMediumType\n@docs deviceRememberedStatusType, domainStatusType, emailSendingAccountType, eventFilterType, eventResponseType, eventType\n@docs explicitAuthFlowsType, feedbackValueType, identityProviderTypeType, messageActionType, oauthFlowType, riskDecisionType\n@docs riskLevelType, statusType, userImportJobStatusType, userPoolMfaType, userStatusType, usernameAttributeType, verifiedAttributeType\n@docs verifySoftwareTokenResponseType\n\n",
        "unions": [
            {
                "name": "AccountTakeoverEventActionType",
                "comment": " The AccountTakeoverEventActionType data model.\n",
                "args": [],
                "cases": [
                    [
                        "AccountTakeoverEventActionTypeBlock",
                        []
                    ],
                    [
                        "AccountTakeoverEventActionTypeMfaIfConfigured",
                        []
                    ],
                    [
                        "AccountTakeoverEventActionTypeMfaRequired",
                        []
                    ],
                    [
                        "AccountTakeoverEventActionTypeNoAction",
                        []
                    ]
                ]
            },
            {
                "name": "AdvancedSecurityModeType",
                "comment": " The AdvancedSecurityModeType data model.\n",
                "args": [],
                "cases": [
                    [
                        "AdvancedSecurityModeTypeOff",
                        []
                    ],
                    [
                        "AdvancedSecurityModeTypeAudit",
                        []
                    ],
                    [
                        "AdvancedSecurityModeTypeEnforced",
                        []
                    ]
                ]
            },
            {
                "name": "AliasAttributeType",
                "comment": " The AliasAttributeType data model.\n",
                "args": [],
                "cases": [
                    [
                        "AliasAttributeTypePhoneNumber",
                        []
                    ],
                    [
                        "AliasAttributeTypeEmail",
                        []
                    ],
                    [
                        "AliasAttributeTypePreferredUsername",
                        []
                    ]
                ]
            },
            {
                "name": "AttributeDataType",
                "comment": " The AttributeDataType data model.\n",
                "args": [],
                "cases": [
                    [
                        "AttributeDataTypeString_",
                        []
                    ],
                    [
                        "AttributeDataTypeNumber",
                        []
                    ],
                    [
                        "AttributeDataTypeDateTime",
                        []
                    ],
                    [
                        "AttributeDataTypeBoolean",
                        []
                    ]
                ]
            },
            {
                "name": "AuthFlowType",
                "comment": " The AuthFlowType data model.\n",
                "args": [],
                "cases": [
                    [
                        "AuthFlowTypeUserSrpAuth",
                        []
                    ],
                    [
                        "AuthFlowTypeRefreshTokenAuth",
                        []
                    ],
                    [
                        "AuthFlowTypeRefreshToken",
                        []
                    ],
                    [
                        "AuthFlowTypeCustomAuth",
                        []
                    ],
                    [
                        "AuthFlowTypeAdminNoSrpAuth",
                        []
                    ],
                    [
                        "AuthFlowTypeUserPasswordAuth",
                        []
                    ]
                ]
            },
            {
                "name": "ChallengeName",
                "comment": " The ChallengeName data model.\n",
                "args": [],
                "cases": [
                    [
                        "ChallengeNamePassword",
                        []
                    ],
                    [
                        "ChallengeNameMfa",
                        []
                    ]
                ]
            },
            {
                "name": "ChallengeNameType",
                "comment": " The ChallengeNameType data model.\n",
                "args": [],
                "cases": [
                    [
                        "ChallengeNameTypeSmsMfa",
                        []
                    ],
                    [
                        "ChallengeNameTypeSoftwareTokenMfa",
                        []
                    ],
                    [
                        "ChallengeNameTypeSelectMfaType",
                        []
                    ],
                    [
                        "ChallengeNameTypeMfaSetup",
                        []
                    ],
                    [
                        "ChallengeNameTypePasswordVerifier",
                        []
                    ],
                    [
                        "ChallengeNameTypeCustomChallenge",
                        []
                    ],
                    [
                        "ChallengeNameTypeDeviceSrpAuth",
                        []
                    ],
                    [
                        "ChallengeNameTypeDevicePasswordVerifier",
                        []
                    ],
                    [
                        "ChallengeNameTypeAdminNoSrpAuth",
                        []
                    ],
                    [
                        "ChallengeNameTypeNewPasswordRequired",
                        []
                    ]
                ]
            },
            {
                "name": "ChallengeResponse",
                "comment": " The ChallengeResponse data model.\n",
                "args": [],
                "cases": [
                    [
                        "ChallengeResponseSuccess",
                        []
                    ],
                    [
                        "ChallengeResponseFailure",
                        []
                    ]
                ]
            },
            {
                "name": "CompromisedCredentialsEventActionType",
                "comment": " The CompromisedCredentialsEventActionType data model.\n",
                "args": [],
                "cases": [
                    [
                        "CompromisedCredentialsEventActionTypeBlock",
                        []
                    ],
                    [
                        "CompromisedCredentialsEventActionTypeNoAction",
                        []
                    ]
                ]
            },
            {
                "name": "DefaultEmailOptionType",
                "comment": " The DefaultEmailOptionType data model.\n",
                "args": [],
                "cases": [
                    [
                        "DefaultEmailOptionTypeConfirmWithLink",
                        []
                    ],
                    [
                        "DefaultEmailOptionTypeConfirmWithCode",
                        []
                    ]
                ]
            },
            {
                "name": "DeliveryMediumType",
                "comment": " The DeliveryMediumType data model.\n",
                "args": [],
                "cases": [
                    [
                        "DeliveryMediumTypeSms",
                        []
                    ],
                    [
                        "DeliveryMediumTypeEmail",
                        []
                    ]
                ]
            },
            {
                "name": "DeviceRememberedStatusType",
                "comment": " The DeviceRememberedStatusType data model.\n",
                "args": [],
                "cases": [
                    [
                        "DeviceRememberedStatusTypeRemembered",
                        []
                    ],
                    [
                        "DeviceRememberedStatusTypeNotRemembered",
                        []
                    ]
                ]
            },
            {
                "name": "DomainStatusType",
                "comment": " The DomainStatusType data model.\n",
                "args": [],
                "cases": [
                    [
                        "DomainStatusTypeCreating",
                        []
                    ],
                    [
                        "DomainStatusTypeDeleting",
                        []
                    ],
                    [
                        "DomainStatusTypeUpdating",
                        []
                    ],
                    [
                        "DomainStatusTypeActive",
                        []
                    ],
                    [
                        "DomainStatusTypeFailed",
                        []
                    ]
                ]
            },
            {
                "name": "EmailSendingAccountType",
                "comment": " The EmailSendingAccountType data model.\n",
                "args": [],
                "cases": [
                    [
                        "EmailSendingAccountTypeCognitoDefault",
                        []
                    ],
                    [
                        "EmailSendingAccountTypeDeveloper",
                        []
                    ]
                ]
            },
            {
                "name": "EventFilterType",
                "comment": " The EventFilterType data model.\n",
                "args": [],
                "cases": [
                    [
                        "EventFilterTypeSignIn",
                        []
                    ],
                    [
                        "EventFilterTypePasswordChange",
                        []
                    ],
                    [
                        "EventFilterTypeSignUp",
                        []
                    ]
                ]
            },
            {
                "name": "EventResponseType",
                "comment": " The EventResponseType data model.\n",
                "args": [],
                "cases": [
                    [
                        "EventResponseTypeSuccess",
                        []
                    ],
                    [
                        "EventResponseTypeFailure",
                        []
                    ]
                ]
            },
            {
                "name": "EventType",
                "comment": " The EventType data model.\n",
                "args": [],
                "cases": [
                    [
                        "EventTypeSignIn",
                        []
                    ],
                    [
                        "EventTypeSignUp",
                        []
                    ],
                    [
                        "EventTypeForgotPassword",
                        []
                    ]
                ]
            },
            {
                "name": "ExplicitAuthFlowsType",
                "comment": " The ExplicitAuthFlowsType data model.\n",
                "args": [],
                "cases": [
                    [
                        "ExplicitAuthFlowsTypeAdminNoSrpAuth",
                        []
                    ],
                    [
                        "ExplicitAuthFlowsTypeCustomAuthFlowOnly",
                        []
                    ],
                    [
                        "ExplicitAuthFlowsTypeUserPasswordAuth",
                        []
                    ]
                ]
            },
            {
                "name": "FeedbackValueType",
                "comment": " The FeedbackValueType data model.\n",
                "args": [],
                "cases": [
                    [
                        "FeedbackValueTypeValid",
                        []
                    ],
                    [
                        "FeedbackValueTypeInvalid",
                        []
                    ]
                ]
            },
            {
                "name": "IdentityProviderTypeType",
                "comment": " The IdentityProviderTypeType data model.\n",
                "args": [],
                "cases": [
                    [
                        "IdentityProviderTypeTypeSaml",
                        []
                    ],
                    [
                        "IdentityProviderTypeTypeFacebook",
                        []
                    ],
                    [
                        "IdentityProviderTypeTypeGoogle",
                        []
                    ],
                    [
                        "IdentityProviderTypeTypeLoginWithAmazon",
                        []
                    ],
                    [
                        "IdentityProviderTypeTypeOidc",
                        []
                    ]
                ]
            },
            {
                "name": "MessageActionType",
                "comment": " The MessageActionType data model.\n",
                "args": [],
                "cases": [
                    [
                        "MessageActionTypeResend",
                        []
                    ],
                    [
                        "MessageActionTypeSuppress",
                        []
                    ]
                ]
            },
            {
                "name": "OauthFlowType",
                "comment": " The OauthFlowType data model.\n",
                "args": [],
                "cases": [
                    [
                        "OauthFlowTypeCode",
                        []
                    ],
                    [
                        "OauthFlowTypeImplicit",
                        []
                    ],
                    [
                        "OauthFlowTypeClientCredentials",
                        []
                    ]
                ]
            },
            {
                "name": "RiskDecisionType",
                "comment": " The RiskDecisionType data model.\n",
                "args": [],
                "cases": [
                    [
                        "RiskDecisionTypeNoRisk",
                        []
                    ],
                    [
                        "RiskDecisionTypeAccountTakeover",
                        []
                    ],
                    [
                        "RiskDecisionTypeBlock",
                        []
                    ]
                ]
            },
            {
                "name": "RiskLevelType",
                "comment": " The RiskLevelType data model.\n",
                "args": [],
                "cases": [
                    [
                        "RiskLevelTypeLow",
                        []
                    ],
                    [
                        "RiskLevelTypeMedium",
                        []
                    ],
                    [
                        "RiskLevelTypeHigh",
                        []
                    ]
                ]
            },
            {
                "name": "StatusType",
                "comment": " The StatusType data model.\n",
                "args": [],
                "cases": [
                    [
                        "StatusTypeEnabled",
                        []
                    ],
                    [
                        "StatusTypeDisabled",
                        []
                    ]
                ]
            },
            {
                "name": "UserImportJobStatusType",
                "comment": " The UserImportJobStatusType data model.\n",
                "args": [],
                "cases": [
                    [
                        "UserImportJobStatusTypeCreated",
                        []
                    ],
                    [
                        "UserImportJobStatusTypePending",
                        []
                    ],
                    [
                        "UserImportJobStatusTypeInProgress",
                        []
                    ],
                    [
                        "UserImportJobStatusTypeStopping",
                        []
                    ],
                    [
                        "UserImportJobStatusTypeExpired",
                        []
                    ],
                    [
                        "UserImportJobStatusTypeStopped",
                        []
                    ],
                    [
                        "UserImportJobStatusTypeFailed",
                        []
                    ],
                    [
                        "UserImportJobStatusTypeSucceeded",
                        []
                    ]
                ]
            },
            {
                "name": "UserPoolMfaType",
                "comment": " The UserPoolMfaType data model.\n",
                "args": [],
                "cases": [
                    [
                        "UserPoolMfaTypeOff",
                        []
                    ],
                    [
                        "UserPoolMfaTypeOn",
                        []
                    ],
                    [
                        "UserPoolMfaTypeOptional",
                        []
                    ]
                ]
            },
            {
                "name": "UserStatusType",
                "comment": " The UserStatusType data model.\n",
                "args": [],
                "cases": [
                    [
                        "UserStatusTypeUnconfirmed",
                        []
                    ],
                    [
                        "UserStatusTypeConfirmed",
                        []
                    ],
                    [
                        "UserStatusTypeArchived",
                        []
                    ],
                    [
                        "UserStatusTypeCompromised",
                        []
                    ],
                    [
                        "UserStatusTypeUnknown",
                        []
                    ],
                    [
                        "UserStatusTypeResetRequired",
                        []
                    ],
                    [
                        "UserStatusTypeForceChangePassword",
                        []
                    ]
                ]
            },
            {
                "name": "UsernameAttributeType",
                "comment": " The UsernameAttributeType data model.\n",
                "args": [],
                "cases": [
                    [
                        "UsernameAttributeTypePhoneNumber",
                        []
                    ],
                    [
                        "UsernameAttributeTypeEmail",
                        []
                    ]
                ]
            },
            {
                "name": "VerifiedAttributeType",
                "comment": " The VerifiedAttributeType data model.\n",
                "args": [],
                "cases": [
                    [
                        "VerifiedAttributeTypePhoneNumber",
                        []
                    ],
                    [
                        "VerifiedAttributeTypeEmail",
                        []
                    ]
                ]
            },
            {
                "name": "VerifySoftwareTokenResponseType",
                "comment": " The VerifySoftwareTokenResponseType data model.\n",
                "args": [],
                "cases": [
                    [
                        "VerifySoftwareTokenResponseTypeSuccess",
                        []
                    ],
                    [
                        "VerifySoftwareTokenResponseTypeError",
                        []
                    ]
                ]
            }
        ],
        "aliases": [
            {
                "name": "AccountTakeoverActionType",
                "comment": " The AccountTakeoverActionType data model.\n",
                "args": [],
                "type": "{ eventAction : AWS.CognitoIdentityProvider.AccountTakeoverEventActionType, notify : Basics.Bool }"
            },
            {
                "name": "AccountTakeoverActionsType",
                "comment": " The AccountTakeoverActionsType data model.\n",
                "args": [],
                "type": "{ highAction : Maybe.Maybe AWS.CognitoIdentityProvider.AccountTakeoverActionType, lowAction : Maybe.Maybe AWS.CognitoIdentityProvider.AccountTakeoverActionType, mediumAction : Maybe.Maybe AWS.CognitoIdentityProvider.AccountTakeoverActionType }"
            },
            {
                "name": "AccountTakeoverRiskConfigurationType",
                "comment": " The AccountTakeoverRiskConfigurationType data model.\n",
                "args": [],
                "type": "{ actions : AWS.CognitoIdentityProvider.AccountTakeoverActionsType, notifyConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.NotifyConfigurationType }"
            },
            {
                "name": "AddCustomAttributesRequest",
                "comment": " The AddCustomAttributesRequest data model.\n",
                "args": [],
                "type": "{ customAttributes : AWS.CognitoIdentityProvider.CustomAttributesListType, userPoolId : String.String }"
            },
            {
                "name": "AddCustomAttributesResponse",
                "comment": " The AddCustomAttributesResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminAddUserToGroupRequest",
                "comment": " The AdminAddUserToGroupRequest data model.\n",
                "args": [],
                "type": "{ groupName : String.String, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminConfirmSignUpRequest",
                "comment": " The AdminConfirmSignUpRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminConfirmSignUpResponse",
                "comment": " The AdminConfirmSignUpResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminCreateUserConfigType",
                "comment": " The AdminCreateUserConfigType data model.\n",
                "args": [],
                "type": "{ allowAdminCreateUserOnly : Maybe.Maybe Basics.Bool, inviteMessageTemplate : Maybe.Maybe AWS.CognitoIdentityProvider.MessageTemplateType, unusedAccountValidityDays : Maybe.Maybe Basics.Int }"
            },
            {
                "name": "AdminCreateUserRequest",
                "comment": " The AdminCreateUserRequest data model.\n",
                "args": [],
                "type": "{ desiredDeliveryMediums : Maybe.Maybe AWS.CognitoIdentityProvider.DeliveryMediumListType, forceAliasCreation : Maybe.Maybe Basics.Bool, messageAction : Maybe.Maybe AWS.CognitoIdentityProvider.MessageActionType, temporaryPassword : Maybe.Maybe String.String, userAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.AttributeListType, userPoolId : String.String, username : String.String, validationData : Maybe.Maybe AWS.CognitoIdentityProvider.AttributeListType }"
            },
            {
                "name": "AdminCreateUserResponse",
                "comment": " The AdminCreateUserResponse data model.\n",
                "args": [],
                "type": "{ user : Maybe.Maybe AWS.CognitoIdentityProvider.UserType }"
            },
            {
                "name": "AdminDeleteUserAttributesRequest",
                "comment": " The AdminDeleteUserAttributesRequest data model.\n",
                "args": [],
                "type": "{ userAttributeNames : AWS.CognitoIdentityProvider.AttributeNameListType, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminDeleteUserAttributesResponse",
                "comment": " The AdminDeleteUserAttributesResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminDeleteUserRequest",
                "comment": " The AdminDeleteUserRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminDisableProviderForUserRequest",
                "comment": " The AdminDisableProviderForUserRequest data model.\n",
                "args": [],
                "type": "{ user : AWS.CognitoIdentityProvider.ProviderUserIdentifierType, userPoolId : String.String }"
            },
            {
                "name": "AdminDisableProviderForUserResponse",
                "comment": " The AdminDisableProviderForUserResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminDisableUserRequest",
                "comment": " The AdminDisableUserRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminDisableUserResponse",
                "comment": " The AdminDisableUserResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminEnableUserRequest",
                "comment": " The AdminEnableUserRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminEnableUserResponse",
                "comment": " The AdminEnableUserResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminForgetDeviceRequest",
                "comment": " The AdminForgetDeviceRequest data model.\n",
                "args": [],
                "type": "{ deviceKey : String.String, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminGetDeviceRequest",
                "comment": " The AdminGetDeviceRequest data model.\n",
                "args": [],
                "type": "{ deviceKey : String.String, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminGetDeviceResponse",
                "comment": " The AdminGetDeviceResponse data model.\n",
                "args": [],
                "type": "{ device : AWS.CognitoIdentityProvider.DeviceType }"
            },
            {
                "name": "AdminGetUserRequest",
                "comment": " The AdminGetUserRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminGetUserResponse",
                "comment": " The AdminGetUserResponse data model.\n",
                "args": [],
                "type": "{ enabled : Maybe.Maybe Basics.Bool, mfaoptions : Maybe.Maybe AWS.CognitoIdentityProvider.MfaoptionListType, preferredMfaSetting : Maybe.Maybe String.String, userAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.AttributeListType, userCreateDate : Maybe.Maybe String.String, userLastModifiedDate : Maybe.Maybe String.String, userMfasettingList : Maybe.Maybe AWS.CognitoIdentityProvider.UserMfasettingListType, userStatus : Maybe.Maybe AWS.CognitoIdentityProvider.UserStatusType, username : String.String }"
            },
            {
                "name": "AdminInitiateAuthRequest",
                "comment": " The AdminInitiateAuthRequest data model.\n",
                "args": [],
                "type": "{ analyticsMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsMetadataType, authFlow : AWS.CognitoIdentityProvider.AuthFlowType, authParameters : Maybe.Maybe AWS.CognitoIdentityProvider.AuthParametersType, clientId : String.String, clientMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.ClientMetadataType, contextData : Maybe.Maybe AWS.CognitoIdentityProvider.ContextDataType, userPoolId : String.String }"
            },
            {
                "name": "AdminInitiateAuthResponse",
                "comment": " The AdminInitiateAuthResponse data model.\n",
                "args": [],
                "type": "{ authenticationResult : Maybe.Maybe AWS.CognitoIdentityProvider.AuthenticationResultType, challengeName : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeNameType, challengeParameters : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeParametersType, session : Maybe.Maybe String.String }"
            },
            {
                "name": "AdminLinkProviderForUserRequest",
                "comment": " The AdminLinkProviderForUserRequest data model.\n",
                "args": [],
                "type": "{ destinationUser : AWS.CognitoIdentityProvider.ProviderUserIdentifierType, sourceUser : AWS.CognitoIdentityProvider.ProviderUserIdentifierType, userPoolId : String.String }"
            },
            {
                "name": "AdminLinkProviderForUserResponse",
                "comment": " The AdminLinkProviderForUserResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminListDevicesRequest",
                "comment": " The AdminListDevicesRequest data model.\n",
                "args": [],
                "type": "{ limit : Maybe.Maybe Basics.Int, paginationToken : Maybe.Maybe String.String, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminListDevicesResponse",
                "comment": " The AdminListDevicesResponse data model.\n",
                "args": [],
                "type": "{ devices : Maybe.Maybe AWS.CognitoIdentityProvider.DeviceListType, paginationToken : Maybe.Maybe String.String }"
            },
            {
                "name": "AdminListGroupsForUserRequest",
                "comment": " The AdminListGroupsForUserRequest data model.\n",
                "args": [],
                "type": "{ limit : Maybe.Maybe Basics.Int, nextToken : Maybe.Maybe String.String, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminListGroupsForUserResponse",
                "comment": " The AdminListGroupsForUserResponse data model.\n",
                "args": [],
                "type": "{ groups : Maybe.Maybe AWS.CognitoIdentityProvider.GroupListType, nextToken : Maybe.Maybe String.String }"
            },
            {
                "name": "AdminListUserAuthEventsRequest",
                "comment": " The AdminListUserAuthEventsRequest data model.\n",
                "args": [],
                "type": "{ maxResults : Maybe.Maybe Basics.Int, nextToken : Maybe.Maybe String.String, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminListUserAuthEventsResponse",
                "comment": " The AdminListUserAuthEventsResponse data model.\n",
                "args": [],
                "type": "{ authEvents : Maybe.Maybe AWS.CognitoIdentityProvider.AuthEventsType, nextToken : Maybe.Maybe String.String }"
            },
            {
                "name": "AdminRemoveUserFromGroupRequest",
                "comment": " The AdminRemoveUserFromGroupRequest data model.\n",
                "args": [],
                "type": "{ groupName : String.String, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminResetUserPasswordRequest",
                "comment": " The AdminResetUserPasswordRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminResetUserPasswordResponse",
                "comment": " The AdminResetUserPasswordResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminRespondToAuthChallengeRequest",
                "comment": " The AdminRespondToAuthChallengeRequest data model.\n",
                "args": [],
                "type": "{ analyticsMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsMetadataType, challengeName : AWS.CognitoIdentityProvider.ChallengeNameType, challengeResponses : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeResponsesType, clientId : String.String, contextData : Maybe.Maybe AWS.CognitoIdentityProvider.ContextDataType, session : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "AdminRespondToAuthChallengeResponse",
                "comment": " The AdminRespondToAuthChallengeResponse data model.\n",
                "args": [],
                "type": "{ authenticationResult : Maybe.Maybe AWS.CognitoIdentityProvider.AuthenticationResultType, challengeName : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeNameType, challengeParameters : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeParametersType, session : Maybe.Maybe String.String }"
            },
            {
                "name": "AdminSetUserMfapreferenceRequest",
                "comment": " The AdminSetUserMfapreferenceRequest data model.\n",
                "args": [],
                "type": "{ smsmfaSettings : Maybe.Maybe AWS.CognitoIdentityProvider.SmsmfaSettingsType, softwareTokenMfaSettings : Maybe.Maybe AWS.CognitoIdentityProvider.SoftwareTokenMfaSettingsType, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminSetUserMfapreferenceResponse",
                "comment": " The AdminSetUserMfapreferenceResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminSetUserPasswordRequest",
                "comment": " The AdminSetUserPasswordRequest data model.\n",
                "args": [],
                "type": "{ password : String.String, permanent : Maybe.Maybe Basics.Bool, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminSetUserPasswordResponse",
                "comment": " The AdminSetUserPasswordResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminSetUserSettingsRequest",
                "comment": " The AdminSetUserSettingsRequest data model.\n",
                "args": [],
                "type": "{ mfaoptions : AWS.CognitoIdentityProvider.MfaoptionListType, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminSetUserSettingsResponse",
                "comment": " The AdminSetUserSettingsResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminUpdateAuthEventFeedbackRequest",
                "comment": " The AdminUpdateAuthEventFeedbackRequest data model.\n",
                "args": [],
                "type": "{ eventId : String.String, feedbackValue : AWS.CognitoIdentityProvider.FeedbackValueType, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminUpdateAuthEventFeedbackResponse",
                "comment": " The AdminUpdateAuthEventFeedbackResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminUpdateDeviceStatusRequest",
                "comment": " The AdminUpdateDeviceStatusRequest data model.\n",
                "args": [],
                "type": "{ deviceKey : String.String, deviceRememberedStatus : Maybe.Maybe AWS.CognitoIdentityProvider.DeviceRememberedStatusType, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminUpdateDeviceStatusResponse",
                "comment": " The AdminUpdateDeviceStatusResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminUpdateUserAttributesRequest",
                "comment": " The AdminUpdateUserAttributesRequest data model.\n",
                "args": [],
                "type": "{ userAttributes : AWS.CognitoIdentityProvider.AttributeListType, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminUpdateUserAttributesResponse",
                "comment": " The AdminUpdateUserAttributesResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AdminUserGlobalSignOutRequest",
                "comment": " The AdminUserGlobalSignOutRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String, username : String.String }"
            },
            {
                "name": "AdminUserGlobalSignOutResponse",
                "comment": " The AdminUserGlobalSignOutResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "AliasAttributesListType",
                "comment": " The AliasAttributesListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.AliasAttributeType"
            },
            {
                "name": "AnalyticsConfigurationType",
                "comment": " The AnalyticsConfigurationType data model.\n",
                "args": [],
                "type": "{ applicationId : String.String, externalId : String.String, roleArn : String.String, userDataShared : Maybe.Maybe Basics.Bool }"
            },
            {
                "name": "AnalyticsMetadataType",
                "comment": " The AnalyticsMetadataType data model.\n",
                "args": [],
                "type": "{ analyticsEndpointId : Maybe.Maybe String.String }"
            },
            {
                "name": "AssociateSoftwareTokenRequest",
                "comment": " The AssociateSoftwareTokenRequest data model.\n",
                "args": [],
                "type": "{ accessToken : Maybe.Maybe String.String, session : Maybe.Maybe String.String }"
            },
            {
                "name": "AssociateSoftwareTokenResponse",
                "comment": " The AssociateSoftwareTokenResponse data model.\n",
                "args": [],
                "type": "{ secretCode : Maybe.Maybe String.String, session : Maybe.Maybe String.String }"
            },
            {
                "name": "AttributeListType",
                "comment": " The AttributeListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.AttributeType"
            },
            {
                "name": "AttributeMappingType",
                "comment": " The AttributeMappingType data model.\n",
                "args": [],
                "type": "Dict.Dict String.String String.String"
            },
            {
                "name": "AttributeNameListType",
                "comment": " The AttributeNameListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "AttributeType",
                "comment": " The AttributeType data model.\n",
                "args": [],
                "type": "{ name : String.String, value : Maybe.Maybe String.String }"
            },
            {
                "name": "AuthEventType",
                "comment": " The AuthEventType data model.\n",
                "args": [],
                "type": "{ challengeResponses : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeResponseListType, creationDate : Maybe.Maybe String.String, eventContextData : Maybe.Maybe AWS.CognitoIdentityProvider.EventContextDataType, eventFeedback : Maybe.Maybe AWS.CognitoIdentityProvider.EventFeedbackType, eventId : Maybe.Maybe String.String, eventResponse : Maybe.Maybe AWS.CognitoIdentityProvider.EventResponseType, eventRisk : Maybe.Maybe AWS.CognitoIdentityProvider.EventRiskType, eventType : Maybe.Maybe AWS.CognitoIdentityProvider.EventType }"
            },
            {
                "name": "AuthEventsType",
                "comment": " The AuthEventsType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.AuthEventType"
            },
            {
                "name": "AuthParametersType",
                "comment": " The AuthParametersType data model.\n",
                "args": [],
                "type": "Dict.Dict String.String String.String"
            },
            {
                "name": "AuthenticationResultType",
                "comment": " The AuthenticationResultType data model.\n",
                "args": [],
                "type": "{ accessToken : Maybe.Maybe String.String, expiresIn : Maybe.Maybe Basics.Int, idToken : Maybe.Maybe String.String, newDeviceMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.NewDeviceMetadataType, refreshToken : Maybe.Maybe String.String, tokenType : Maybe.Maybe String.String }"
            },
            {
                "name": "BlockedIprangeListType",
                "comment": " The BlockedIprangeListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "CallbackUrlsListType",
                "comment": " The CallbackUrlsListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "ChallengeParametersType",
                "comment": " The ChallengeParametersType data model.\n",
                "args": [],
                "type": "Dict.Dict String.String String.String"
            },
            {
                "name": "ChallengeResponseListType",
                "comment": " The ChallengeResponseListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.ChallengeResponseType"
            },
            {
                "name": "ChallengeResponseType",
                "comment": " The ChallengeResponseType data model.\n",
                "args": [],
                "type": "{ challengeName : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeName, challengeResponse : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeResponse }"
            },
            {
                "name": "ChallengeResponsesType",
                "comment": " The ChallengeResponsesType data model.\n",
                "args": [],
                "type": "Dict.Dict String.String String.String"
            },
            {
                "name": "ChangePasswordRequest",
                "comment": " The ChangePasswordRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String, previousPassword : String.String, proposedPassword : String.String }"
            },
            {
                "name": "ChangePasswordResponse",
                "comment": " The ChangePasswordResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "ClientMetadataType",
                "comment": " The ClientMetadataType data model.\n",
                "args": [],
                "type": "Dict.Dict String.String String.String"
            },
            {
                "name": "ClientPermissionListType",
                "comment": " The ClientPermissionListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "CodeDeliveryDetailsListType",
                "comment": " The CodeDeliveryDetailsListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.CodeDeliveryDetailsType"
            },
            {
                "name": "CodeDeliveryDetailsType",
                "comment": " The CodeDeliveryDetailsType data model.\n",
                "args": [],
                "type": "{ attributeName : Maybe.Maybe String.String, deliveryMedium : Maybe.Maybe AWS.CognitoIdentityProvider.DeliveryMediumType, destination : Maybe.Maybe String.String }"
            },
            {
                "name": "CompromisedCredentialsActionsType",
                "comment": " The CompromisedCredentialsActionsType data model.\n",
                "args": [],
                "type": "{ eventAction : AWS.CognitoIdentityProvider.CompromisedCredentialsEventActionType }"
            },
            {
                "name": "CompromisedCredentialsRiskConfigurationType",
                "comment": " The CompromisedCredentialsRiskConfigurationType data model.\n",
                "args": [],
                "type": "{ actions : AWS.CognitoIdentityProvider.CompromisedCredentialsActionsType, eventFilter : Maybe.Maybe AWS.CognitoIdentityProvider.EventFiltersType }"
            },
            {
                "name": "ConfirmDeviceRequest",
                "comment": " The ConfirmDeviceRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String, deviceKey : String.String, deviceName : Maybe.Maybe String.String, deviceSecretVerifierConfig : Maybe.Maybe AWS.CognitoIdentityProvider.DeviceSecretVerifierConfigType }"
            },
            {
                "name": "ConfirmDeviceResponse",
                "comment": " The ConfirmDeviceResponse data model.\n",
                "args": [],
                "type": "{ userConfirmationNecessary : Maybe.Maybe Basics.Bool }"
            },
            {
                "name": "ConfirmForgotPasswordRequest",
                "comment": " The ConfirmForgotPasswordRequest data model.\n",
                "args": [],
                "type": "{ analyticsMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsMetadataType, clientId : String.String, confirmationCode : String.String, password : String.String, secretHash : Maybe.Maybe String.String, userContextData : Maybe.Maybe AWS.CognitoIdentityProvider.UserContextDataType, username : String.String }"
            },
            {
                "name": "ConfirmForgotPasswordResponse",
                "comment": " The ConfirmForgotPasswordResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "ConfirmSignUpRequest",
                "comment": " The ConfirmSignUpRequest data model.\n",
                "args": [],
                "type": "{ analyticsMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsMetadataType, clientId : String.String, confirmationCode : String.String, forceAliasCreation : Maybe.Maybe Basics.Bool, secretHash : Maybe.Maybe String.String, userContextData : Maybe.Maybe AWS.CognitoIdentityProvider.UserContextDataType, username : String.String }"
            },
            {
                "name": "ConfirmSignUpResponse",
                "comment": " The ConfirmSignUpResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "ContextDataType",
                "comment": " The ContextDataType data model.\n",
                "args": [],
                "type": "{ encodedData : Maybe.Maybe String.String, httpHeaders : AWS.CognitoIdentityProvider.HttpHeaderList, ipAddress : String.String, serverName : String.String, serverPath : String.String }"
            },
            {
                "name": "CreateGroupRequest",
                "comment": " The CreateGroupRequest data model.\n",
                "args": [],
                "type": "{ description : Maybe.Maybe String.String, groupName : String.String, precedence : Maybe.Maybe Basics.Int, roleArn : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "CreateGroupResponse",
                "comment": " The CreateGroupResponse data model.\n",
                "args": [],
                "type": "{ group : Maybe.Maybe AWS.CognitoIdentityProvider.GroupType }"
            },
            {
                "name": "CreateIdentityProviderRequest",
                "comment": " The CreateIdentityProviderRequest data model.\n",
                "args": [],
                "type": "{ attributeMapping : Maybe.Maybe AWS.CognitoIdentityProvider.AttributeMappingType, idpIdentifiers : Maybe.Maybe AWS.CognitoIdentityProvider.IdpIdentifiersListType, providerDetails : AWS.CognitoIdentityProvider.ProviderDetailsType, providerName : String.String, providerType : AWS.CognitoIdentityProvider.IdentityProviderTypeType, userPoolId : String.String }"
            },
            {
                "name": "CreateIdentityProviderResponse",
                "comment": " The CreateIdentityProviderResponse data model.\n",
                "args": [],
                "type": "{ identityProvider : AWS.CognitoIdentityProvider.IdentityProviderType }"
            },
            {
                "name": "CreateResourceServerRequest",
                "comment": " The CreateResourceServerRequest data model.\n",
                "args": [],
                "type": "{ identifier : String.String, name : String.String, scopes : Maybe.Maybe AWS.CognitoIdentityProvider.ResourceServerScopeListType, userPoolId : String.String }"
            },
            {
                "name": "CreateResourceServerResponse",
                "comment": " The CreateResourceServerResponse data model.\n",
                "args": [],
                "type": "{ resourceServer : AWS.CognitoIdentityProvider.ResourceServerType }"
            },
            {
                "name": "CreateUserImportJobRequest",
                "comment": " The CreateUserImportJobRequest data model.\n",
                "args": [],
                "type": "{ cloudWatchLogsRoleArn : String.String, jobName : String.String, userPoolId : String.String }"
            },
            {
                "name": "CreateUserImportJobResponse",
                "comment": " The CreateUserImportJobResponse data model.\n",
                "args": [],
                "type": "{ userImportJob : Maybe.Maybe AWS.CognitoIdentityProvider.UserImportJobType }"
            },
            {
                "name": "CreateUserPoolClientRequest",
                "comment": " The CreateUserPoolClientRequest data model.\n",
                "args": [],
                "type": "{ allowedOauthFlows : Maybe.Maybe AWS.CognitoIdentityProvider.OauthFlowsType, allowedOauthFlowsUserPoolClient : Maybe.Maybe Basics.Bool, allowedOauthScopes : Maybe.Maybe AWS.CognitoIdentityProvider.ScopeListType, analyticsConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsConfigurationType, callbackUrls : Maybe.Maybe AWS.CognitoIdentityProvider.CallbackUrlsListType, clientName : String.String, defaultRedirectUri : Maybe.Maybe String.String, explicitAuthFlows : Maybe.Maybe AWS.CognitoIdentityProvider.ExplicitAuthFlowsListType, generateSecret : Maybe.Maybe Basics.Bool, logoutUrls : Maybe.Maybe AWS.CognitoIdentityProvider.LogoutUrlsListType, readAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.ClientPermissionListType, refreshTokenValidity : Maybe.Maybe Basics.Int, supportedIdentityProviders : Maybe.Maybe AWS.CognitoIdentityProvider.SupportedIdentityProvidersListType, userPoolId : String.String, writeAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.ClientPermissionListType }"
            },
            {
                "name": "CreateUserPoolClientResponse",
                "comment": " The CreateUserPoolClientResponse data model.\n",
                "args": [],
                "type": "{ userPoolClient : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolClientType }"
            },
            {
                "name": "CreateUserPoolDomainRequest",
                "comment": " The CreateUserPoolDomainRequest data model.\n",
                "args": [],
                "type": "{ customDomainConfig : Maybe.Maybe AWS.CognitoIdentityProvider.CustomDomainConfigType, domain : String.String, userPoolId : String.String }"
            },
            {
                "name": "CreateUserPoolDomainResponse",
                "comment": " The CreateUserPoolDomainResponse data model.\n",
                "args": [],
                "type": "{ cloudFrontDomain : Maybe.Maybe String.String }"
            },
            {
                "name": "CreateUserPoolRequest",
                "comment": " The CreateUserPoolRequest data model.\n",
                "args": [],
                "type": "{ adminCreateUserConfig : Maybe.Maybe AWS.CognitoIdentityProvider.AdminCreateUserConfigType, aliasAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.AliasAttributesListType, autoVerifiedAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.VerifiedAttributesListType, deviceConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.DeviceConfigurationType, emailConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.EmailConfigurationType, emailVerificationMessage : Maybe.Maybe String.String, emailVerificationSubject : Maybe.Maybe String.String, lambdaConfig : Maybe.Maybe AWS.CognitoIdentityProvider.LambdaConfigType, mfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolMfaType, policies : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolPolicyType, poolName : String.String, schema : Maybe.Maybe AWS.CognitoIdentityProvider.SchemaAttributesListType, smsAuthenticationMessage : Maybe.Maybe String.String, smsConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.SmsConfigurationType, smsVerificationMessage : Maybe.Maybe String.String, userPoolAddOns : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolAddOnsType, userPoolTags : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolTagsType, usernameAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.UsernameAttributesListType, verificationMessageTemplate : Maybe.Maybe AWS.CognitoIdentityProvider.VerificationMessageTemplateType }"
            },
            {
                "name": "CreateUserPoolResponse",
                "comment": " The CreateUserPoolResponse data model.\n",
                "args": [],
                "type": "{ userPool : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolType }"
            },
            {
                "name": "CustomAttributesListType",
                "comment": " The CustomAttributesListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.SchemaAttributeType"
            },
            {
                "name": "CustomDomainConfigType",
                "comment": " The CustomDomainConfigType data model.\n",
                "args": [],
                "type": "{ certificateArn : String.String }"
            },
            {
                "name": "DeleteGroupRequest",
                "comment": " The DeleteGroupRequest data model.\n",
                "args": [],
                "type": "{ groupName : String.String, userPoolId : String.String }"
            },
            {
                "name": "DeleteIdentityProviderRequest",
                "comment": " The DeleteIdentityProviderRequest data model.\n",
                "args": [],
                "type": "{ providerName : String.String, userPoolId : String.String }"
            },
            {
                "name": "DeleteResourceServerRequest",
                "comment": " The DeleteResourceServerRequest data model.\n",
                "args": [],
                "type": "{ identifier : String.String, userPoolId : String.String }"
            },
            {
                "name": "DeleteUserAttributesRequest",
                "comment": " The DeleteUserAttributesRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String, userAttributeNames : AWS.CognitoIdentityProvider.AttributeNameListType }"
            },
            {
                "name": "DeleteUserAttributesResponse",
                "comment": " The DeleteUserAttributesResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "DeleteUserPoolClientRequest",
                "comment": " The DeleteUserPoolClientRequest data model.\n",
                "args": [],
                "type": "{ clientId : String.String, userPoolId : String.String }"
            },
            {
                "name": "DeleteUserPoolDomainRequest",
                "comment": " The DeleteUserPoolDomainRequest data model.\n",
                "args": [],
                "type": "{ domain : String.String, userPoolId : String.String }"
            },
            {
                "name": "DeleteUserPoolDomainResponse",
                "comment": " The DeleteUserPoolDomainResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "DeleteUserPoolRequest",
                "comment": " The DeleteUserPoolRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String }"
            },
            {
                "name": "DeleteUserRequest",
                "comment": " The DeleteUserRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String }"
            },
            {
                "name": "DeliveryMediumListType",
                "comment": " The DeliveryMediumListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.DeliveryMediumType"
            },
            {
                "name": "DescribeIdentityProviderRequest",
                "comment": " The DescribeIdentityProviderRequest data model.\n",
                "args": [],
                "type": "{ providerName : String.String, userPoolId : String.String }"
            },
            {
                "name": "DescribeIdentityProviderResponse",
                "comment": " The DescribeIdentityProviderResponse data model.\n",
                "args": [],
                "type": "{ identityProvider : AWS.CognitoIdentityProvider.IdentityProviderType }"
            },
            {
                "name": "DescribeResourceServerRequest",
                "comment": " The DescribeResourceServerRequest data model.\n",
                "args": [],
                "type": "{ identifier : String.String, userPoolId : String.String }"
            },
            {
                "name": "DescribeResourceServerResponse",
                "comment": " The DescribeResourceServerResponse data model.\n",
                "args": [],
                "type": "{ resourceServer : AWS.CognitoIdentityProvider.ResourceServerType }"
            },
            {
                "name": "DescribeRiskConfigurationRequest",
                "comment": " The DescribeRiskConfigurationRequest data model.\n",
                "args": [],
                "type": "{ clientId : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "DescribeRiskConfigurationResponse",
                "comment": " The DescribeRiskConfigurationResponse data model.\n",
                "args": [],
                "type": "{ riskConfiguration : AWS.CognitoIdentityProvider.RiskConfigurationType }"
            },
            {
                "name": "DescribeUserImportJobRequest",
                "comment": " The DescribeUserImportJobRequest data model.\n",
                "args": [],
                "type": "{ jobId : String.String, userPoolId : String.String }"
            },
            {
                "name": "DescribeUserImportJobResponse",
                "comment": " The DescribeUserImportJobResponse data model.\n",
                "args": [],
                "type": "{ userImportJob : Maybe.Maybe AWS.CognitoIdentityProvider.UserImportJobType }"
            },
            {
                "name": "DescribeUserPoolClientRequest",
                "comment": " The DescribeUserPoolClientRequest data model.\n",
                "args": [],
                "type": "{ clientId : String.String, userPoolId : String.String }"
            },
            {
                "name": "DescribeUserPoolClientResponse",
                "comment": " The DescribeUserPoolClientResponse data model.\n",
                "args": [],
                "type": "{ userPoolClient : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolClientType }"
            },
            {
                "name": "DescribeUserPoolDomainRequest",
                "comment": " The DescribeUserPoolDomainRequest data model.\n",
                "args": [],
                "type": "{ domain : String.String }"
            },
            {
                "name": "DescribeUserPoolDomainResponse",
                "comment": " The DescribeUserPoolDomainResponse data model.\n",
                "args": [],
                "type": "{ domainDescription : Maybe.Maybe AWS.CognitoIdentityProvider.DomainDescriptionType }"
            },
            {
                "name": "DescribeUserPoolRequest",
                "comment": " The DescribeUserPoolRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String }"
            },
            {
                "name": "DescribeUserPoolResponse",
                "comment": " The DescribeUserPoolResponse data model.\n",
                "args": [],
                "type": "{ userPool : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolType }"
            },
            {
                "name": "DeviceConfigurationType",
                "comment": " The DeviceConfigurationType data model.\n",
                "args": [],
                "type": "{ challengeRequiredOnNewDevice : Maybe.Maybe Basics.Bool, deviceOnlyRememberedOnUserPrompt : Maybe.Maybe Basics.Bool }"
            },
            {
                "name": "DeviceListType",
                "comment": " The DeviceListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.DeviceType"
            },
            {
                "name": "DeviceSecretVerifierConfigType",
                "comment": " The DeviceSecretVerifierConfigType data model.\n",
                "args": [],
                "type": "{ passwordVerifier : Maybe.Maybe String.String, salt : Maybe.Maybe String.String }"
            },
            {
                "name": "DeviceType",
                "comment": " The DeviceType data model.\n",
                "args": [],
                "type": "{ deviceAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.AttributeListType, deviceCreateDate : Maybe.Maybe String.String, deviceKey : Maybe.Maybe String.String, deviceLastAuthenticatedDate : Maybe.Maybe String.String, deviceLastModifiedDate : Maybe.Maybe String.String }"
            },
            {
                "name": "DomainDescriptionType",
                "comment": " The DomainDescriptionType data model.\n",
                "args": [],
                "type": "{ awsaccountId : Maybe.Maybe String.String, cloudFrontDistribution : Maybe.Maybe String.String, customDomainConfig : Maybe.Maybe AWS.CognitoIdentityProvider.CustomDomainConfigType, domain : Maybe.Maybe String.String, s3Bucket : Maybe.Maybe String.String, status : Maybe.Maybe AWS.CognitoIdentityProvider.DomainStatusType, userPoolId : Maybe.Maybe String.String, version : Maybe.Maybe String.String }"
            },
            {
                "name": "EmailConfigurationType",
                "comment": " The EmailConfigurationType data model.\n",
                "args": [],
                "type": "{ emailSendingAccount : Maybe.Maybe AWS.CognitoIdentityProvider.EmailSendingAccountType, replyToEmailAddress : Maybe.Maybe String.String, sourceArn : Maybe.Maybe String.String }"
            },
            {
                "name": "EventContextDataType",
                "comment": " The EventContextDataType data model.\n",
                "args": [],
                "type": "{ city : Maybe.Maybe String.String, country : Maybe.Maybe String.String, deviceName : Maybe.Maybe String.String, ipAddress : Maybe.Maybe String.String, timezone : Maybe.Maybe String.String }"
            },
            {
                "name": "EventFeedbackType",
                "comment": " The EventFeedbackType data model.\n",
                "args": [],
                "type": "{ feedbackDate : Maybe.Maybe String.String, feedbackValue : AWS.CognitoIdentityProvider.FeedbackValueType, provider : String.String }"
            },
            {
                "name": "EventFiltersType",
                "comment": " The EventFiltersType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.EventFilterType"
            },
            {
                "name": "EventRiskType",
                "comment": " The EventRiskType data model.\n",
                "args": [],
                "type": "{ riskDecision : Maybe.Maybe AWS.CognitoIdentityProvider.RiskDecisionType, riskLevel : Maybe.Maybe AWS.CognitoIdentityProvider.RiskLevelType }"
            },
            {
                "name": "ExplicitAuthFlowsListType",
                "comment": " The ExplicitAuthFlowsListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.ExplicitAuthFlowsType"
            },
            {
                "name": "ForgetDeviceRequest",
                "comment": " The ForgetDeviceRequest data model.\n",
                "args": [],
                "type": "{ accessToken : Maybe.Maybe String.String, deviceKey : String.String }"
            },
            {
                "name": "ForgotPasswordRequest",
                "comment": " The ForgotPasswordRequest data model.\n",
                "args": [],
                "type": "{ analyticsMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsMetadataType, clientId : String.String, secretHash : Maybe.Maybe String.String, userContextData : Maybe.Maybe AWS.CognitoIdentityProvider.UserContextDataType, username : String.String }"
            },
            {
                "name": "ForgotPasswordResponse",
                "comment": " The ForgotPasswordResponse data model.\n",
                "args": [],
                "type": "{ codeDeliveryDetails : Maybe.Maybe AWS.CognitoIdentityProvider.CodeDeliveryDetailsType }"
            },
            {
                "name": "GetCsvheaderRequest",
                "comment": " The GetCsvheaderRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String }"
            },
            {
                "name": "GetCsvheaderResponse",
                "comment": " The GetCsvheaderResponse data model.\n",
                "args": [],
                "type": "{ csvheader : Maybe.Maybe AWS.CognitoIdentityProvider.ListOfStringTypes, userPoolId : Maybe.Maybe String.String }"
            },
            {
                "name": "GetDeviceRequest",
                "comment": " The GetDeviceRequest data model.\n",
                "args": [],
                "type": "{ accessToken : Maybe.Maybe String.String, deviceKey : String.String }"
            },
            {
                "name": "GetDeviceResponse",
                "comment": " The GetDeviceResponse data model.\n",
                "args": [],
                "type": "{ device : AWS.CognitoIdentityProvider.DeviceType }"
            },
            {
                "name": "GetGroupRequest",
                "comment": " The GetGroupRequest data model.\n",
                "args": [],
                "type": "{ groupName : String.String, userPoolId : String.String }"
            },
            {
                "name": "GetGroupResponse",
                "comment": " The GetGroupResponse data model.\n",
                "args": [],
                "type": "{ group : Maybe.Maybe AWS.CognitoIdentityProvider.GroupType }"
            },
            {
                "name": "GetIdentityProviderByIdentifierRequest",
                "comment": " The GetIdentityProviderByIdentifierRequest data model.\n",
                "args": [],
                "type": "{ idpIdentifier : String.String, userPoolId : String.String }"
            },
            {
                "name": "GetIdentityProviderByIdentifierResponse",
                "comment": " The GetIdentityProviderByIdentifierResponse data model.\n",
                "args": [],
                "type": "{ identityProvider : AWS.CognitoIdentityProvider.IdentityProviderType }"
            },
            {
                "name": "GetSigningCertificateRequest",
                "comment": " The GetSigningCertificateRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String }"
            },
            {
                "name": "GetSigningCertificateResponse",
                "comment": " The GetSigningCertificateResponse data model.\n",
                "args": [],
                "type": "{ certificate : Maybe.Maybe String.String }"
            },
            {
                "name": "GetUicustomizationRequest",
                "comment": " The GetUicustomizationRequest data model.\n",
                "args": [],
                "type": "{ clientId : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "GetUicustomizationResponse",
                "comment": " The GetUicustomizationResponse data model.\n",
                "args": [],
                "type": "{ uicustomization : AWS.CognitoIdentityProvider.UicustomizationType }"
            },
            {
                "name": "GetUserAttributeVerificationCodeRequest",
                "comment": " The GetUserAttributeVerificationCodeRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String, attributeName : String.String }"
            },
            {
                "name": "GetUserAttributeVerificationCodeResponse",
                "comment": " The GetUserAttributeVerificationCodeResponse data model.\n",
                "args": [],
                "type": "{ codeDeliveryDetails : Maybe.Maybe AWS.CognitoIdentityProvider.CodeDeliveryDetailsType }"
            },
            {
                "name": "GetUserPoolMfaConfigRequest",
                "comment": " The GetUserPoolMfaConfigRequest data model.\n",
                "args": [],
                "type": "{ userPoolId : String.String }"
            },
            {
                "name": "GetUserPoolMfaConfigResponse",
                "comment": " The GetUserPoolMfaConfigResponse data model.\n",
                "args": [],
                "type": "{ mfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolMfaType, smsMfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.SmsMfaConfigType, softwareTokenMfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.SoftwareTokenMfaConfigType }"
            },
            {
                "name": "GetUserRequest",
                "comment": " The GetUserRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String }"
            },
            {
                "name": "GetUserResponse",
                "comment": " The GetUserResponse data model.\n",
                "args": [],
                "type": "{ mfaoptions : Maybe.Maybe AWS.CognitoIdentityProvider.MfaoptionListType, preferredMfaSetting : Maybe.Maybe String.String, userAttributes : AWS.CognitoIdentityProvider.AttributeListType, userMfasettingList : Maybe.Maybe AWS.CognitoIdentityProvider.UserMfasettingListType, username : String.String }"
            },
            {
                "name": "GlobalSignOutRequest",
                "comment": " The GlobalSignOutRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String }"
            },
            {
                "name": "GlobalSignOutResponse",
                "comment": " The GlobalSignOutResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "GroupListType",
                "comment": " The GroupListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.GroupType"
            },
            {
                "name": "GroupType",
                "comment": " The GroupType data model.\n",
                "args": [],
                "type": "{ creationDate : Maybe.Maybe String.String, description : Maybe.Maybe String.String, groupName : Maybe.Maybe String.String, lastModifiedDate : Maybe.Maybe String.String, precedence : Maybe.Maybe Basics.Int, roleArn : Maybe.Maybe String.String, userPoolId : Maybe.Maybe String.String }"
            },
            {
                "name": "HttpHeader",
                "comment": " The HttpHeader data model.\n",
                "args": [],
                "type": "{ headerName : Maybe.Maybe String.String, headerValue : Maybe.Maybe String.String }"
            },
            {
                "name": "HttpHeaderList",
                "comment": " The HttpHeaderList data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.HttpHeader"
            },
            {
                "name": "IdentityProviderType",
                "comment": " The IdentityProviderType data model.\n",
                "args": [],
                "type": "{ attributeMapping : Maybe.Maybe AWS.CognitoIdentityProvider.AttributeMappingType, creationDate : Maybe.Maybe String.String, idpIdentifiers : Maybe.Maybe AWS.CognitoIdentityProvider.IdpIdentifiersListType, lastModifiedDate : Maybe.Maybe String.String, providerDetails : Maybe.Maybe AWS.CognitoIdentityProvider.ProviderDetailsType, providerName : Maybe.Maybe String.String, providerType : Maybe.Maybe AWS.CognitoIdentityProvider.IdentityProviderTypeType, userPoolId : Maybe.Maybe String.String }"
            },
            {
                "name": "IdpIdentifiersListType",
                "comment": " The IdpIdentifiersListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "InitiateAuthRequest",
                "comment": " The InitiateAuthRequest data model.\n",
                "args": [],
                "type": "{ analyticsMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsMetadataType, authFlow : AWS.CognitoIdentityProvider.AuthFlowType, authParameters : Maybe.Maybe AWS.CognitoIdentityProvider.AuthParametersType, clientId : String.String, clientMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.ClientMetadataType, userContextData : Maybe.Maybe AWS.CognitoIdentityProvider.UserContextDataType }"
            },
            {
                "name": "InitiateAuthResponse",
                "comment": " The InitiateAuthResponse data model.\n",
                "args": [],
                "type": "{ authenticationResult : Maybe.Maybe AWS.CognitoIdentityProvider.AuthenticationResultType, challengeName : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeNameType, challengeParameters : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeParametersType, session : Maybe.Maybe String.String }"
            },
            {
                "name": "LambdaConfigType",
                "comment": " The LambdaConfigType data model.\n",
                "args": [],
                "type": "{ createAuthChallenge : Maybe.Maybe String.String, customMessage : Maybe.Maybe String.String, defineAuthChallenge : Maybe.Maybe String.String, postAuthentication : Maybe.Maybe String.String, postConfirmation : Maybe.Maybe String.String, preAuthentication : Maybe.Maybe String.String, preSignUp : Maybe.Maybe String.String, preTokenGeneration : Maybe.Maybe String.String, userMigration : Maybe.Maybe String.String, verifyAuthChallengeResponse : Maybe.Maybe String.String }"
            },
            {
                "name": "ListDevicesRequest",
                "comment": " The ListDevicesRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String, limit : Maybe.Maybe Basics.Int, paginationToken : Maybe.Maybe String.String }"
            },
            {
                "name": "ListDevicesResponse",
                "comment": " The ListDevicesResponse data model.\n",
                "args": [],
                "type": "{ devices : Maybe.Maybe AWS.CognitoIdentityProvider.DeviceListType, paginationToken : Maybe.Maybe String.String }"
            },
            {
                "name": "ListGroupsRequest",
                "comment": " The ListGroupsRequest data model.\n",
                "args": [],
                "type": "{ limit : Maybe.Maybe Basics.Int, nextToken : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "ListGroupsResponse",
                "comment": " The ListGroupsResponse data model.\n",
                "args": [],
                "type": "{ groups : Maybe.Maybe AWS.CognitoIdentityProvider.GroupListType, nextToken : Maybe.Maybe String.String }"
            },
            {
                "name": "ListIdentityProvidersRequest",
                "comment": " The ListIdentityProvidersRequest data model.\n",
                "args": [],
                "type": "{ maxResults : Maybe.Maybe Basics.Int, nextToken : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "ListIdentityProvidersResponse",
                "comment": " The ListIdentityProvidersResponse data model.\n",
                "args": [],
                "type": "{ nextToken : Maybe.Maybe String.String, providers : AWS.CognitoIdentityProvider.ProvidersListType }"
            },
            {
                "name": "ListOfStringTypes",
                "comment": " The ListOfStringTypes data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "ListResourceServersRequest",
                "comment": " The ListResourceServersRequest data model.\n",
                "args": [],
                "type": "{ maxResults : Maybe.Maybe Basics.Int, nextToken : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "ListResourceServersResponse",
                "comment": " The ListResourceServersResponse data model.\n",
                "args": [],
                "type": "{ nextToken : Maybe.Maybe String.String, resourceServers : AWS.CognitoIdentityProvider.ResourceServersListType }"
            },
            {
                "name": "ListTagsForResourceRequest",
                "comment": " The ListTagsForResourceRequest data model.\n",
                "args": [],
                "type": "{ resourceArn : String.String }"
            },
            {
                "name": "ListTagsForResourceResponse",
                "comment": " The ListTagsForResourceResponse data model.\n",
                "args": [],
                "type": "{ tags : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolTagsType }"
            },
            {
                "name": "ListUserImportJobsRequest",
                "comment": " The ListUserImportJobsRequest data model.\n",
                "args": [],
                "type": "{ maxResults : Basics.Int, paginationToken : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "ListUserImportJobsResponse",
                "comment": " The ListUserImportJobsResponse data model.\n",
                "args": [],
                "type": "{ paginationToken : Maybe.Maybe String.String, userImportJobs : Maybe.Maybe AWS.CognitoIdentityProvider.UserImportJobsListType }"
            },
            {
                "name": "ListUserPoolClientsRequest",
                "comment": " The ListUserPoolClientsRequest data model.\n",
                "args": [],
                "type": "{ maxResults : Maybe.Maybe Basics.Int, nextToken : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "ListUserPoolClientsResponse",
                "comment": " The ListUserPoolClientsResponse data model.\n",
                "args": [],
                "type": "{ nextToken : Maybe.Maybe String.String, userPoolClients : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolClientListType }"
            },
            {
                "name": "ListUserPoolsRequest",
                "comment": " The ListUserPoolsRequest data model.\n",
                "args": [],
                "type": "{ maxResults : Basics.Int, nextToken : Maybe.Maybe String.String }"
            },
            {
                "name": "ListUserPoolsResponse",
                "comment": " The ListUserPoolsResponse data model.\n",
                "args": [],
                "type": "{ nextToken : Maybe.Maybe String.String, userPools : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolListType }"
            },
            {
                "name": "ListUsersInGroupRequest",
                "comment": " The ListUsersInGroupRequest data model.\n",
                "args": [],
                "type": "{ groupName : String.String, limit : Maybe.Maybe Basics.Int, nextToken : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "ListUsersInGroupResponse",
                "comment": " The ListUsersInGroupResponse data model.\n",
                "args": [],
                "type": "{ nextToken : Maybe.Maybe String.String, users : Maybe.Maybe AWS.CognitoIdentityProvider.UsersListType }"
            },
            {
                "name": "ListUsersRequest",
                "comment": " The ListUsersRequest data model.\n",
                "args": [],
                "type": "{ attributesToGet : Maybe.Maybe AWS.CognitoIdentityProvider.SearchedAttributeNamesListType, filter : Maybe.Maybe String.String, limit : Maybe.Maybe Basics.Int, paginationToken : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "ListUsersResponse",
                "comment": " The ListUsersResponse data model.\n",
                "args": [],
                "type": "{ paginationToken : Maybe.Maybe String.String, users : Maybe.Maybe AWS.CognitoIdentityProvider.UsersListType }"
            },
            {
                "name": "LogoutUrlsListType",
                "comment": " The LogoutUrlsListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "MessageTemplateType",
                "comment": " The MessageTemplateType data model.\n",
                "args": [],
                "type": "{ emailMessage : Maybe.Maybe String.String, emailSubject : Maybe.Maybe String.String, smsmessage : Maybe.Maybe String.String }"
            },
            {
                "name": "MfaoptionListType",
                "comment": " The MfaoptionListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.MfaoptionType"
            },
            {
                "name": "MfaoptionType",
                "comment": " The MfaoptionType data model.\n",
                "args": [],
                "type": "{ attributeName : Maybe.Maybe String.String, deliveryMedium : Maybe.Maybe AWS.CognitoIdentityProvider.DeliveryMediumType }"
            },
            {
                "name": "NewDeviceMetadataType",
                "comment": " The NewDeviceMetadataType data model.\n",
                "args": [],
                "type": "{ deviceGroupKey : Maybe.Maybe String.String, deviceKey : Maybe.Maybe String.String }"
            },
            {
                "name": "NotifyConfigurationType",
                "comment": " The NotifyConfigurationType data model.\n",
                "args": [],
                "type": "{ blockEmail : Maybe.Maybe AWS.CognitoIdentityProvider.NotifyEmailType, from : Maybe.Maybe String.String, mfaEmail : Maybe.Maybe AWS.CognitoIdentityProvider.NotifyEmailType, noActionEmail : Maybe.Maybe AWS.CognitoIdentityProvider.NotifyEmailType, replyTo : Maybe.Maybe String.String, sourceArn : String.String }"
            },
            {
                "name": "NotifyEmailType",
                "comment": " The NotifyEmailType data model.\n",
                "args": [],
                "type": "{ htmlBody : Maybe.Maybe String.String, subject : String.String, textBody : Maybe.Maybe String.String }"
            },
            {
                "name": "NumberAttributeConstraintsType",
                "comment": " The NumberAttributeConstraintsType data model.\n",
                "args": [],
                "type": "{ maxValue : Maybe.Maybe String.String, minValue : Maybe.Maybe String.String }"
            },
            {
                "name": "OauthFlowsType",
                "comment": " The OauthFlowsType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.OauthFlowType"
            },
            {
                "name": "PasswordPolicyType",
                "comment": " The PasswordPolicyType data model.\n",
                "args": [],
                "type": "{ minimumLength : Maybe.Maybe Basics.Int, requireLowercase : Maybe.Maybe Basics.Bool, requireNumbers : Maybe.Maybe Basics.Bool, requireSymbols : Maybe.Maybe Basics.Bool, requireUppercase : Maybe.Maybe Basics.Bool, temporaryPasswordValidityDays : Maybe.Maybe Basics.Int }"
            },
            {
                "name": "ProviderDescription",
                "comment": " The ProviderDescription data model.\n",
                "args": [],
                "type": "{ creationDate : Maybe.Maybe String.String, lastModifiedDate : Maybe.Maybe String.String, providerName : Maybe.Maybe String.String, providerType : Maybe.Maybe AWS.CognitoIdentityProvider.IdentityProviderTypeType }"
            },
            {
                "name": "ProviderDetailsType",
                "comment": " The ProviderDetailsType data model.\n",
                "args": [],
                "type": "Dict.Dict String.String String.String"
            },
            {
                "name": "ProviderUserIdentifierType",
                "comment": " The ProviderUserIdentifierType data model.\n",
                "args": [],
                "type": "{ providerAttributeName : Maybe.Maybe String.String, providerAttributeValue : Maybe.Maybe String.String, providerName : Maybe.Maybe String.String }"
            },
            {
                "name": "ProvidersListType",
                "comment": " The ProvidersListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.ProviderDescription"
            },
            {
                "name": "ResendConfirmationCodeRequest",
                "comment": " The ResendConfirmationCodeRequest data model.\n",
                "args": [],
                "type": "{ analyticsMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsMetadataType, clientId : String.String, secretHash : Maybe.Maybe String.String, userContextData : Maybe.Maybe AWS.CognitoIdentityProvider.UserContextDataType, username : String.String }"
            },
            {
                "name": "ResendConfirmationCodeResponse",
                "comment": " The ResendConfirmationCodeResponse data model.\n",
                "args": [],
                "type": "{ codeDeliveryDetails : Maybe.Maybe AWS.CognitoIdentityProvider.CodeDeliveryDetailsType }"
            },
            {
                "name": "ResourceServerScopeListType",
                "comment": " The ResourceServerScopeListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.ResourceServerScopeType"
            },
            {
                "name": "ResourceServerScopeType",
                "comment": " The ResourceServerScopeType data model.\n",
                "args": [],
                "type": "{ scopeDescription : String.String, scopeName : String.String }"
            },
            {
                "name": "ResourceServerType",
                "comment": " The ResourceServerType data model.\n",
                "args": [],
                "type": "{ identifier : Maybe.Maybe String.String, name : Maybe.Maybe String.String, scopes : Maybe.Maybe AWS.CognitoIdentityProvider.ResourceServerScopeListType, userPoolId : Maybe.Maybe String.String }"
            },
            {
                "name": "ResourceServersListType",
                "comment": " The ResourceServersListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.ResourceServerType"
            },
            {
                "name": "RespondToAuthChallengeRequest",
                "comment": " The RespondToAuthChallengeRequest data model.\n",
                "args": [],
                "type": "{ analyticsMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsMetadataType, challengeName : AWS.CognitoIdentityProvider.ChallengeNameType, challengeResponses : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeResponsesType, clientId : String.String, session : Maybe.Maybe String.String, userContextData : Maybe.Maybe AWS.CognitoIdentityProvider.UserContextDataType }"
            },
            {
                "name": "RespondToAuthChallengeResponse",
                "comment": " The RespondToAuthChallengeResponse data model.\n",
                "args": [],
                "type": "{ authenticationResult : Maybe.Maybe AWS.CognitoIdentityProvider.AuthenticationResultType, challengeName : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeNameType, challengeParameters : Maybe.Maybe AWS.CognitoIdentityProvider.ChallengeParametersType, session : Maybe.Maybe String.String }"
            },
            {
                "name": "RiskConfigurationType",
                "comment": " The RiskConfigurationType data model.\n",
                "args": [],
                "type": "{ accountTakeoverRiskConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.AccountTakeoverRiskConfigurationType, clientId : Maybe.Maybe String.String, compromisedCredentialsRiskConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.CompromisedCredentialsRiskConfigurationType, lastModifiedDate : Maybe.Maybe String.String, riskExceptionConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.RiskExceptionConfigurationType, userPoolId : Maybe.Maybe String.String }"
            },
            {
                "name": "RiskExceptionConfigurationType",
                "comment": " The RiskExceptionConfigurationType data model.\n",
                "args": [],
                "type": "{ blockedIprangeList : Maybe.Maybe AWS.CognitoIdentityProvider.BlockedIprangeListType, skippedIprangeList : Maybe.Maybe AWS.CognitoIdentityProvider.SkippedIprangeListType }"
            },
            {
                "name": "SchemaAttributeType",
                "comment": " The SchemaAttributeType data model.\n",
                "args": [],
                "type": "{ attributeDataType : Maybe.Maybe AWS.CognitoIdentityProvider.AttributeDataType, developerOnlyAttribute : Maybe.Maybe Basics.Bool, mutable : Maybe.Maybe Basics.Bool, name : Maybe.Maybe String.String, numberAttributeConstraints : Maybe.Maybe AWS.CognitoIdentityProvider.NumberAttributeConstraintsType, required : Maybe.Maybe Basics.Bool, stringAttributeConstraints : Maybe.Maybe AWS.CognitoIdentityProvider.StringAttributeConstraintsType }"
            },
            {
                "name": "SchemaAttributesListType",
                "comment": " The SchemaAttributesListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.SchemaAttributeType"
            },
            {
                "name": "ScopeListType",
                "comment": " The ScopeListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "SearchedAttributeNamesListType",
                "comment": " The SearchedAttributeNamesListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "SetRiskConfigurationRequest",
                "comment": " The SetRiskConfigurationRequest data model.\n",
                "args": [],
                "type": "{ accountTakeoverRiskConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.AccountTakeoverRiskConfigurationType, clientId : Maybe.Maybe String.String, compromisedCredentialsRiskConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.CompromisedCredentialsRiskConfigurationType, riskExceptionConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.RiskExceptionConfigurationType, userPoolId : String.String }"
            },
            {
                "name": "SetRiskConfigurationResponse",
                "comment": " The SetRiskConfigurationResponse data model.\n",
                "args": [],
                "type": "{ riskConfiguration : AWS.CognitoIdentityProvider.RiskConfigurationType }"
            },
            {
                "name": "SetUicustomizationRequest",
                "comment": " The SetUicustomizationRequest data model.\n",
                "args": [],
                "type": "{ css : Maybe.Maybe String.String, clientId : Maybe.Maybe String.String, imageFile : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "SetUicustomizationResponse",
                "comment": " The SetUicustomizationResponse data model.\n",
                "args": [],
                "type": "{ uicustomization : AWS.CognitoIdentityProvider.UicustomizationType }"
            },
            {
                "name": "SetUserMfapreferenceRequest",
                "comment": " The SetUserMfapreferenceRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String, smsmfaSettings : Maybe.Maybe AWS.CognitoIdentityProvider.SmsmfaSettingsType, softwareTokenMfaSettings : Maybe.Maybe AWS.CognitoIdentityProvider.SoftwareTokenMfaSettingsType }"
            },
            {
                "name": "SetUserMfapreferenceResponse",
                "comment": " The SetUserMfapreferenceResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "SetUserPoolMfaConfigRequest",
                "comment": " The SetUserPoolMfaConfigRequest data model.\n",
                "args": [],
                "type": "{ mfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolMfaType, smsMfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.SmsMfaConfigType, softwareTokenMfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.SoftwareTokenMfaConfigType, userPoolId : String.String }"
            },
            {
                "name": "SetUserPoolMfaConfigResponse",
                "comment": " The SetUserPoolMfaConfigResponse data model.\n",
                "args": [],
                "type": "{ mfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolMfaType, smsMfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.SmsMfaConfigType, softwareTokenMfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.SoftwareTokenMfaConfigType }"
            },
            {
                "name": "SetUserSettingsRequest",
                "comment": " The SetUserSettingsRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String, mfaoptions : AWS.CognitoIdentityProvider.MfaoptionListType }"
            },
            {
                "name": "SetUserSettingsResponse",
                "comment": " The SetUserSettingsResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "SignUpRequest",
                "comment": " The SignUpRequest data model.\n",
                "args": [],
                "type": "{ analyticsMetadata : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsMetadataType, clientId : String.String, password : String.String, secretHash : Maybe.Maybe String.String, userAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.AttributeListType, userContextData : Maybe.Maybe AWS.CognitoIdentityProvider.UserContextDataType, username : String.String, validationData : Maybe.Maybe AWS.CognitoIdentityProvider.AttributeListType }"
            },
            {
                "name": "SignUpResponse",
                "comment": " The SignUpResponse data model.\n",
                "args": [],
                "type": "{ codeDeliveryDetails : Maybe.Maybe AWS.CognitoIdentityProvider.CodeDeliveryDetailsType, userConfirmed : Basics.Bool, userSub : String.String }"
            },
            {
                "name": "SkippedIprangeListType",
                "comment": " The SkippedIprangeListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "SmsConfigurationType",
                "comment": " The SmsConfigurationType data model.\n",
                "args": [],
                "type": "{ externalId : Maybe.Maybe String.String, snsCallerArn : String.String }"
            },
            {
                "name": "SmsMfaConfigType",
                "comment": " The SmsMfaConfigType data model.\n",
                "args": [],
                "type": "{ smsAuthenticationMessage : Maybe.Maybe String.String, smsConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.SmsConfigurationType }"
            },
            {
                "name": "SmsmfaSettingsType",
                "comment": " The SmsmfaSettingsType data model.\n",
                "args": [],
                "type": "{ enabled : Maybe.Maybe Basics.Bool, preferredMfa : Maybe.Maybe Basics.Bool }"
            },
            {
                "name": "SoftwareTokenMfaConfigType",
                "comment": " The SoftwareTokenMfaConfigType data model.\n",
                "args": [],
                "type": "{ enabled : Maybe.Maybe Basics.Bool }"
            },
            {
                "name": "SoftwareTokenMfaSettingsType",
                "comment": " The SoftwareTokenMfaSettingsType data model.\n",
                "args": [],
                "type": "{ enabled : Maybe.Maybe Basics.Bool, preferredMfa : Maybe.Maybe Basics.Bool }"
            },
            {
                "name": "StartUserImportJobRequest",
                "comment": " The StartUserImportJobRequest data model.\n",
                "args": [],
                "type": "{ jobId : String.String, userPoolId : String.String }"
            },
            {
                "name": "StartUserImportJobResponse",
                "comment": " The StartUserImportJobResponse data model.\n",
                "args": [],
                "type": "{ userImportJob : Maybe.Maybe AWS.CognitoIdentityProvider.UserImportJobType }"
            },
            {
                "name": "StopUserImportJobRequest",
                "comment": " The StopUserImportJobRequest data model.\n",
                "args": [],
                "type": "{ jobId : String.String, userPoolId : String.String }"
            },
            {
                "name": "StopUserImportJobResponse",
                "comment": " The StopUserImportJobResponse data model.\n",
                "args": [],
                "type": "{ userImportJob : Maybe.Maybe AWS.CognitoIdentityProvider.UserImportJobType }"
            },
            {
                "name": "StringAttributeConstraintsType",
                "comment": " The StringAttributeConstraintsType data model.\n",
                "args": [],
                "type": "{ maxLength : Maybe.Maybe String.String, minLength : Maybe.Maybe String.String }"
            },
            {
                "name": "SupportedIdentityProvidersListType",
                "comment": " The SupportedIdentityProvidersListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "TagResourceRequest",
                "comment": " The TagResourceRequest data model.\n",
                "args": [],
                "type": "{ resourceArn : String.String, tags : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolTagsType }"
            },
            {
                "name": "TagResourceResponse",
                "comment": " The TagResourceResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "UicustomizationType",
                "comment": " The UicustomizationType data model.\n",
                "args": [],
                "type": "{ css : Maybe.Maybe String.String, cssversion : Maybe.Maybe String.String, clientId : Maybe.Maybe String.String, creationDate : Maybe.Maybe String.String, imageUrl : Maybe.Maybe String.String, lastModifiedDate : Maybe.Maybe String.String, userPoolId : Maybe.Maybe String.String }"
            },
            {
                "name": "UntagResourceRequest",
                "comment": " The UntagResourceRequest data model.\n",
                "args": [],
                "type": "{ resourceArn : String.String, tagKeys : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolTagsListType }"
            },
            {
                "name": "UntagResourceResponse",
                "comment": " The UntagResourceResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "UpdateAuthEventFeedbackRequest",
                "comment": " The UpdateAuthEventFeedbackRequest data model.\n",
                "args": [],
                "type": "{ eventId : String.String, feedbackToken : String.String, feedbackValue : AWS.CognitoIdentityProvider.FeedbackValueType, userPoolId : String.String, username : String.String }"
            },
            {
                "name": "UpdateAuthEventFeedbackResponse",
                "comment": " The UpdateAuthEventFeedbackResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "UpdateDeviceStatusRequest",
                "comment": " The UpdateDeviceStatusRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String, deviceKey : String.String, deviceRememberedStatus : Maybe.Maybe AWS.CognitoIdentityProvider.DeviceRememberedStatusType }"
            },
            {
                "name": "UpdateDeviceStatusResponse",
                "comment": " The UpdateDeviceStatusResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "UpdateGroupRequest",
                "comment": " The UpdateGroupRequest data model.\n",
                "args": [],
                "type": "{ description : Maybe.Maybe String.String, groupName : String.String, precedence : Maybe.Maybe Basics.Int, roleArn : Maybe.Maybe String.String, userPoolId : String.String }"
            },
            {
                "name": "UpdateGroupResponse",
                "comment": " The UpdateGroupResponse data model.\n",
                "args": [],
                "type": "{ group : Maybe.Maybe AWS.CognitoIdentityProvider.GroupType }"
            },
            {
                "name": "UpdateIdentityProviderRequest",
                "comment": " The UpdateIdentityProviderRequest data model.\n",
                "args": [],
                "type": "{ attributeMapping : Maybe.Maybe AWS.CognitoIdentityProvider.AttributeMappingType, idpIdentifiers : Maybe.Maybe AWS.CognitoIdentityProvider.IdpIdentifiersListType, providerDetails : Maybe.Maybe AWS.CognitoIdentityProvider.ProviderDetailsType, providerName : String.String, userPoolId : String.String }"
            },
            {
                "name": "UpdateIdentityProviderResponse",
                "comment": " The UpdateIdentityProviderResponse data model.\n",
                "args": [],
                "type": "{ identityProvider : AWS.CognitoIdentityProvider.IdentityProviderType }"
            },
            {
                "name": "UpdateResourceServerRequest",
                "comment": " The UpdateResourceServerRequest data model.\n",
                "args": [],
                "type": "{ identifier : String.String, name : String.String, scopes : Maybe.Maybe AWS.CognitoIdentityProvider.ResourceServerScopeListType, userPoolId : String.String }"
            },
            {
                "name": "UpdateResourceServerResponse",
                "comment": " The UpdateResourceServerResponse data model.\n",
                "args": [],
                "type": "{ resourceServer : AWS.CognitoIdentityProvider.ResourceServerType }"
            },
            {
                "name": "UpdateUserAttributesRequest",
                "comment": " The UpdateUserAttributesRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String, userAttributes : AWS.CognitoIdentityProvider.AttributeListType }"
            },
            {
                "name": "UpdateUserAttributesResponse",
                "comment": " The UpdateUserAttributesResponse data model.\n",
                "args": [],
                "type": "{ codeDeliveryDetailsList : Maybe.Maybe AWS.CognitoIdentityProvider.CodeDeliveryDetailsListType }"
            },
            {
                "name": "UpdateUserPoolClientRequest",
                "comment": " The UpdateUserPoolClientRequest data model.\n",
                "args": [],
                "type": "{ allowedOauthFlows : Maybe.Maybe AWS.CognitoIdentityProvider.OauthFlowsType, allowedOauthFlowsUserPoolClient : Maybe.Maybe Basics.Bool, allowedOauthScopes : Maybe.Maybe AWS.CognitoIdentityProvider.ScopeListType, analyticsConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsConfigurationType, callbackUrls : Maybe.Maybe AWS.CognitoIdentityProvider.CallbackUrlsListType, clientId : String.String, clientName : Maybe.Maybe String.String, defaultRedirectUri : Maybe.Maybe String.String, explicitAuthFlows : Maybe.Maybe AWS.CognitoIdentityProvider.ExplicitAuthFlowsListType, logoutUrls : Maybe.Maybe AWS.CognitoIdentityProvider.LogoutUrlsListType, readAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.ClientPermissionListType, refreshTokenValidity : Maybe.Maybe Basics.Int, supportedIdentityProviders : Maybe.Maybe AWS.CognitoIdentityProvider.SupportedIdentityProvidersListType, userPoolId : String.String, writeAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.ClientPermissionListType }"
            },
            {
                "name": "UpdateUserPoolClientResponse",
                "comment": " The UpdateUserPoolClientResponse data model.\n",
                "args": [],
                "type": "{ userPoolClient : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolClientType }"
            },
            {
                "name": "UpdateUserPoolDomainRequest",
                "comment": " The UpdateUserPoolDomainRequest data model.\n",
                "args": [],
                "type": "{ customDomainConfig : AWS.CognitoIdentityProvider.CustomDomainConfigType, domain : String.String, userPoolId : String.String }"
            },
            {
                "name": "UpdateUserPoolDomainResponse",
                "comment": " The UpdateUserPoolDomainResponse data model.\n",
                "args": [],
                "type": "{ cloudFrontDomain : Maybe.Maybe String.String }"
            },
            {
                "name": "UpdateUserPoolRequest",
                "comment": " The UpdateUserPoolRequest data model.\n",
                "args": [],
                "type": "{ adminCreateUserConfig : Maybe.Maybe AWS.CognitoIdentityProvider.AdminCreateUserConfigType, autoVerifiedAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.VerifiedAttributesListType, deviceConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.DeviceConfigurationType, emailConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.EmailConfigurationType, emailVerificationMessage : Maybe.Maybe String.String, emailVerificationSubject : Maybe.Maybe String.String, lambdaConfig : Maybe.Maybe AWS.CognitoIdentityProvider.LambdaConfigType, mfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolMfaType, policies : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolPolicyType, smsAuthenticationMessage : Maybe.Maybe String.String, smsConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.SmsConfigurationType, smsVerificationMessage : Maybe.Maybe String.String, userPoolAddOns : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolAddOnsType, userPoolId : String.String, userPoolTags : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolTagsType, verificationMessageTemplate : Maybe.Maybe AWS.CognitoIdentityProvider.VerificationMessageTemplateType }"
            },
            {
                "name": "UpdateUserPoolResponse",
                "comment": " The UpdateUserPoolResponse data model.\n",
                "args": [],
                "type": "{}"
            },
            {
                "name": "UserContextDataType",
                "comment": " The UserContextDataType data model.\n",
                "args": [],
                "type": "{ encodedData : Maybe.Maybe String.String }"
            },
            {
                "name": "UserImportJobType",
                "comment": " The UserImportJobType data model.\n",
                "args": [],
                "type": "{ cloudWatchLogsRoleArn : Maybe.Maybe String.String, completionDate : Maybe.Maybe String.String, completionMessage : Maybe.Maybe String.String, creationDate : Maybe.Maybe String.String, failedUsers : Maybe.Maybe Basics.Int, importedUsers : Maybe.Maybe Basics.Int, jobId : Maybe.Maybe String.String, jobName : Maybe.Maybe String.String, preSignedUrl : Maybe.Maybe String.String, skippedUsers : Maybe.Maybe Basics.Int, startDate : Maybe.Maybe String.String, status : Maybe.Maybe AWS.CognitoIdentityProvider.UserImportJobStatusType, userPoolId : Maybe.Maybe String.String }"
            },
            {
                "name": "UserImportJobsListType",
                "comment": " The UserImportJobsListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.UserImportJobType"
            },
            {
                "name": "UserMfasettingListType",
                "comment": " The UserMfasettingListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "UserPoolAddOnsType",
                "comment": " The UserPoolAddOnsType data model.\n",
                "args": [],
                "type": "{ advancedSecurityMode : AWS.CognitoIdentityProvider.AdvancedSecurityModeType }"
            },
            {
                "name": "UserPoolClientDescription",
                "comment": " The UserPoolClientDescription data model.\n",
                "args": [],
                "type": "{ clientId : Maybe.Maybe String.String, clientName : Maybe.Maybe String.String, userPoolId : Maybe.Maybe String.String }"
            },
            {
                "name": "UserPoolClientListType",
                "comment": " The UserPoolClientListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.UserPoolClientDescription"
            },
            {
                "name": "UserPoolClientType",
                "comment": " The UserPoolClientType data model.\n",
                "args": [],
                "type": "{ allowedOauthFlows : Maybe.Maybe AWS.CognitoIdentityProvider.OauthFlowsType, allowedOauthFlowsUserPoolClient : Maybe.Maybe Basics.Bool, allowedOauthScopes : Maybe.Maybe AWS.CognitoIdentityProvider.ScopeListType, analyticsConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.AnalyticsConfigurationType, callbackUrls : Maybe.Maybe AWS.CognitoIdentityProvider.CallbackUrlsListType, clientId : Maybe.Maybe String.String, clientName : Maybe.Maybe String.String, clientSecret : Maybe.Maybe String.String, creationDate : Maybe.Maybe String.String, defaultRedirectUri : Maybe.Maybe String.String, explicitAuthFlows : Maybe.Maybe AWS.CognitoIdentityProvider.ExplicitAuthFlowsListType, lastModifiedDate : Maybe.Maybe String.String, logoutUrls : Maybe.Maybe AWS.CognitoIdentityProvider.LogoutUrlsListType, readAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.ClientPermissionListType, refreshTokenValidity : Maybe.Maybe Basics.Int, supportedIdentityProviders : Maybe.Maybe AWS.CognitoIdentityProvider.SupportedIdentityProvidersListType, userPoolId : Maybe.Maybe String.String, writeAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.ClientPermissionListType }"
            },
            {
                "name": "UserPoolDescriptionType",
                "comment": " The UserPoolDescriptionType data model.\n",
                "args": [],
                "type": "{ creationDate : Maybe.Maybe String.String, id : Maybe.Maybe String.String, lambdaConfig : Maybe.Maybe AWS.CognitoIdentityProvider.LambdaConfigType, lastModifiedDate : Maybe.Maybe String.String, name : Maybe.Maybe String.String, status : Maybe.Maybe AWS.CognitoIdentityProvider.StatusType }"
            },
            {
                "name": "UserPoolListType",
                "comment": " The UserPoolListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.UserPoolDescriptionType"
            },
            {
                "name": "UserPoolPolicyType",
                "comment": " The UserPoolPolicyType data model.\n",
                "args": [],
                "type": "{ passwordPolicy : Maybe.Maybe AWS.CognitoIdentityProvider.PasswordPolicyType }"
            },
            {
                "name": "UserPoolTagsListType",
                "comment": " The UserPoolTagsListType data model.\n",
                "args": [],
                "type": "List.List String.String"
            },
            {
                "name": "UserPoolTagsType",
                "comment": " The UserPoolTagsType data model.\n",
                "args": [],
                "type": "Dict.Dict String.String String.String"
            },
            {
                "name": "UserPoolType",
                "comment": " The UserPoolType data model.\n",
                "args": [],
                "type": "{ adminCreateUserConfig : Maybe.Maybe AWS.CognitoIdentityProvider.AdminCreateUserConfigType, aliasAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.AliasAttributesListType, arn : Maybe.Maybe String.String, autoVerifiedAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.VerifiedAttributesListType, creationDate : Maybe.Maybe String.String, customDomain : Maybe.Maybe String.String, deviceConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.DeviceConfigurationType, domain : Maybe.Maybe String.String, emailConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.EmailConfigurationType, emailConfigurationFailure : Maybe.Maybe String.String, emailVerificationMessage : Maybe.Maybe String.String, emailVerificationSubject : Maybe.Maybe String.String, estimatedNumberOfUsers : Maybe.Maybe Basics.Int, id : Maybe.Maybe String.String, lambdaConfig : Maybe.Maybe AWS.CognitoIdentityProvider.LambdaConfigType, lastModifiedDate : Maybe.Maybe String.String, mfaConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolMfaType, name : Maybe.Maybe String.String, policies : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolPolicyType, schemaAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.SchemaAttributesListType, smsAuthenticationMessage : Maybe.Maybe String.String, smsConfiguration : Maybe.Maybe AWS.CognitoIdentityProvider.SmsConfigurationType, smsConfigurationFailure : Maybe.Maybe String.String, smsVerificationMessage : Maybe.Maybe String.String, status : Maybe.Maybe AWS.CognitoIdentityProvider.StatusType, userPoolAddOns : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolAddOnsType, userPoolTags : Maybe.Maybe AWS.CognitoIdentityProvider.UserPoolTagsType, usernameAttributes : Maybe.Maybe AWS.CognitoIdentityProvider.UsernameAttributesListType, verificationMessageTemplate : Maybe.Maybe AWS.CognitoIdentityProvider.VerificationMessageTemplateType }"
            },
            {
                "name": "UserType",
                "comment": " The UserType data model.\n",
                "args": [],
                "type": "{ attributes : Maybe.Maybe AWS.CognitoIdentityProvider.AttributeListType, enabled : Maybe.Maybe Basics.Bool, mfaoptions : Maybe.Maybe AWS.CognitoIdentityProvider.MfaoptionListType, userCreateDate : Maybe.Maybe String.String, userLastModifiedDate : Maybe.Maybe String.String, userStatus : Maybe.Maybe AWS.CognitoIdentityProvider.UserStatusType, username : Maybe.Maybe String.String }"
            },
            {
                "name": "UsernameAttributesListType",
                "comment": " The UsernameAttributesListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.UsernameAttributeType"
            },
            {
                "name": "UsersListType",
                "comment": " The UsersListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.UserType"
            },
            {
                "name": "VerificationMessageTemplateType",
                "comment": " The VerificationMessageTemplateType data model.\n",
                "args": [],
                "type": "{ defaultEmailOption : Maybe.Maybe AWS.CognitoIdentityProvider.DefaultEmailOptionType, emailMessage : Maybe.Maybe String.String, emailMessageByLink : Maybe.Maybe String.String, emailSubject : Maybe.Maybe String.String, emailSubjectByLink : Maybe.Maybe String.String, smsMessage : Maybe.Maybe String.String }"
            },
            {
                "name": "VerifiedAttributesListType",
                "comment": " The VerifiedAttributesListType data model.\n",
                "args": [],
                "type": "List.List AWS.CognitoIdentityProvider.VerifiedAttributeType"
            },
            {
                "name": "VerifySoftwareTokenRequest",
                "comment": " The VerifySoftwareTokenRequest data model.\n",
                "args": [],
                "type": "{ accessToken : Maybe.Maybe String.String, friendlyDeviceName : Maybe.Maybe String.String, session : Maybe.Maybe String.String, userCode : String.String }"
            },
            {
                "name": "VerifySoftwareTokenResponse",
                "comment": " The VerifySoftwareTokenResponse data model.\n",
                "args": [],
                "type": "{ session : Maybe.Maybe String.String, status : Maybe.Maybe AWS.CognitoIdentityProvider.VerifySoftwareTokenResponseType }"
            },
            {
                "name": "VerifyUserAttributeRequest",
                "comment": " The VerifyUserAttributeRequest data model.\n",
                "args": [],
                "type": "{ accessToken : String.String, attributeName : String.String, code : String.String }"
            },
            {
                "name": "VerifyUserAttributeResponse",
                "comment": " The VerifyUserAttributeResponse data model.\n",
                "args": [],
                "type": "{}"
            }
        ],
        "values": [
            {
                "name": "accountTakeoverEventActionType",
                "comment": " The AccountTakeoverEventActionType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.AccountTakeoverEventActionType"
            },
            {
                "name": "addCustomAttributes",
                "comment": " Adds additional user attributes to the user pool schema.\n",
                "type": "AWS.CognitoIdentityProvider.AddCustomAttributesRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminAddUserToGroup",
                "comment": " Adds the specified user to the specified group.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminAddUserToGroupRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminConfirmSignUp",
                "comment": " Confirms user registration as an admin without using a confirmation code. Works on any user.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminConfirmSignUpRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminCreateUser",
                "comment": " Creates a new user in the specified user pool.\n\nIf `MessageAction` is not set, the default is to send a welcome message via email or phone (SMS).\n\nThis message is based on a template that you configured in your call to or . This template includes your custom sign-up instructions and placeholders for user name and temporary password.\n\nAlternatively, you can call AdminCreateUser with “SUPPRESS” for the `MessageAction` parameter, and Amazon Cognito will not send any email.\n\nIn either case, the user will be in the `FORCE_CHANGE_PASSWORD` state until they sign in and change their password.\n\nAdminCreateUser requires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminCreateUserRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.AdminCreateUserResponse"
            },
            {
                "name": "adminDeleteUser",
                "comment": " Deletes a user as an administrator. Works on any user.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminDeleteUserRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminDeleteUserAttributes",
                "comment": " Deletes the user attributes in a user pool as an administrator. Works on any user.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminDeleteUserAttributesRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminDisableProviderForUser",
                "comment": " Disables the user from signing in with the specified external (SAML or social) identity provider. If the user to disable is a Cognito User Pools native username + password user, they are not permitted to use their password to sign-in. If the user to disable is a linked external IdP user, any link between that user and an existing user is removed. The next time the external user (no longer attached to the previously linked `DestinationUser`) signs in, they must create a new user account. See .\n\nThis action is enabled only for admin access and requires developer credentials.\n\nThe `ProviderName` must match the value specified when creating an IdP for the pool.\n\nTo disable a native username + password user, the `ProviderName` value must be `Cognito` and the `ProviderAttributeName` must be `Cognito_Subject`, with the `ProviderAttributeValue` being the name that is used in the user pool for the user.\n\nThe `ProviderAttributeName` must always be `Cognito_Subject` for social identity providers. The `ProviderAttributeValue` must always be the exact subject that was used when the user was originally linked as a source user.\n\nFor de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign-in, the `ProviderAttributeName` and `ProviderAttributeValue` must be the same values that were used for the `SourceUser` when the identities were originally linked in the call. (If the linking was done with `ProviderAttributeName` set to `Cognito_Subject`, the same applies here). However, if the user has already signed in, the `ProviderAttributeName` must be `Cognito_Subject` and `ProviderAttributeValue` must be the subject of the SAML assertion.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminDisableProviderForUserRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminDisableUser",
                "comment": " Disables the specified user as an administrator. Works on any user.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminDisableUserRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminEnableUser",
                "comment": " Enables the specified user as an administrator. Works on any user.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminEnableUserRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminForgetDevice",
                "comment": " Forgets the device, as an administrator.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminForgetDeviceRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminGetDevice",
                "comment": " Gets the device, as an administrator.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminGetDeviceRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.AdminGetDeviceResponse"
            },
            {
                "name": "adminGetUser",
                "comment": " Gets the specified user by user name in a user pool as an administrator. Works on any user.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminGetUserRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.AdminGetUserResponse"
            },
            {
                "name": "adminInitiateAuth",
                "comment": " Initiates the authentication flow, as an administrator.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminInitiateAuthRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.AdminInitiateAuthResponse"
            },
            {
                "name": "adminLinkProviderForUser",
                "comment": " Links an existing user account in a user pool (`DestinationUser`) to an identity from an external identity provider (`SourceUser`) based on a specified attribute name and value from the external identity provider. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in, so that the federated user identity can be used to sign in as the existing user account.\n\nFor example, if there is an existing user with a username and password, this API links that user to a federated user identity, so that when the federated user identity is used, the user signs in as the existing user account.\n\nBecause this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external identity providers and provider attributes that have been trusted by the application owner.\n\nSee also .\n\nThis action is enabled only for admin access and requires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminLinkProviderForUserRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminListDevices",
                "comment": " Lists devices, as an administrator.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminListDevicesRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.AdminListDevicesResponse"
            },
            {
                "name": "adminListGroupsForUser",
                "comment": " Lists the groups that the user belongs to.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminListGroupsForUserRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.AdminListGroupsForUserResponse"
            },
            {
                "name": "adminListUserAuthEvents",
                "comment": " Lists a history of user activity and any risks detected as part of Amazon Cognito advanced security.\n",
                "type": "AWS.CognitoIdentityProvider.AdminListUserAuthEventsRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.AdminListUserAuthEventsResponse"
            },
            {
                "name": "adminRemoveUserFromGroup",
                "comment": " Removes the specified user from the specified group.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminRemoveUserFromGroupRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminResetUserPassword",
                "comment": " Resets the specified user's password in a user pool as an administrator. Works on any user.\n\nWhen a developer calls this API, the current password is invalidated, so it must be changed. If a user tries to sign in after the API is called, the app will get a PasswordResetRequiredException exception back and should direct the user down the flow to reset the password, which is the same as the forgot password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminResetUserPasswordRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminRespondToAuthChallenge",
                "comment": " Responds to an authentication challenge, as an administrator.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminRespondToAuthChallengeRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.AdminRespondToAuthChallengeResponse"
            },
            {
                "name": "adminSetUserMfapreference",
                "comment": " Sets the user's multi-factor authentication (MFA) preference.\n",
                "type": "AWS.CognitoIdentityProvider.AdminSetUserMfapreferenceRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminSetUserPassword",
                "comment": " ",
                "type": "AWS.CognitoIdentityProvider.AdminSetUserPasswordRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminSetUserSettings",
                "comment": " Sets all the user settings for a specified user name. Works on any user.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminSetUserSettingsRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminUpdateAuthEventFeedback",
                "comment": " Provides feedback for an authentication event as to whether it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.\n",
                "type": "AWS.CognitoIdentityProvider.AdminUpdateAuthEventFeedbackRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminUpdateDeviceStatus",
                "comment": " Updates the device status as an administrator.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminUpdateDeviceStatusRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminUpdateUserAttributes",
                "comment": " Updates the specified user's attributes, including developer attributes, as an administrator. Works on any user.\n\nFor custom attributes, you must prepend the `custom:` prefix to the attribute name.\n\nIn addition to updating user attributes, this API can also be used to mark phone and email as verified.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminUpdateUserAttributesRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "adminUserGlobalSignOut",
                "comment": " Signs out users from all devices, as an administrator.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.AdminUserGlobalSignOutRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "advancedSecurityModeType",
                "comment": " The AdvancedSecurityModeType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.AdvancedSecurityModeType"
            },
            {
                "name": "aliasAttributeType",
                "comment": " The AliasAttributeType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.AliasAttributeType"
            },
            {
                "name": "associateSoftwareToken",
                "comment": " Returns a unique generated shared secret key code for the user account. The request takes an access token or a session string, but not both.\n",
                "type": "AWS.CognitoIdentityProvider.AssociateSoftwareTokenRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.AssociateSoftwareTokenResponse"
            },
            {
                "name": "attributeDataType",
                "comment": " The AttributeDataType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.AttributeDataType"
            },
            {
                "name": "authFlowType",
                "comment": " The AuthFlowType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.AuthFlowType"
            },
            {
                "name": "challengeName",
                "comment": " The ChallengeName data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.ChallengeName"
            },
            {
                "name": "challengeNameType",
                "comment": " The ChallengeNameType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.ChallengeNameType"
            },
            {
                "name": "challengeResponse",
                "comment": " The ChallengeResponse data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.ChallengeResponse"
            },
            {
                "name": "changePassword",
                "comment": " Changes the password for a specified user in a user pool.\n",
                "type": "AWS.CognitoIdentityProvider.ChangePasswordRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "compromisedCredentialsEventActionType",
                "comment": " The CompromisedCredentialsEventActionType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.CompromisedCredentialsEventActionType"
            },
            {
                "name": "confirmDevice",
                "comment": " Confirms tracking of the device. This API call is the call that begins device tracking.\n",
                "type": "AWS.CognitoIdentityProvider.ConfirmDeviceRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ConfirmDeviceResponse"
            },
            {
                "name": "confirmForgotPassword",
                "comment": " Allows a user to enter a confirmation code to reset a forgotten password.\n",
                "type": "AWS.CognitoIdentityProvider.ConfirmForgotPasswordRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "confirmSignUp",
                "comment": " Confirms registration of a user and handles the existing alias from a previous user.\n",
                "type": "AWS.CognitoIdentityProvider.ConfirmSignUpRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "createGroup",
                "comment": " Creates a new group in the specified user pool.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.CreateGroupRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.CreateGroupResponse"
            },
            {
                "name": "createIdentityProvider",
                "comment": " Creates an identity provider for a user pool.\n",
                "type": "AWS.CognitoIdentityProvider.CreateIdentityProviderRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.CreateIdentityProviderResponse"
            },
            {
                "name": "createResourceServer",
                "comment": " Creates a new OAuth2.0 resource server and defines custom scopes in it.\n",
                "type": "AWS.CognitoIdentityProvider.CreateResourceServerRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.CreateResourceServerResponse"
            },
            {
                "name": "createUserImportJob",
                "comment": " Creates the user import job.\n",
                "type": "AWS.CognitoIdentityProvider.CreateUserImportJobRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.CreateUserImportJobResponse"
            },
            {
                "name": "createUserPool",
                "comment": " Creates a new Amazon Cognito user pool and sets the password policy for the pool.\n",
                "type": "AWS.CognitoIdentityProvider.CreateUserPoolRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.CreateUserPoolResponse"
            },
            {
                "name": "createUserPoolClient",
                "comment": " Creates the user pool client.\n",
                "type": "AWS.CognitoIdentityProvider.CreateUserPoolClientRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.CreateUserPoolClientResponse"
            },
            {
                "name": "createUserPoolDomain",
                "comment": " Creates a new domain for a user pool.\n",
                "type": "AWS.CognitoIdentityProvider.CreateUserPoolDomainRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.CreateUserPoolDomainResponse"
            },
            {
                "name": "defaultEmailOptionType",
                "comment": " The DefaultEmailOptionType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.DefaultEmailOptionType"
            },
            {
                "name": "deleteGroup",
                "comment": " Deletes a group. Currently only groups with no members can be deleted.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.DeleteGroupRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "deleteIdentityProvider",
                "comment": " Deletes an identity provider for a user pool.\n",
                "type": "AWS.CognitoIdentityProvider.DeleteIdentityProviderRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "deleteResourceServer",
                "comment": " Deletes a resource server.\n",
                "type": "AWS.CognitoIdentityProvider.DeleteResourceServerRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "deleteUser",
                "comment": " Allows a user to delete himself or herself.\n",
                "type": "AWS.CognitoIdentityProvider.DeleteUserRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "deleteUserAttributes",
                "comment": " Deletes the attributes for a user.\n",
                "type": "AWS.CognitoIdentityProvider.DeleteUserAttributesRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "deleteUserPool",
                "comment": " Deletes the specified Amazon Cognito user pool.\n",
                "type": "AWS.CognitoIdentityProvider.DeleteUserPoolRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "deleteUserPoolClient",
                "comment": " Allows the developer to delete the user pool client.\n",
                "type": "AWS.CognitoIdentityProvider.DeleteUserPoolClientRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "deleteUserPoolDomain",
                "comment": " Deletes a domain for a user pool.\n",
                "type": "AWS.CognitoIdentityProvider.DeleteUserPoolDomainRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "deliveryMediumType",
                "comment": " The DeliveryMediumType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.DeliveryMediumType"
            },
            {
                "name": "describeIdentityProvider",
                "comment": " Gets information about a specific identity provider.\n",
                "type": "AWS.CognitoIdentityProvider.DescribeIdentityProviderRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.DescribeIdentityProviderResponse"
            },
            {
                "name": "describeResourceServer",
                "comment": " Describes a resource server.\n",
                "type": "AWS.CognitoIdentityProvider.DescribeResourceServerRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.DescribeResourceServerResponse"
            },
            {
                "name": "describeRiskConfiguration",
                "comment": " Describes the risk configuration.\n",
                "type": "AWS.CognitoIdentityProvider.DescribeRiskConfigurationRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.DescribeRiskConfigurationResponse"
            },
            {
                "name": "describeUserImportJob",
                "comment": " Describes the user import job.\n",
                "type": "AWS.CognitoIdentityProvider.DescribeUserImportJobRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.DescribeUserImportJobResponse"
            },
            {
                "name": "describeUserPool",
                "comment": " Returns the configuration information and metadata of the specified user pool.\n",
                "type": "AWS.CognitoIdentityProvider.DescribeUserPoolRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.DescribeUserPoolResponse"
            },
            {
                "name": "describeUserPoolClient",
                "comment": " Client method for returning the configuration information and metadata of the specified user pool app client.\n",
                "type": "AWS.CognitoIdentityProvider.DescribeUserPoolClientRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.DescribeUserPoolClientResponse"
            },
            {
                "name": "describeUserPoolDomain",
                "comment": " Gets information about a domain.\n",
                "type": "AWS.CognitoIdentityProvider.DescribeUserPoolDomainRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.DescribeUserPoolDomainResponse"
            },
            {
                "name": "deviceRememberedStatusType",
                "comment": " The DeviceRememberedStatusType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.DeviceRememberedStatusType"
            },
            {
                "name": "domainStatusType",
                "comment": " The DomainStatusType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.DomainStatusType"
            },
            {
                "name": "emailSendingAccountType",
                "comment": " The EmailSendingAccountType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.EmailSendingAccountType"
            },
            {
                "name": "eventFilterType",
                "comment": " The EventFilterType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.EventFilterType"
            },
            {
                "name": "eventResponseType",
                "comment": " The EventResponseType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.EventResponseType"
            },
            {
                "name": "eventType",
                "comment": " The EventType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.EventType"
            },
            {
                "name": "explicitAuthFlowsType",
                "comment": " The ExplicitAuthFlowsType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.ExplicitAuthFlowsType"
            },
            {
                "name": "feedbackValueType",
                "comment": " The FeedbackValueType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.FeedbackValueType"
            },
            {
                "name": "forgetDevice",
                "comment": " Forgets the specified device.\n",
                "type": "AWS.CognitoIdentityProvider.ForgetDeviceRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "forgotPassword",
                "comment": " Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user's password. For the `Username` parameter, you can use the username or user alias. If a verified phone number exists for the user, the confirmation code is sent to the phone number. Otherwise, if a verified email exists, the confirmation code is sent to the email. If neither a verified phone number nor a verified email exists, `InvalidParameterException` is thrown. To use the confirmation code for resetting the password, call .\n",
                "type": "AWS.CognitoIdentityProvider.ForgotPasswordRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ForgotPasswordResponse"
            },
            {
                "name": "getCsvheader",
                "comment": " Gets the header information for the .csv file to be used as input for the user import job.\n",
                "type": "AWS.CognitoIdentityProvider.GetCsvheaderRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.GetCsvheaderResponse"
            },
            {
                "name": "getDevice",
                "comment": " Gets the device.\n",
                "type": "AWS.CognitoIdentityProvider.GetDeviceRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.GetDeviceResponse"
            },
            {
                "name": "getGroup",
                "comment": " Gets a group.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.GetGroupRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.GetGroupResponse"
            },
            {
                "name": "getIdentityProviderByIdentifier",
                "comment": " Gets the specified identity provider.\n",
                "type": "AWS.CognitoIdentityProvider.GetIdentityProviderByIdentifierRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.GetIdentityProviderByIdentifierResponse"
            },
            {
                "name": "getSigningCertificate",
                "comment": " This method takes a user pool ID, and returns the signing certificate.\n",
                "type": "AWS.CognitoIdentityProvider.GetSigningCertificateRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.GetSigningCertificateResponse"
            },
            {
                "name": "getUicustomization",
                "comment": " Gets the UI Customization information for a particular app client's app UI, if there is something set. If nothing is set for the particular client, but there is an existing pool level customization (app `clientId` will be `ALL`), then that is returned. If nothing is present, then an empty shape is returned.\n",
                "type": "AWS.CognitoIdentityProvider.GetUicustomizationRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.GetUicustomizationResponse"
            },
            {
                "name": "getUser",
                "comment": " Gets the user attributes and metadata for a user.\n",
                "type": "AWS.CognitoIdentityProvider.GetUserRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.GetUserResponse"
            },
            {
                "name": "getUserAttributeVerificationCode",
                "comment": " Gets the user attribute verification code for the specified attribute name.\n",
                "type": "AWS.CognitoIdentityProvider.GetUserAttributeVerificationCodeRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.GetUserAttributeVerificationCodeResponse"
            },
            {
                "name": "getUserPoolMfaConfig",
                "comment": " Gets the user pool multi-factor authentication (MFA) configuration.\n",
                "type": "AWS.CognitoIdentityProvider.GetUserPoolMfaConfigRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.GetUserPoolMfaConfigResponse"
            },
            {
                "name": "globalSignOut",
                "comment": " Signs out users from all devices.\n",
                "type": "AWS.CognitoIdentityProvider.GlobalSignOutRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "identityProviderTypeType",
                "comment": " The IdentityProviderTypeType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.IdentityProviderTypeType"
            },
            {
                "name": "initiateAuth",
                "comment": " Initiates the authentication flow.\n",
                "type": "AWS.CognitoIdentityProvider.InitiateAuthRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.InitiateAuthResponse"
            },
            {
                "name": "listDevices",
                "comment": " Lists the devices.\n",
                "type": "AWS.CognitoIdentityProvider.ListDevicesRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ListDevicesResponse"
            },
            {
                "name": "listGroups",
                "comment": " Lists the groups associated with a user pool.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.ListGroupsRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ListGroupsResponse"
            },
            {
                "name": "listIdentityProviders",
                "comment": " Lists information about all identity providers for a user pool.\n",
                "type": "AWS.CognitoIdentityProvider.ListIdentityProvidersRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ListIdentityProvidersResponse"
            },
            {
                "name": "listResourceServers",
                "comment": " Lists the resource servers for a user pool.\n",
                "type": "AWS.CognitoIdentityProvider.ListResourceServersRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ListResourceServersResponse"
            },
            {
                "name": "listTagsForResource",
                "comment": " Lists the tags that are assigned to an Amazon Cognito user pool.\n\nA tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.\n\nYou can use this action up to 10 times per second, per account.\n\n",
                "type": "AWS.CognitoIdentityProvider.ListTagsForResourceRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ListTagsForResourceResponse"
            },
            {
                "name": "listUserImportJobs",
                "comment": " Lists the user import jobs.\n",
                "type": "AWS.CognitoIdentityProvider.ListUserImportJobsRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ListUserImportJobsResponse"
            },
            {
                "name": "listUserPoolClients",
                "comment": " Lists the clients that have been created for the specified user pool.\n",
                "type": "AWS.CognitoIdentityProvider.ListUserPoolClientsRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ListUserPoolClientsResponse"
            },
            {
                "name": "listUserPools",
                "comment": " Lists the user pools associated with an AWS account.\n",
                "type": "AWS.CognitoIdentityProvider.ListUserPoolsRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ListUserPoolsResponse"
            },
            {
                "name": "listUsers",
                "comment": " Lists the users in the Amazon Cognito user pool.\n",
                "type": "AWS.CognitoIdentityProvider.ListUsersRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ListUsersResponse"
            },
            {
                "name": "listUsersInGroup",
                "comment": " Lists the users in the specified group.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.ListUsersInGroupRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ListUsersInGroupResponse"
            },
            {
                "name": "messageActionType",
                "comment": " The MessageActionType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.MessageActionType"
            },
            {
                "name": "oauthFlowType",
                "comment": " The OauthFlowType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.OauthFlowType"
            },
            {
                "name": "resendConfirmationCode",
                "comment": " Resends the confirmation (for confirmation of registration) to a specific user in the user pool.\n",
                "type": "AWS.CognitoIdentityProvider.ResendConfirmationCodeRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.ResendConfirmationCodeResponse"
            },
            {
                "name": "respondToAuthChallenge",
                "comment": " Responds to the authentication challenge.\n",
                "type": "AWS.CognitoIdentityProvider.RespondToAuthChallengeRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.RespondToAuthChallengeResponse"
            },
            {
                "name": "riskDecisionType",
                "comment": " The RiskDecisionType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.RiskDecisionType"
            },
            {
                "name": "riskLevelType",
                "comment": " The RiskLevelType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.RiskLevelType"
            },
            {
                "name": "service",
                "comment": " Configuration for this service.\n",
                "type": "AWS.Config.Region -> AWS.Service.Service"
            },
            {
                "name": "setRiskConfiguration",
                "comment": " Configures actions on detected risks. To delete the risk configuration for `UserPoolId` or `ClientId`, pass null values for all four configuration types.\n\nTo enable Amazon Cognito advanced security features, update the user pool to include the `UserPoolAddOns` key`AdvancedSecurityMode`.\n\nSee .\n\n",
                "type": "AWS.CognitoIdentityProvider.SetRiskConfigurationRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.SetRiskConfigurationResponse"
            },
            {
                "name": "setUicustomization",
                "comment": " Sets the UI customization information for a user pool's built-in app UI.\n\nYou can specify app UI customization settings for a single client (with a specific `clientId`) or for all clients (by setting the `clientId` to `ALL`). If you specify `ALL`, the default configuration will be used for every client that has no UI customization set previously. If you specify UI customization settings for a particular client, it will no longer fall back to the `ALL` configuration.\n\nTo use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app's pages, and the service will throw an error.\n\n",
                "type": "AWS.CognitoIdentityProvider.SetUicustomizationRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.SetUicustomizationResponse"
            },
            {
                "name": "setUserMfapreference",
                "comment": " Set the user's multi-factor authentication (MFA) method preference.\n",
                "type": "AWS.CognitoIdentityProvider.SetUserMfapreferenceRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "setUserPoolMfaConfig",
                "comment": " Set the user pool MFA configuration.\n",
                "type": "AWS.CognitoIdentityProvider.SetUserPoolMfaConfigRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.SetUserPoolMfaConfigResponse"
            },
            {
                "name": "setUserSettings",
                "comment": " Sets the user settings like multi-factor authentication (MFA). If MFA is to be removed for a particular attribute pass the attribute with code delivery as null. If null list is passed, all MFA options are removed.\n",
                "type": "AWS.CognitoIdentityProvider.SetUserSettingsRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "signUp",
                "comment": " Registers the user in the specified user pool and creates a user name, password, and user attributes.\n",
                "type": "AWS.CognitoIdentityProvider.SignUpRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.SignUpResponse"
            },
            {
                "name": "startUserImportJob",
                "comment": " Starts the user import.\n",
                "type": "AWS.CognitoIdentityProvider.StartUserImportJobRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.StartUserImportJobResponse"
            },
            {
                "name": "statusType",
                "comment": " The StatusType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.StatusType"
            },
            {
                "name": "stopUserImportJob",
                "comment": " Stops the user import job.\n",
                "type": "AWS.CognitoIdentityProvider.StopUserImportJobRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.StopUserImportJobResponse"
            },
            {
                "name": "tagResource",
                "comment": " Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.\n\nEach tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of a user pool, one for testing and another for production, you might assign an `Environment` tag key to both user pools. The value of this key might be `Test` for one user pool and `Production` for the other.\n\nTags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your user pools. In an IAM policy, you can constrain permissions for user pools based on specific tags or tag values.\n\nYou can use this action up to 5 times per second, per account. A user pool can have as many as 50 tags.\n\n",
                "type": "AWS.CognitoIdentityProvider.TagResourceRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "untagResource",
                "comment": " Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5 times per second, per account\n",
                "type": "AWS.CognitoIdentityProvider.UntagResourceRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "updateAuthEventFeedback",
                "comment": " Provides the feedback for an authentication event whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.\n",
                "type": "AWS.CognitoIdentityProvider.UpdateAuthEventFeedbackRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "updateDeviceStatus",
                "comment": " Updates the device status.\n",
                "type": "AWS.CognitoIdentityProvider.UpdateDeviceStatusRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "updateGroup",
                "comment": " Updates the specified group with the specified attributes.\n\nRequires developer credentials.\n\n",
                "type": "AWS.CognitoIdentityProvider.UpdateGroupRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.UpdateGroupResponse"
            },
            {
                "name": "updateIdentityProvider",
                "comment": " Updates identity provider information for a user pool.\n",
                "type": "AWS.CognitoIdentityProvider.UpdateIdentityProviderRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.UpdateIdentityProviderResponse"
            },
            {
                "name": "updateResourceServer",
                "comment": " Updates the name and scopes of resource server. All other fields are read-only.\n",
                "type": "AWS.CognitoIdentityProvider.UpdateResourceServerRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.UpdateResourceServerResponse"
            },
            {
                "name": "updateUserAttributes",
                "comment": " Allows a user to update a specific attribute (one at a time).\n",
                "type": "AWS.CognitoIdentityProvider.UpdateUserAttributesRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.UpdateUserAttributesResponse"
            },
            {
                "name": "updateUserPool",
                "comment": " Updates the specified user pool with the specified attributes. If you don't provide a value for an attribute, it will be set to the default value. You can get a list of the current user pool settings with .\n",
                "type": "AWS.CognitoIdentityProvider.UpdateUserPoolRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            },
            {
                "name": "updateUserPoolClient",
                "comment": " Updates the specified user pool app client with the specified attributes. If you don't provide a value for an attribute, it will be set to the default value. You can get a list of the current user pool app client settings with .\n",
                "type": "AWS.CognitoIdentityProvider.UpdateUserPoolClientRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.UpdateUserPoolClientResponse"
            },
            {
                "name": "updateUserPoolDomain",
                "comment": " Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user pool.\n\nYou can use this operation to provide the Amazon Resource Name (ARN) of a new certificate to Amazon Cognito. You cannot use it to change the domain for a user pool.\n\nA custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and sign-in pages for your application. When you set up a custom domain, you provide a certificate that you manage with AWS Certificate Manager (ACM). When necessary, you can use this operation to change the certificate that you applied to your custom domain.\n\nUsually, this is unnecessary following routine certificate renewal with ACM. When you renew your existing certificate in ACM, the ARN for your certificate remains the same, and your custom domain uses the new certificate automatically.\n\nHowever, if you replace your existing certificate with a new one, ACM gives the new certificate a new ARN. To apply the new certificate to your custom domain, you must provide this ARN to Amazon Cognito.\n\nWhen you add your new certificate in ACM, you must choose US East (N. Virginia) as the AWS Region.\n\nAfter you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain.\n\nFor more information about adding a custom domain to your user pool, see `Using Your Own Domain for the Hosted UI`.\n\n",
                "type": "AWS.CognitoIdentityProvider.UpdateUserPoolDomainRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.UpdateUserPoolDomainResponse"
            },
            {
                "name": "userImportJobStatusType",
                "comment": " The UserImportJobStatusType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.UserImportJobStatusType"
            },
            {
                "name": "userPoolMfaType",
                "comment": " The UserPoolMfaType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.UserPoolMfaType"
            },
            {
                "name": "userStatusType",
                "comment": " The UserStatusType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.UserStatusType"
            },
            {
                "name": "usernameAttributeType",
                "comment": " The UsernameAttributeType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.UsernameAttributeType"
            },
            {
                "name": "verifiedAttributeType",
                "comment": " The VerifiedAttributeType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.VerifiedAttributeType"
            },
            {
                "name": "verifySoftwareToken",
                "comment": " Use this API to register a user's entered TOTP code and mark the user's software token MFA status as \"verified\" if successful. The request takes an access token or a session string, but not both.\n",
                "type": "AWS.CognitoIdentityProvider.VerifySoftwareTokenRequest -> AWS.Http.Request AWS.Http.AWSAppError AWS.CognitoIdentityProvider.VerifySoftwareTokenResponse"
            },
            {
                "name": "verifySoftwareTokenResponseType",
                "comment": " The VerifySoftwareTokenResponseType data model.\n",
                "type": "Enum.Enum AWS.CognitoIdentityProvider.VerifySoftwareTokenResponseType"
            },
            {
                "name": "verifyUserAttribute",
                "comment": " Verifies the specified user attributes in the user pool.\n",
                "type": "AWS.CognitoIdentityProvider.VerifyUserAttributeRequest -> AWS.Http.Request AWS.Http.AWSAppError ()"
            }
        ],
        "binops": []
    }
]