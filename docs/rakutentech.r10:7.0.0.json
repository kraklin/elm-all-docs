[
    {
        "name": "R10.Button",
        "comment": " Buttons!\n\n![Buttons](https://r10.netlify.app/images/buttons300.png)\n\n@docs primary, secondary, tertiary, quaternary\n\n\n# Others\n\n@docs Data, cssButtonStyle, numberPadding, withLimitedWidth, withId\n\n",
        "unions": [],
        "aliases": [
            {
                "name": "Data",
                "comment": " Type of data required by buttons\n",
                "args": [
                    "z",
                    "msg"
                ],
                "type": "{ label : Element.WithContext.Element (R10.Context.ContextInternal z) msg, libu : R10.Libu.Type msg }"
            }
        ],
        "values": [
            {
                "name": "cssButtonStyle",
                "comment": " Special case for CSS buttons, useful if a button must be built using the standard Html library instead of `elm-ui`.\n",
                "type": "R10.Theme.Theme -> String.String"
            },
            {
                "name": "numberPadding",
                "comment": " Default padding value for buttons\n",
                "type": "Basics.Int"
            },
            {
                "name": "primary",
                "comment": " Primary Button for Call to Actions\n\n    R10.Button.primary []\n        { label = text \"Text\"\n        , libu = R10.Libu.Bu <| Just doSomething\n        , theme =\n            { mode = R10.Mode.Light\n            , primaryColor = R10.Color.Primary.CrimsonRed\n            }\n        }\n\n",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> { label : Element.WithContext.Element (R10.Context.ContextInternal z) msg, libu : R10.Libu.Type msg, translation : { a | key : String.String } } -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "quaternary",
                "comment": " Quaternary Button\n",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> { label : Element.WithContext.Element (R10.Context.ContextInternal z) msg, libu : R10.Libu.Type msg, translation : { a | key : String.String } } -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "secondary",
                "comment": " Secondary Button\n",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> { label : Element.WithContext.Element (R10.Context.ContextInternal z) msg, libu : R10.Libu.Type msg, translation : { a | key : String.String } } -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "tertiary",
                "comment": " Tertiary Button\n",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> { label : Element.WithContext.Element (R10.Context.ContextInternal z) msg, libu : R10.Libu.Type msg, translation : { a | key : String.String } } -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "withId",
                "comment": " ",
                "type": "String.String -> Element.WithContext.Element (R10.Context.ContextInternal z) msg -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "withLimitedWidth",
                "comment": " Attributes for buttons with limited width. By default buttons are `width fill`.\n",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg)"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Card",
        "comment": " Cards are area of the page surranded by a rounded border.\n\n@docs high, low, normal, noShadow\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "high",
                "comment": " Card with an high shadow\n",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal context) msg)"
            },
            {
                "name": "low",
                "comment": " Card with a low shadow\n",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal context) msg)"
            },
            {
                "name": "noShadow",
                "comment": " Card without a shadow\n",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal context) msg)"
            },
            {
                "name": "normal",
                "comment": " Card with a normal shadow\n",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal context) msg)"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Color",
        "comment": " These lists are just to be used to create documentations, not to actually use colors in the layout.\n\n\n# Base\n\nBase colors are the only color, together with one primary color, that are used to derive all other colors for the interface.\n\nThey are different depending on the mode:\n\n![Colors](https://r10.netlify.app/images/base_500.png)\n\n@docs Base\n\n\n# Primary\n\nThese represent the brands color of Rakuten.\n\nRakuten Brand guideline: <https://global.rakuten.com/corp/brand/>\n\n![Colors](https://r10.netlify.app/images/colors-overview400.png)\n\n@docs Primary, primary, primaryDefault, primaryToString, primaryDecoder, primaryDecoderExploration\n\n\n# Derived\n\n@docs Derived\n\n\n# Lists\n\nThese lists should only be used to generate documentation.\n\n@docs listPrimary, listBase, listDerived\n\n\n# Utils\n\n@docs maximumContrast\n\n",
        "unions": [],
        "aliases": [
            {
                "name": "Base",
                "comment": " ",
                "args": [],
                "type": "R10.Color.Internal.Base.Color"
            },
            {
                "name": "Derived",
                "comment": " ",
                "args": [],
                "type": "R10.Color.Internal.Derived.Color"
            },
            {
                "name": "Primary",
                "comment": " ",
                "args": [],
                "type": "R10.Color.Internal.Primary.Color"
            }
        ],
        "values": [
            {
                "name": "listBase",
                "comment": " ",
                "type": "R10.Theme.Theme -> List.List { color : Color.Color, name : String.String }"
            },
            {
                "name": "listDerived",
                "comment": " ",
                "type": "R10.Theme.Theme -> List.List { color : Color.Color, name : String.String, description : String.String }"
            },
            {
                "name": "listPrimary",
                "comment": " ",
                "type": "R10.Theme.Theme -> List.List { color : Color.Color, name : String.String, description : String.String, type_ : R10.Color.Primary }"
            },
            {
                "name": "maximumContrast",
                "comment": " A sligtly modified version of `Color.Accessibility.maximumContrast`\n",
                "type": "Color.Color -> List.List Color.Color -> Maybe.Maybe Color.Color"
            },
            {
                "name": "primary",
                "comment": " ",
                "type": "{ crimsonRed : R10.Color.Primary, red : R10.Color.Primary, orange : R10.Color.Primary, yellow : R10.Color.Primary, green : R10.Color.Primary, lightBlue : R10.Color.Primary, blue : R10.Color.Primary, blueSky : R10.Color.Primary, purple : R10.Color.Primary, pink : R10.Color.Primary }"
            },
            {
                "name": "primaryDecoder",
                "comment": " ",
                "type": "Json.Decode.Decoder R10.Color.Primary"
            },
            {
                "name": "primaryDecoderExploration",
                "comment": " ",
                "type": "Json.Decode.Exploration.Decoder R10.Color.Primary"
            },
            {
                "name": "primaryDefault",
                "comment": " ",
                "type": "R10.Color.Primary"
            },
            {
                "name": "primaryToString",
                "comment": " ",
                "type": "R10.Color.Primary -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Color.AttrsBackground",
        "comment": " Background colors\n\n@docs buttonMinorOver, buttonPrimary, buttonPrimaryDisabled, buttonPrimaryDisabledOver, buttonPrimaryOver, debugger, debuggerOver, dropdown, dropdownHover, dropdownSelected, inputFieldCheckboxOver, inputFieldCheckboxSelected, surface, sameAsBorderNormal, background, surface2dp, backgroundAlertDanger, backgroundAlertInfo, backgroundAlertSuccess, backgroundAlertWarning\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "background",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "backgroundAlertDanger",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "backgroundAlertInfo",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "backgroundAlertSuccess",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "backgroundAlertWarning",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "buttonMinorOver",
                "comment": " ",
                "type": "Element.WithContext.Decoration (R10.Context.ContextInternal context)"
            },
            {
                "name": "buttonPrimary",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "buttonPrimaryDisabled",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "buttonPrimaryDisabledOver",
                "comment": " ",
                "type": "Element.WithContext.Decoration (R10.Context.ContextInternal context)"
            },
            {
                "name": "buttonPrimaryOver",
                "comment": " ",
                "type": "Element.WithContext.Decoration (R10.Context.ContextInternal context)"
            },
            {
                "name": "debugger",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "debuggerOver",
                "comment": " ",
                "type": "Element.WithContext.Decoration (R10.Context.ContextInternal context)"
            },
            {
                "name": "dropdown",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "dropdownHover",
                "comment": " ",
                "type": "Element.WithContext.Decoration (R10.Context.ContextInternal context)"
            },
            {
                "name": "dropdownSelected",
                "comment": " ",
                "type": "Element.WithContext.Decoration (R10.Context.ContextInternal context)"
            },
            {
                "name": "inputFieldCheckboxOver",
                "comment": " ",
                "type": "Element.WithContext.Decoration (R10.Context.ContextInternal context)"
            },
            {
                "name": "inputFieldCheckboxSelected",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "sameAsBorderNormal",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "surface",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "surface2dp",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal context) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Color.AttrsBorder",
        "comment": " Border colors\n\n@docs buttonSecondary, inputFieldCheckboxNormal, inputFieldCheckboxOver, inputFieldCheckboxSelected, inputFieldError, inputFieldFocused, inputFieldNormal, inputFieldSuccess, normal, shadow\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "buttonSecondary",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "inputFieldCheckboxNormal",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "inputFieldCheckboxOver",
                "comment": " ",
                "type": "Element.WithContext.Decoration (R10.Context.ContextInternal z)"
            },
            {
                "name": "inputFieldCheckboxSelected",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "inputFieldError",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "inputFieldFocused",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "inputFieldNormal",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "inputFieldSuccess",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "normal",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "shadow",
                "comment": " ",
                "type": "{ offset : ( Basics.Float, Basics.Float ), size : Basics.Float, blur : Basics.Float } -> Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Color.AttrsFont",
        "comment": " Font colors\n\n@docs buttonPrimary, buttonPrimaryDisabled, buttonPrimaryDisabledOver, inputFieldCheckboxOver, link, linkOver, normal, normalLighter, valid, fontAlertDanger, fontAlertInfo, fontAlertSuccess, fontAlertWarning\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "buttonPrimary",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "buttonPrimaryDisabled",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "buttonPrimaryDisabledOver",
                "comment": " ",
                "type": "Element.WithContext.Decoration (R10.Context.ContextInternal z)"
            },
            {
                "name": "fontAlertDanger",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "fontAlertInfo",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "fontAlertSuccess",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "fontAlertWarning",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "inputFieldCheckboxOver",
                "comment": " ",
                "type": "Element.WithContext.Decoration (R10.Context.ContextInternal z)"
            },
            {
                "name": "link",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "linkOver",
                "comment": " ",
                "type": "Element.WithContext.Decoration (R10.Context.ContextInternal z)"
            },
            {
                "name": "normal",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "normalLighter",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "valid",
                "comment": " ",
                "type": "Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Color.Svg",
        "comment": "\n\n\n# SVG Colors\n\nThese are colors that can be used directly.\n\nIn general is better to use colors from `R10.Color.Attrs...` modules.\n\n@docs logo, primary, primaryVariant, border\n\n\n# Background\n\n@docs background, surface, surface2dp, backgroundButtonMinorOver, backgroundPhoneDropdown, backgroundAlertDanger, backgroundAlertInfo, backgroundAlertSuccess, backgroundAlertWarning\n\n\n# Font\n\n@docs fontHighEmphasis, fontMediumEmphasis, fontHighEmphasisWithMaximumContrast, link, fontAlertDanger, fontAlertInfo, fontAlertSuccess, fontAlertWarning\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "background",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "backgroundAlertDanger",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "backgroundAlertInfo",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "backgroundAlertSuccess",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "backgroundAlertWarning",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "backgroundButtonMinorOver",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "backgroundPhoneDropdown",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "border",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "fontAlertDanger",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "fontAlertInfo",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "fontAlertSuccess",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "fontAlertWarning",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "fontHighEmphasis",
                "comment": " Font color used in most places.\n",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "fontHighEmphasisWithMaximumContrast",
                "comment": " Font color to be used above a primary color, like in primary buttons.\n",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "fontMediumEmphasis",
                "comment": " Weak font color for text with minor importance.\n",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "link",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "logo",
                "comment": " Used for the logo. Similar to the primary color but in dark mode it is white.\n",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "primary",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "primaryVariant",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "surface",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            },
            {
                "name": "surface2dp",
                "comment": " ",
                "type": "R10.Theme.Theme -> Element.WithContext.Color"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Color.Utils",
        "comment": " Utilities for colors.\n\nThere are two competing color types in this library:\n\n  - `Color.Color` (from `avh4/elm-color`)\n  - `Color` (from `mdgriffith/elm-ui`)\n\nThe default color type is `Color`.\n\n@docs fromColorColor, toColorColor, fromHex, fromLightToDark, setAlpha, toCssRgba, fromHexToColorColor\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "fromColorColor",
                "comment": " Transform a `Color.Color` into an `Color`.\n",
                "type": "Color.Color -> Element.WithContext.Color"
            },
            {
                "name": "fromHex",
                "comment": " Convert a string containing an hexadecimal number into an `Color`.\n",
                "type": "String.String -> Element.WithContext.Color"
            },
            {
                "name": "fromHexToColorColor",
                "comment": " Convert a string containing an hexadecimal number into a `Color.Color`.\n",
                "type": "String.String -> Color.Color"
            },
            {
                "name": "fromLightToDark",
                "comment": " Convert a color from Light Mode to Dark Mode. This function works for `Color.Color` type.\n",
                "type": "Color.Color -> Color.Color"
            },
            {
                "name": "setAlpha",
                "comment": " Change the alpha channel in a color. This function works for `Color.Color` type.\n",
                "type": "Basics.Float -> Color.Color -> Color.Color"
            },
            {
                "name": "toColorColor",
                "comment": " Transform an `Color` into a `Color.Color`.\n",
                "type": "Element.WithContext.Color -> Color.Color"
            },
            {
                "name": "toCssRgba",
                "comment": " Convert an `Color` to a RGBA string, for example: rgba(100, 200, 0, 1)\n",
                "type": "Element.WithContext.Color -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Context",
        "comment": " Contains data that is automatically passed to all functions, based on `elm-ui-with-context`\n\n@docs ContextInternal, ContextR10, builder, isSmallScreen, default\n\n",
        "unions": [],
        "aliases": [
            {
                "name": "ContextInternal",
                "comment": " ",
                "args": [
                    "a"
                ],
                "type": "{ a | contextR10 : R10.Context.ContextR10 }"
            },
            {
                "name": "ContextR10",
                "comment": " ",
                "args": [],
                "type": "{ language : R10.Language.Language, theme : R10.Theme.Theme, device : R10.Device.Device, windowSize : { width : Basics.Int }, emailDomainList : List.List String.String, currentUrl : Url.Url, urlImageFlags : String.String, inputFieldWithLargePattern_width : Basics.Int, inputFieldWithLargePattern_height : Basics.Int, inputFieldWithLargePattern_fontSize : Basics.Int, inputFieldWithLargePattern_letterSpacing : Basics.Int, debugger_transitionSpeed : Basics.Float, urlTermsAndConditions : String.String, urlPrivacyPolicy : String.String, urlCookiePolicy : String.String, referenceExternalServiceName : String.String, clientName : String.String }"
            }
        ],
        "values": [
            {
                "name": "builder",
                "comment": " ",
                "type": "{ model : R10.Context.Model a b c } -> R10.Context.ContextR10"
            },
            {
                "name": "default",
                "comment": " ",
                "type": "R10.Context.ContextInternal {}"
            },
            {
                "name": "isSmallScreen",
                "comment": " ",
                "type": "Basics.Int -> Basics.Bool"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Counter",
        "comment": " Craate a Counter. See an example at <https://r10.netlify.app/counter/>\n\n@docs Counter, add, animationPosition, areMoving, init, jumpTo, lastValueInTheQueue, moveTo, nextValue, pause, presentValue, setSpeedInDigitsPerSecond, start, stop, update, view, wheelsQuantity\n\n",
        "unions": [
            {
                "name": "Counter",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "add",
                "comment": " ",
                "type": "Basics.Int -> R10.Counter.Counter -> R10.Counter.Counter"
            },
            {
                "name": "animationPosition",
                "comment": " ",
                "type": "R10.Counter.Counter -> Basics.Float"
            },
            {
                "name": "areMoving",
                "comment": " ",
                "type": "List.List R10.Counter.Counter -> Basics.Bool"
            },
            {
                "name": "init",
                "comment": " ",
                "type": "R10.Counter.Counter"
            },
            {
                "name": "jumpTo",
                "comment": " ",
                "type": "Basics.Int -> R10.Counter.Counter -> R10.Counter.Counter"
            },
            {
                "name": "lastValueInTheQueue",
                "comment": " ",
                "type": "R10.Counter.Counter -> Basics.Int"
            },
            {
                "name": "moveTo",
                "comment": " ",
                "type": "Basics.Int -> R10.Counter.Counter -> R10.Counter.Counter"
            },
            {
                "name": "nextValue",
                "comment": " ",
                "type": "R10.Counter.Counter -> Maybe.Maybe Basics.Int"
            },
            {
                "name": "pause",
                "comment": " ",
                "type": "R10.Counter.Counter -> R10.Counter.Counter"
            },
            {
                "name": "presentValue",
                "comment": " ",
                "type": "R10.Counter.Counter -> Basics.Int"
            },
            {
                "name": "setSpeedInDigitsPerSecond",
                "comment": " ",
                "type": "Basics.Float -> R10.Counter.Counter -> R10.Counter.Counter"
            },
            {
                "name": "start",
                "comment": " ",
                "type": "R10.Counter.Counter -> R10.Counter.Counter"
            },
            {
                "name": "stop",
                "comment": " ",
                "type": "R10.Counter.Counter -> R10.Counter.Counter"
            },
            {
                "name": "update",
                "comment": " ",
                "type": "R10.Counter.Counter -> R10.Counter.Counter"
            },
            {
                "name": "view",
                "comment": " ",
                "type": "R10.Counter.Counter -> Basics.Float -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "wheelsQuantity",
                "comment": " ",
                "type": "R10.Counter.Counter -> Basics.Int"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Country",
        "comment": "\n\n@docs Country, codeAndNameList, emptyFlag, fromCountryCode, fromCountryTelCode, fromString, list, listHead, listTail, toCountryCode, toCountryTelCode, toFlag, toString, fromTelephoneAsString, toCountryNameWithAlias\n\n",
        "unions": [
            {
                "name": "Country",
                "comment": " ",
                "args": [],
                "cases": [
                    [
                        "Afghanistan",
                        []
                    ],
                    [
                        "Albania",
                        []
                    ],
                    [
                        "Algeria",
                        []
                    ],
                    [
                        "AmericanSamoa",
                        []
                    ],
                    [
                        "Andorra",
                        []
                    ],
                    [
                        "Angola",
                        []
                    ],
                    [
                        "Anguilla",
                        []
                    ],
                    [
                        "Antarctica",
                        []
                    ],
                    [
                        "AntiguaandBarbuda",
                        []
                    ],
                    [
                        "Argentina",
                        []
                    ],
                    [
                        "Armenia",
                        []
                    ],
                    [
                        "Aruba",
                        []
                    ],
                    [
                        "Australia",
                        []
                    ],
                    [
                        "Austria",
                        []
                    ],
                    [
                        "Azerbaijan",
                        []
                    ],
                    [
                        "Bahamas",
                        []
                    ],
                    [
                        "Bahrain",
                        []
                    ],
                    [
                        "Bangladesh",
                        []
                    ],
                    [
                        "Barbados",
                        []
                    ],
                    [
                        "Belarus",
                        []
                    ],
                    [
                        "Belgium",
                        []
                    ],
                    [
                        "Belize",
                        []
                    ],
                    [
                        "Benin",
                        []
                    ],
                    [
                        "Bermuda",
                        []
                    ],
                    [
                        "Bhutan",
                        []
                    ],
                    [
                        "Bolivia",
                        []
                    ],
                    [
                        "BosniaandHerzegovina",
                        []
                    ],
                    [
                        "Botswana",
                        []
                    ],
                    [
                        "Brazil",
                        []
                    ],
                    [
                        "BritishIndianOceanTerritory",
                        []
                    ],
                    [
                        "BritishVirginIslands",
                        []
                    ],
                    [
                        "Brunei",
                        []
                    ],
                    [
                        "Bulgaria",
                        []
                    ],
                    [
                        "BurkinaFaso",
                        []
                    ],
                    [
                        "Burundi",
                        []
                    ],
                    [
                        "Cambodia",
                        []
                    ],
                    [
                        "Cameroon",
                        []
                    ],
                    [
                        "Canada",
                        []
                    ],
                    [
                        "CapeVerde",
                        []
                    ],
                    [
                        "CaymanIslands",
                        []
                    ],
                    [
                        "CentralAfricanRepublic",
                        []
                    ],
                    [
                        "Chad",
                        []
                    ],
                    [
                        "Chile",
                        []
                    ],
                    [
                        "China",
                        []
                    ],
                    [
                        "ChristmasIsland",
                        []
                    ],
                    [
                        "CocosIslands",
                        []
                    ],
                    [
                        "Colombia",
                        []
                    ],
                    [
                        "Comoros",
                        []
                    ],
                    [
                        "CookIslands",
                        []
                    ],
                    [
                        "CostaRica",
                        []
                    ],
                    [
                        "Croatia",
                        []
                    ],
                    [
                        "Cuba",
                        []
                    ],
                    [
                        "Curacao",
                        []
                    ],
                    [
                        "Cyprus",
                        []
                    ],
                    [
                        "CzechRepublic",
                        []
                    ],
                    [
                        "DemocraticRepublicoftheCongo",
                        []
                    ],
                    [
                        "Denmark",
                        []
                    ],
                    [
                        "Djibouti",
                        []
                    ],
                    [
                        "Dominica",
                        []
                    ],
                    [
                        "DominicanRepublic",
                        []
                    ],
                    [
                        "EastTimor",
                        []
                    ],
                    [
                        "Ecuador",
                        []
                    ],
                    [
                        "Egypt",
                        []
                    ],
                    [
                        "ElSalvador",
                        []
                    ],
                    [
                        "EquatorialGuinea",
                        []
                    ],
                    [
                        "Eritrea",
                        []
                    ],
                    [
                        "Estonia",
                        []
                    ],
                    [
                        "Ethiopia",
                        []
                    ],
                    [
                        "FalklandIslands",
                        []
                    ],
                    [
                        "FaroeIslands",
                        []
                    ],
                    [
                        "Fiji",
                        []
                    ],
                    [
                        "Finland",
                        []
                    ],
                    [
                        "France",
                        []
                    ],
                    [
                        "FrenchPolynesia",
                        []
                    ],
                    [
                        "Gabon",
                        []
                    ],
                    [
                        "Gambia",
                        []
                    ],
                    [
                        "Georgia",
                        []
                    ],
                    [
                        "Germany",
                        []
                    ],
                    [
                        "Ghana",
                        []
                    ],
                    [
                        "Gibraltar",
                        []
                    ],
                    [
                        "Greece",
                        []
                    ],
                    [
                        "Greenland",
                        []
                    ],
                    [
                        "Grenada",
                        []
                    ],
                    [
                        "Guam",
                        []
                    ],
                    [
                        "Guatemala",
                        []
                    ],
                    [
                        "Guernsey",
                        []
                    ],
                    [
                        "Guinea",
                        []
                    ],
                    [
                        "GuineaBissau",
                        []
                    ],
                    [
                        "Guyana",
                        []
                    ],
                    [
                        "Haiti",
                        []
                    ],
                    [
                        "Honduras",
                        []
                    ],
                    [
                        "HongKong",
                        []
                    ],
                    [
                        "Hungary",
                        []
                    ],
                    [
                        "Iceland",
                        []
                    ],
                    [
                        "India",
                        []
                    ],
                    [
                        "Indonesia",
                        []
                    ],
                    [
                        "Iran",
                        []
                    ],
                    [
                        "Iraq",
                        []
                    ],
                    [
                        "Ireland",
                        []
                    ],
                    [
                        "IsleofMan",
                        []
                    ],
                    [
                        "Israel",
                        []
                    ],
                    [
                        "Italy",
                        []
                    ],
                    [
                        "IvoryCoast",
                        []
                    ],
                    [
                        "Jamaica",
                        []
                    ],
                    [
                        "Japan",
                        []
                    ],
                    [
                        "Jersey",
                        []
                    ],
                    [
                        "Jordan",
                        []
                    ],
                    [
                        "Kazakhstan",
                        []
                    ],
                    [
                        "Kenya",
                        []
                    ],
                    [
                        "Kiribati",
                        []
                    ],
                    [
                        "Kosovo",
                        []
                    ],
                    [
                        "Kuwait",
                        []
                    ],
                    [
                        "Kyrgyzstan",
                        []
                    ],
                    [
                        "Laos",
                        []
                    ],
                    [
                        "Latvia",
                        []
                    ],
                    [
                        "Lebanon",
                        []
                    ],
                    [
                        "Lesotho",
                        []
                    ],
                    [
                        "Liberia",
                        []
                    ],
                    [
                        "Libya",
                        []
                    ],
                    [
                        "Liechtenstein",
                        []
                    ],
                    [
                        "Lithuania",
                        []
                    ],
                    [
                        "Luxembourg",
                        []
                    ],
                    [
                        "Macau",
                        []
                    ],
                    [
                        "Macedonia",
                        []
                    ],
                    [
                        "Madagascar",
                        []
                    ],
                    [
                        "Malawi",
                        []
                    ],
                    [
                        "Malaysia",
                        []
                    ],
                    [
                        "Maldives",
                        []
                    ],
                    [
                        "Mali",
                        []
                    ],
                    [
                        "Malta",
                        []
                    ],
                    [
                        "MarshallIslands",
                        []
                    ],
                    [
                        "Mauritania",
                        []
                    ],
                    [
                        "Mauritius",
                        []
                    ],
                    [
                        "Mayotte",
                        []
                    ],
                    [
                        "Mexico",
                        []
                    ],
                    [
                        "Micronesia",
                        []
                    ],
                    [
                        "Moldova",
                        []
                    ],
                    [
                        "Monaco",
                        []
                    ],
                    [
                        "Mongolia",
                        []
                    ],
                    [
                        "Montenegro",
                        []
                    ],
                    [
                        "Montserrat",
                        []
                    ],
                    [
                        "Morocco",
                        []
                    ],
                    [
                        "Mozambique",
                        []
                    ],
                    [
                        "Myanmar",
                        []
                    ],
                    [
                        "Namibia",
                        []
                    ],
                    [
                        "Nauru",
                        []
                    ],
                    [
                        "Nepal",
                        []
                    ],
                    [
                        "Netherlands",
                        []
                    ],
                    [
                        "NewCaledonia",
                        []
                    ],
                    [
                        "NewZealand",
                        []
                    ],
                    [
                        "Nicaragua",
                        []
                    ],
                    [
                        "Niger",
                        []
                    ],
                    [
                        "Nigeria",
                        []
                    ],
                    [
                        "Niue",
                        []
                    ],
                    [
                        "NorthKorea",
                        []
                    ],
                    [
                        "NorthernMarianaIslands",
                        []
                    ],
                    [
                        "Norway",
                        []
                    ],
                    [
                        "Oman",
                        []
                    ],
                    [
                        "Pakistan",
                        []
                    ],
                    [
                        "Palau",
                        []
                    ],
                    [
                        "Palestine",
                        []
                    ],
                    [
                        "Panama",
                        []
                    ],
                    [
                        "PapuaNewGuinea",
                        []
                    ],
                    [
                        "Paraguay",
                        []
                    ],
                    [
                        "Peru",
                        []
                    ],
                    [
                        "Philippines",
                        []
                    ],
                    [
                        "Pitcairn",
                        []
                    ],
                    [
                        "Poland",
                        []
                    ],
                    [
                        "Portugal",
                        []
                    ],
                    [
                        "PuertoRico",
                        []
                    ],
                    [
                        "Qatar",
                        []
                    ],
                    [
                        "RepublicoftheCongo",
                        []
                    ],
                    [
                        "Reunion",
                        []
                    ],
                    [
                        "Romania",
                        []
                    ],
                    [
                        "Russia",
                        []
                    ],
                    [
                        "Rwanda",
                        []
                    ],
                    [
                        "SaintBarthelemy",
                        []
                    ],
                    [
                        "SaintHelena",
                        []
                    ],
                    [
                        "SaintKittsandNevis",
                        []
                    ],
                    [
                        "SaintLucia",
                        []
                    ],
                    [
                        "SaintMartin",
                        []
                    ],
                    [
                        "SaintPierreandMiquelon",
                        []
                    ],
                    [
                        "SaintVincentandTheGrenadines",
                        []
                    ],
                    [
                        "Samoa",
                        []
                    ],
                    [
                        "SanMarino",
                        []
                    ],
                    [
                        "SaoTomeandPrincipe",
                        []
                    ],
                    [
                        "SaudiArabia",
                        []
                    ],
                    [
                        "Senegal",
                        []
                    ],
                    [
                        "Serbia",
                        []
                    ],
                    [
                        "Seychelles",
                        []
                    ],
                    [
                        "SierraLeone",
                        []
                    ],
                    [
                        "Singapore",
                        []
                    ],
                    [
                        "SintMaarten",
                        []
                    ],
                    [
                        "Slovakia",
                        []
                    ],
                    [
                        "Slovenia",
                        []
                    ],
                    [
                        "SolomonIslands",
                        []
                    ],
                    [
                        "Somalia",
                        []
                    ],
                    [
                        "SouthAfrica",
                        []
                    ],
                    [
                        "SouthKorea",
                        []
                    ],
                    [
                        "SouthSudan",
                        []
                    ],
                    [
                        "Spain",
                        []
                    ],
                    [
                        "SriLanka",
                        []
                    ],
                    [
                        "Sudan",
                        []
                    ],
                    [
                        "Suriname",
                        []
                    ],
                    [
                        "SvalbardandJanMayen",
                        []
                    ],
                    [
                        "Swaziland",
                        []
                    ],
                    [
                        "Sweden",
                        []
                    ],
                    [
                        "Switzerland",
                        []
                    ],
                    [
                        "Syria",
                        []
                    ],
                    [
                        "Taiwan",
                        []
                    ],
                    [
                        "Tajikistan",
                        []
                    ],
                    [
                        "Tanzania",
                        []
                    ],
                    [
                        "Thailand",
                        []
                    ],
                    [
                        "Togo",
                        []
                    ],
                    [
                        "Tokelau",
                        []
                    ],
                    [
                        "Tonga",
                        []
                    ],
                    [
                        "TrinidadandTobago",
                        []
                    ],
                    [
                        "Tunisia",
                        []
                    ],
                    [
                        "Turkey",
                        []
                    ],
                    [
                        "Turkmenistan",
                        []
                    ],
                    [
                        "TurksandCaicosIslands",
                        []
                    ],
                    [
                        "Tuvalu",
                        []
                    ],
                    [
                        "USVirginIslands",
                        []
                    ],
                    [
                        "Uganda",
                        []
                    ],
                    [
                        "Ukraine",
                        []
                    ],
                    [
                        "UnitedArabEmirates",
                        []
                    ],
                    [
                        "UnitedKingdom",
                        []
                    ],
                    [
                        "UnitedStates",
                        []
                    ],
                    [
                        "Uruguay",
                        []
                    ],
                    [
                        "Uzbekistan",
                        []
                    ],
                    [
                        "Vanuatu",
                        []
                    ],
                    [
                        "Vatican",
                        []
                    ],
                    [
                        "Venezuela",
                        []
                    ],
                    [
                        "Vietnam",
                        []
                    ],
                    [
                        "WallisandFutuna",
                        []
                    ],
                    [
                        "WesternSahara",
                        []
                    ],
                    [
                        "Yemen",
                        []
                    ],
                    [
                        "Zambia",
                        []
                    ],
                    [
                        "Zimbabwe",
                        []
                    ]
                ]
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "codeAndNameList",
                "comment": " ",
                "type": "List.List { code : String.String, name : String.String }"
            },
            {
                "name": "emptyFlag",
                "comment": " ",
                "type": "String.String"
            },
            {
                "name": "fromCountryCode",
                "comment": " from ISO 3166 code\n",
                "type": "String.String -> Maybe.Maybe R10.Country.Country"
            },
            {
                "name": "fromCountryTelCode",
                "comment": " ",
                "type": "String.String -> Maybe.Maybe R10.Country.Country"
            },
            {
                "name": "fromString",
                "comment": " ",
                "type": "String.String -> Maybe.Maybe R10.Country.Country"
            },
            {
                "name": "fromTelephoneAsString",
                "comment": " ",
                "type": "String.String -> Maybe.Maybe R10.Country.Country"
            },
            {
                "name": "list",
                "comment": " ",
                "type": "List.List R10.Country.Country"
            },
            {
                "name": "listHead",
                "comment": " ",
                "type": "R10.Country.Country"
            },
            {
                "name": "listTail",
                "comment": " ",
                "type": "R10.Country.Country"
            },
            {
                "name": "toCountryCode",
                "comment": " ISO 3166 code\n",
                "type": "R10.Country.Country -> String.String"
            },
            {
                "name": "toCountryNameWithAlias",
                "comment": " ",
                "type": "R10.Country.Country -> String.String"
            },
            {
                "name": "toCountryTelCode",
                "comment": " ",
                "type": "R10.Country.Country -> String.String"
            },
            {
                "name": "toFlag",
                "comment": " ",
                "type": "R10.Country.Country -> String.String"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "R10.Country.Country -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Device",
        "comment": " Information related to the device.\n\n@docs Browser, OS, Device, constructor, osToString, examples, isAndroid, isChromeDesktop, isChromeAndroid, isFirefoxAndroid, isIOS, isInternetExplorer, isMobileOS, isSafari, isSafari10OrIOS10, toString\n\n",
        "unions": [
            {
                "name": "Browser",
                "comment": " ",
                "args": [],
                "cases": []
            },
            {
                "name": "OS",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [
            {
                "name": "Device",
                "comment": " ",
                "args": [],
                "type": "{ os : R10.Device.OS, browser : R10.Device.Browser, userAgent : String.String, isSafari10OrIOS10 : Basics.Bool }"
            }
        ],
        "values": [
            {
                "name": "constructor",
                "comment": " ",
                "type": "String.String -> String.String -> Basics.Bool -> R10.Device.Device"
            },
            {
                "name": "examples",
                "comment": " ",
                "type": "List.List { isOntouchendInDocument : Basics.Bool, nameLong : String.String, nameShort : String.String, platform : String.String, referenceUrl : String.String, userAgent : String.String }"
            },
            {
                "name": "isAndroid",
                "comment": " ",
                "type": "R10.Device.Device -> Basics.Bool"
            },
            {
                "name": "isChromeAndroid",
                "comment": " ",
                "type": "R10.Device.Device -> Basics.Bool"
            },
            {
                "name": "isChromeDesktop",
                "comment": " ",
                "type": "R10.Device.Device -> Basics.Bool"
            },
            {
                "name": "isFirefoxAndroid",
                "comment": " ",
                "type": "R10.Device.Device -> Basics.Bool"
            },
            {
                "name": "isIOS",
                "comment": " ",
                "type": "R10.Device.Device -> Basics.Bool"
            },
            {
                "name": "isInternetExplorer",
                "comment": " ",
                "type": "R10.Device.Device -> Basics.Bool"
            },
            {
                "name": "isMobileOS",
                "comment": " ",
                "type": "R10.Device.Device -> Basics.Bool"
            },
            {
                "name": "isSafari",
                "comment": " ",
                "type": "R10.Device.Device -> Basics.Bool"
            },
            {
                "name": "isSafari10OrIOS10",
                "comment": " ",
                "type": "R10.Device.Device -> Basics.Bool"
            },
            {
                "name": "osToString",
                "comment": " ",
                "type": "R10.Device.OS -> String.String"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "R10.Device.Device -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.DropDown",
        "comment": " Craate a Dropdown using HTML `select`\n\n@docs Option, extraCss, view, viewBorderLess\n\n",
        "unions": [],
        "aliases": [
            {
                "name": "Option",
                "comment": " ",
                "args": [],
                "type": "{ value : String.String, text : String.String }"
            }
        ],
        "values": [
            {
                "name": "extraCss",
                "comment": " ",
                "type": "Element.WithContext.Color -> String.String"
            },
            {
                "name": "view",
                "comment": " The dropdown.\n",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> { a | colorBackground : Element.WithContext.Color, colorFont : Element.WithContext.Color, currentValue : String.String, inputHandler : String.String -> msg, optionList : List.List R10.DropDown.Option, fontSize : Basics.Int } -> R10.DropDown.Type -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "viewBorderLess",
                "comment": " Slightly different version of the dropdown that has no borders.\n",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> { a | colorBackground : Element.WithContext.Color, colorFont : Element.WithContext.Color, currentValue : String.String, inputHandler : String.String -> msg, optionList : List.List R10.DropDown.Option, fontSize : Basics.Int } -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.FontSize",
        "comment": " Font sizes\n\n@docs large, normal, small, xlarge, xxlarge, xsmall, xxsmall\n\n@docs normalAsInt\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "large",
                "comment": " ",
                "type": "Element.WithContext.Attr (R10.Context.ContextInternal z) decorative msg"
            },
            {
                "name": "normal",
                "comment": " ",
                "type": "Element.WithContext.Attr (R10.Context.ContextInternal z) decorative msg"
            },
            {
                "name": "normalAsInt",
                "comment": " ",
                "type": "Basics.Int"
            },
            {
                "name": "small",
                "comment": " ",
                "type": "Element.WithContext.Attr (R10.Context.ContextInternal z) decorative msg"
            },
            {
                "name": "xlarge",
                "comment": " ",
                "type": "Element.WithContext.Attr (R10.Context.ContextInternal z) decorative msg"
            },
            {
                "name": "xsmall",
                "comment": " ",
                "type": "Element.WithContext.Attr (R10.Context.ContextInternal z) decorative msg"
            },
            {
                "name": "xxlarge",
                "comment": " ",
                "type": "Element.WithContext.Attr (R10.Context.ContextInternal z) decorative msg"
            },
            {
                "name": "xxsmall",
                "comment": " ",
                "type": "Element.WithContext.Attr (R10.Context.ContextInternal z) decorative msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Footer",
        "comment": " Generic footer.\n\nBe aware that this component depends on the `Header` component for historical and logical reasons.\n\n@docs view\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "view",
                "comment": " ",
                "type": "R10.Header.Header -> R10.Header.ViewArgs z msg route -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Form",
        "comment": " Useful things to build a form.\n\n\n# Form\n\nA form is defined by the **configuration** (`R10.Form.Conf`) that contain data about the input fields, radio buttons, etc. and the **state** (`R10.Form.State`), containing instead all the values and other parameters that change during the life of the form.\n\n    type alias Form =\n        { conf : R10.Form.Conf\n        , state : R10.Form.State\n        }\n\n@docs Form\n\n\n# Views\n\nThere are four functions to render a `Form`, each with a different degree of customization. They are order from the simplest (less customizable) to the most complex (more customizable).\n\n@docs view, viewWithTheme, viewWithPalette, viewWithOptions, Options\n\n\n# Messages\n\n@docs Msg, MsgMapper\n\n\n## Messages helpers\n\n@docs isChangingValues, isFormSubmittable, isFormSubmittableAndSubmitted, msg\n\n\n# State\n\n`State` is the equivalent of the `Model` in a TEA structure.\n\nIt contains the values and the other things that ususally change while the user is interacting with the form.\n\n@docs State, initState, initStateWithDefaults, stateToString, stringToState\n\n\n# Update\n\nThis is the `update` function to wire the form in your existing `TEA` structure.\n\nIt consider the `State` of the form as the `Model` in a standard `TEA` structure, as usually is the `State` that change while the user interact with the form.\n\nBut, differently from the standard `TEA`, the view function of this form library also require the configuration of the form.\n\nThis means that if you want to go crazy and also change the configuration, you can do it. For example you could change the validations on the flight while user is changing a value. Or you can add new input fields, etc. See [`fieldConfigConcatMap`](#fieldConfigConcatMap) for this type of usage.\n\n@docs update\n\n\n# Configuration and Entities\n\n\n## Configuration\n\n@docs Conf, initConf, confToString, stringToConf, changeFieldConf\n\n\n## Entities\n\n@docs Entity, entity, EntityId, TextConf\n\n\n# Fields Configuration and State\n\nSingular fields, similarly to forms, have their own Configuration and State.\n\n@docs FieldConf, initFieldConf, FieldState, initFieldState\n\n\n# Key\n\n@docs Key, KeyAsString, keyToString, stringToKey, composeKey, listToKey, headId, emptyKey\n\n\n# Helpers\n\n**Get**\n\n@docs updateField, getField, getFieldValue, getFieldValueIgnoringPath, getFieldValueAsBool, getActiveTab, getMultiActiveKeys\n\n**Set**\n\n@docs setFieldValue, setActiveTab, setMultiplicableQuantities, setFieldDisabled\n\n**Others**\n\n@docs stringToBool, boolToString, commonRegularExpression, msgToValue, stateToValue\n\n\n# Form Components\n\n@docs viewIconButton, ArgsIconButton, viewButton, ArgsButton, viewText, processValue, TextArgs, ArgsText, viewBinary, ArgsBinary\n\n\n# Style\n\n@docs Style, style, defaultStyle, styleToString, stringToStyle\n\n\n# Button\n\n@docs Button, button\n\n\n# CSS, Colors Palette\n\n@docs themeToPalette, label, extraCssComponents, extraCss, colorToCssString\n\n\n# Events\n\n@docs onClickWithStopPropagation, onFocusOut, onLoseFocus, onValueChange, onOptionSelect\n\n\n# Markdown\n\n@docs elementMarkdown\n\n\n# Translator\n\nIf you want to personalise the translations or you want to translate them in different languages, you can do so defining a function like\n\n    translator : Key -> ValidationCode -> String\n    translator key validationCode =\n        Dict.fromList\n            [ ( validationCodes.emailFormatInvalid\n              , \"Invalid email format\"\n              )\n            , ( validationCodes.emailFormatValid\n              , \"Valid email format\"\n              )\n            ...\n            , ( validationCodes.oneOf\n              , \"All of the validations have failed\"\n              )\n            ]\n            |> Dict.get validationCode\n            |> Maybe.withDefault validationCode\n\n@docs Translator, defaultTranslator, validationCodes\n\n\n# Single Field\n\n@docs SingleModel, SingleMsg, SingleFieldOption, defaultSearchFn, initSingle, normalizeString, insertBold, defaultToOptionEl, defaultTrailingIcon, singleMsg, updateSingle\n\n\n### Views\n\n@docs viewSingle, ArgsSingle, viewSingleCustom, ArgsSingleCustom\n\n\n# Validation\n\n@docs validate, validation, Validation, ValidationCode, ValidationSpecs, ValidationForView, ValidationMessage, validateDirtyFormFields, validateEntireForm, validationMessage, validationToString, shouldShowTheValidationOverview, allValidationKeysMaker, runOnlyExistingValidations, commonValidation, clearFieldValidation, componentValidation, initValidationSpecs, isExistingFormFieldsValid, setFieldValidationError, entitiesValidationOutcomes, isRegexValidation, entitiesWithErrors\n\n\n# Advanced usage\n\n@docs fieldConfigConcatMap, fieldConfigMap\n\n\n# Others\n\n@docs handleWithPatternChange, errorsFromApiToValidationForView, validationForViewToErrorMessages\n\n",
        "unions": [],
        "aliases": [
            {
                "name": "ArgsBinary",
                "comment": " ",
                "args": [
                    "msg"
                ],
                "type": "R10.FormComponents.Internal.Binary.Args msg"
            },
            {
                "name": "ArgsButton",
                "comment": " ",
                "args": [
                    "z",
                    "msg"
                ],
                "type": "R10.FormComponents.Internal.Button.Args z msg"
            },
            {
                "name": "ArgsIconButton",
                "comment": " ",
                "args": [
                    "z",
                    "msg"
                ],
                "type": "{ icon : Element.WithContext.Element (R10.Context.ContextInternal z) msg, msgOnClick : Maybe.Maybe msg, palette : R10.Palette.Palette, size : Basics.Int }"
            },
            {
                "name": "ArgsSingle",
                "comment": " ",
                "args": [
                    "msg"
                ],
                "type": "R10.FormComponents.Internal.Single.Args msg"
            },
            {
                "name": "ArgsSingleCustom",
                "comment": " ",
                "args": [
                    "z",
                    "msg"
                ],
                "type": "R10.FormComponents.Internal.Single.ArgsCustom z msg"
            },
            {
                "name": "ArgsText",
                "comment": " ",
                "args": [
                    "z",
                    "msg"
                ],
                "type": "R10.FormComponents.Internal.Text.Args z msg"
            },
            {
                "name": "Button",
                "comment": " ",
                "args": [],
                "type": "R10.FormComponents.Internal.Button.Button"
            },
            {
                "name": "Conf",
                "comment": " The configuration of a form (`Conf`) is simply defined as a list of entities (`List Entity`).\n",
                "args": [],
                "type": "R10.Form.Internal.Conf.Conf"
            },
            {
                "name": "Entity",
                "comment": " A form is made of multiple **entities**. An example of entity is an input field, a title, a subtitle, etc.\n",
                "args": [],
                "type": "R10.Form.Internal.Conf.Entity"
            },
            {
                "name": "EntityId",
                "comment": "\n\n    String\n\n",
                "args": [],
                "type": "R10.Form.Internal.Conf.EntityId"
            },
            {
                "name": "FieldConf",
                "comment": "\n\n    type alias FieldConf =\n        { id : FieldId\n        , idDom : Maybe String\n        , type_ : R10.FormTypes.FieldType\n        , label : String\n        , helperText : Maybe String\n        , requiredLabel : Maybe String\n        , validationSpecs : Maybe ValidationSpecs\n        }\n\n",
                "args": [],
                "type": "R10.Form.Internal.FieldConf.FieldConf"
            },
            {
                "name": "FieldState",
                "comment": "\n\n    type alias FieldState =\n        { lostFocusOneOrMoreTime : Bool\n        , value : String\n        , search : String\n        , select : String\n        , scroll : Float\n        , dirty : Bool\n        , disabled : Bool\n        , validation : Validation\n        , showPassword : Bool -- Used only for passwords\n        }\n\n",
                "args": [],
                "type": "R10.Form.Internal.FieldState.FieldState"
            },
            {
                "name": "Form",
                "comment": " ",
                "args": [],
                "type": "R10.Form.Internal.Shared.Form"
            },
            {
                "name": "Key",
                "comment": " `Key` is internally defined as a list of strings.\n\nThe form is rapresented internally as a tree and the `Key` is the path to reach a node.\n\n",
                "args": [],
                "type": "R10.Form.Internal.Key.Key"
            },
            {
                "name": "KeyAsString",
                "comment": " ",
                "args": [],
                "type": "R10.Form.Internal.Key.KeyAsString"
            },
            {
                "name": "Msg",
                "comment": " ",
                "args": [],
                "type": "R10.Form.Internal.Msg.Msg"
            },
            {
                "name": "MsgMapper",
                "comment": " This function required by all views is used to convert specific form messages (`Msg`) into generic messages (`msg`). Tipically you would define this function like this in your application:\n\n    type Msg\n        = MsgForm R10.Form.Internal.Msg\n\n`MsgForm` can now be used as `MsgMapper` that convert `R10.Form.Internal.Msg` into `Msg`.\n\nFor a code example have a look at this [simple form](https://github.com/rakutentech/r10/blob/master/examples/simpleForm/src/Main.elm).\n\n",
                "args": [
                    "msg"
                ],
                "type": "R10.Form.Msg -> msg"
            },
            {
                "name": "Options",
                "comment": " These are the options that you can use with `viewWithOptions`.\n",
                "args": [
                    "z"
                ],
                "type": "{ maker : Maybe.Maybe ({ key : R10.Form.Key, formState : R10.Form.State, translator : R10.Form.Translator, style : R10.Form.Style, palette : R10.Palette.Palette } -> R10.Form.Conf -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) R10.Form.Msg)), translator : Maybe.Maybe R10.Form.Translator, style : R10.Form.Style, palette : Maybe.Maybe R10.Palette.Palette }"
            },
            {
                "name": "SingleFieldOption",
                "comment": " ",
                "args": [],
                "type": "R10.FormComponents.Internal.Single.Common.FieldOption"
            },
            {
                "name": "SingleModel",
                "comment": " ",
                "args": [],
                "type": "R10.FormComponents.Internal.Single.Common.Model"
            },
            {
                "name": "SingleMsg",
                "comment": " ",
                "args": [],
                "type": "R10.FormComponents.Internal.Single.Common.Msg"
            },
            {
                "name": "State",
                "comment": " The state is defined as\n\n    type alias State =\n        { fieldsState : Dict KeyAsString FieldState\n        , multiplicableQuantities : Dict KeyAsString Int\n        , activeTabs : Dict KeyAsString String\n        , focused : Maybe KeyAsString\n        , active : Maybe KeyAsString\n        , removed : Set KeyAsString\n        , qtySubmitAttempted : QtySubmitAttempted\n        , changesSinceLastSubmissions : Bool\n        }\n\nWhere:\n\n  - `fieldState` is a dictionary containing the states of all fields.\n  - `multiplicableQuantities` is a dictionary containin the quantity of a _multiplicable_ field. A _multiplicable_ field is a field that the user can clone to add extra information.\n  - `activeTabs` describe which tab is active in case tabs are used to group objects of the form.\n  - `focused` is the focused element of the form at the present moment.\n  - `active`... what is `active`?\n  - `removed` contains _multiplicable_ input fields that have been removed by the user.\n  - `qtySubmitAttempted` is the number of times that the user tried to submit the form.\n  - `changesSinceLastSubmissions` is `True` if the user changed something after the last for submission.\n\n",
                "args": [],
                "type": "R10.Form.Internal.State.State"
            },
            {
                "name": "Style",
                "comment": " ",
                "args": [],
                "type": "R10.FormComponents.Internal.Style.Style"
            },
            {
                "name": "TextArgs",
                "comment": " ",
                "args": [
                    "z",
                    "msg"
                ],
                "type": "R10.FormComponents.Internal.Text.Args z msg"
            },
            {
                "name": "TextConf",
                "comment": "\n\n    type alias TextConf =\n        { title : String\n        , helperText : Maybe String\n        , validationSpecs : Maybe ValidationSpecs\n        }\n\n",
                "args": [],
                "type": "R10.Form.Internal.Conf.TextConf"
            },
            {
                "name": "Translator",
                "comment": " ",
                "args": [],
                "type": "R10.Form.Internal.Translator.Translator"
            },
            {
                "name": "Validation",
                "comment": " ",
                "args": [],
                "type": "R10.Form.Internal.FieldConf.Validation"
            },
            {
                "name": "ValidationCode",
                "comment": " Just a `String`\n",
                "args": [],
                "type": "R10.Form.Internal.FieldConf.ValidationCode"
            },
            {
                "name": "ValidationForView",
                "comment": " ",
                "args": [],
                "type": "R10.FormComponents.Internal.Validations.ValidationForView"
            },
            {
                "name": "ValidationMessage",
                "comment": " ",
                "args": [],
                "type": "R10.Form.Internal.FieldConf.ValidationMessage"
            },
            {
                "name": "ValidationSpecs",
                "comment": " ",
                "args": [],
                "type": "R10.Form.Internal.FieldConf.ValidationSpecs"
            }
        ],
        "values": [
            {
                "name": "allValidationKeysMaker",
                "comment": " ",
                "type": "R10.Form.Form -> List.List ( R10.Form.Key, R10.FormTypes.FieldType, Maybe.Maybe R10.Form.ValidationSpecs )"
            },
            {
                "name": "boolToString",
                "comment": " ",
                "type": "Basics.Bool -> String.String"
            },
            {
                "name": "button",
                "comment": " ",
                "type": "{ contained : R10.Form.Button, outlined : R10.Form.Button, text : R10.Form.Button, icon : R10.Form.Button }"
            },
            {
                "name": "changeFieldConf",
                "comment": " ",
                "type": "(R10.Form.FieldConf -> R10.Form.FieldConf) -> R10.Form.Entity -> R10.Form.Entity"
            },
            {
                "name": "clearFieldValidation",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> R10.Form.State -> R10.Form.State"
            },
            {
                "name": "colorToCssString",
                "comment": " ",
                "type": "Element.WithContext.Color -> String.String"
            },
            {
                "name": "commonRegularExpression",
                "comment": " ",
                "type": "{ alpha : String.String, alphaNumeric : String.String, alphaNumericDash : String.String, alphaNumericDashSpace : String.String, phoneNumber : String.String, email : String.String, numeric : String.String, integer : String.String, decimal : String.String, url : String.String, hexColor : String.String }"
            },
            {
                "name": "commonValidation",
                "comment": " ",
                "type": "{ alphaNumericDash : R10.Form.Validation, alphaNumericDashSpace : R10.Form.Validation, email : R10.Form.Validation, hexColor : R10.Form.Validation, numeric : R10.Form.Validation, password : R10.Form.Validation, phoneNumber : R10.Form.Validation, url : R10.Form.Validation }"
            },
            {
                "name": "componentValidation",
                "comment": " ",
                "type": "{ pretendIsNotYetValidated : R10.Form.ValidationForView, validated : List.List R10.FormComponents.Internal.Validations.ValidationMessage -> R10.Form.ValidationForView }"
            },
            {
                "name": "composeKey",
                "comment": " ",
                "type": "R10.Form.Key -> String.String -> R10.Form.Key"
            },
            {
                "name": "confToString",
                "comment": " ",
                "type": "R10.Form.Conf -> String.String"
            },
            {
                "name": "defaultSearchFn",
                "comment": " ",
                "type": "String.String -> R10.Form.SingleFieldOption -> Basics.Bool"
            },
            {
                "name": "defaultStyle",
                "comment": " ",
                "type": "R10.Form.Style"
            },
            {
                "name": "defaultToOptionEl",
                "comment": " ",
                "type": "{ a | msgOnSelect : String.String -> msg, search : String.String } -> R10.Form.SingleFieldOption -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "defaultTrailingIcon",
                "comment": " ",
                "type": "{ a | opened : Basics.Bool, palette : R10.Palette.Palette } -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "defaultTranslator",
                "comment": " ",
                "type": "R10.Form.Translator"
            },
            {
                "name": "elementMarkdown",
                "comment": " ",
                "type": "String.String -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg)"
            },
            {
                "name": "emptyKey",
                "comment": " ",
                "type": "R10.Form.Key"
            },
            {
                "name": "entitiesValidationOutcomes",
                "comment": " ",
                "type": "R10.Form.Form -> Maybe.Maybe R10.Form.Translator -> List.List ( R10.Form.Key, R10.FormTypes.FieldType, R10.Form.ValidationForView )"
            },
            {
                "name": "entitiesWithErrors",
                "comment": " ",
                "type": "R10.Form.Form -> List.List ( R10.Form.Key, R10.FormTypes.FieldType, Maybe.Maybe R10.Form.ValidationSpecs )"
            },
            {
                "name": "entity",
                "comment": " These are entities constructors\n",
                "type": "{ field : R10.Form.FieldConf -> R10.Form.Entity, multi : R10.Form.EntityId -> List.List R10.Form.Entity -> R10.Form.Entity, normal : R10.Form.EntityId -> List.List R10.Form.Entity -> R10.Form.Entity, subTitle : R10.Form.EntityId -> R10.Form.TextConf -> R10.Form.Entity, title : R10.Form.EntityId -> R10.Form.TextConf -> R10.Form.Entity, withBorder : R10.Form.EntityId -> List.List R10.Form.Entity -> R10.Form.Entity, withTabs : R10.Form.EntityId -> List.List ( String.String, R10.Form.Entity ) -> R10.Form.Entity, wrappable : R10.Form.EntityId -> List.List R10.Form.Entity -> R10.Form.Entity }"
            },
            {
                "name": "errorsFromApiToValidationForView",
                "comment": " ",
                "type": "R10.Form.Translator -> List.List { a | field : String.String, reasonCode : String.String } -> List.List ( R10.Form.Key, R10.Form.ValidationForView )"
            },
            {
                "name": "extraCss",
                "comment": " ",
                "type": "Maybe.Maybe R10.Palette.Palette -> String.String"
            },
            {
                "name": "extraCssComponents",
                "comment": " ",
                "type": "R10.Palette.Palette -> String.String"
            },
            {
                "name": "fieldConfigConcatMap",
                "comment": " Utility that can be used to change the configuration of a form on the fly. It can be useful if certain state value of the form can influence some of the validation of the form itself.\n\nFor example a Japanese address field can require to have at least one digit in it (called \"Banchi\", a building number). But some address may be missing this number so we give the user to opt-out from a building number requirement if the click on a check box.\n\n",
                "type": "(R10.Form.FieldConf -> List.List R10.Form.FieldConf) -> R10.Form.Conf -> R10.Form.Conf"
            },
            {
                "name": "fieldConfigMap",
                "comment": " Utility that can be used to iterate through the entire form configuration and returns a list of results\n",
                "type": "(R10.Form.FieldConf -> a) -> R10.Form.Conf -> List.List a"
            },
            {
                "name": "getActiveTab",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> R10.Form.State -> Maybe.Maybe String.String"
            },
            {
                "name": "getField",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> R10.Form.State -> Maybe.Maybe R10.Form.FieldState"
            },
            {
                "name": "getFieldValue",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> R10.Form.State -> Maybe.Maybe String.String"
            },
            {
                "name": "getFieldValueAsBool",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> R10.Form.State -> Maybe.Maybe Basics.Bool"
            },
            {
                "name": "getFieldValueIgnoringPath",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> R10.Form.State -> Maybe.Maybe String.String"
            },
            {
                "name": "getMultiActiveKeys",
                "comment": " ",
                "type": "R10.Form.Key -> R10.Form.State -> List.List R10.Form.Key"
            },
            {
                "name": "handleWithPatternChange",
                "comment": " ",
                "type": "{ pattern : String.String, oldValue : String.String, newValue : String.String } -> String.String"
            },
            {
                "name": "headId",
                "comment": " ",
                "type": "R10.Form.Key -> String.String"
            },
            {
                "name": "initConf",
                "comment": " ",
                "type": "R10.Form.Conf"
            },
            {
                "name": "initFieldConf",
                "comment": " ",
                "type": "R10.Form.FieldConf"
            },
            {
                "name": "initFieldState",
                "comment": " ",
                "type": "R10.Form.FieldState"
            },
            {
                "name": "initSingle",
                "comment": " ",
                "type": "R10.Form.SingleModel"
            },
            {
                "name": "initState",
                "comment": " ",
                "type": "R10.Form.State"
            },
            {
                "name": "initStateWithDefaults",
                "comment": " ",
                "type": "R10.Form.Conf -> Maybe.Maybe R10.Country.Country -> R10.Form.State"
            },
            {
                "name": "initValidationSpecs",
                "comment": " ",
                "type": "R10.Form.ValidationSpecs"
            },
            {
                "name": "insertBold",
                "comment": " ",
                "type": "List.List Basics.Int -> String.String -> String.String"
            },
            {
                "name": "isChangingValues",
                "comment": " Return true if the message can potentially change some value\n",
                "type": "R10.Form.Msg -> Basics.Bool"
            },
            {
                "name": "isExistingFormFieldsValid",
                "comment": " ",
                "type": "R10.Form.Form -> Basics.Bool"
            },
            {
                "name": "isFormSubmittable",
                "comment": " This function return `True` in one of these two cases\n\n  - The form has never been submitted. This because we want to show an active \"Submit\" button to the user the first time they load the form.\n  - The has been an attempt to submit the form that failed because some data didn't pass the validation. Then the data was fixed so the form can now be submitted.\n\nThis function is normally used to disble or not the submit button.\n\n",
                "type": "R10.Form.Form -> Basics.Bool"
            },
            {
                "name": "isFormSubmittableAndSubmitted",
                "comment": " This function can be used to do some processing before the form get submitted.\n\nIt returns `True` when the form is submittable and the message is `Submit`. To be used in the `update` function.\n\n",
                "type": "R10.Form.Form -> R10.Form.Msg -> Basics.Bool"
            },
            {
                "name": "isRegexValidation",
                "comment": " ",
                "type": "R10.Form.Validation -> Basics.Bool"
            },
            {
                "name": "keyToString",
                "comment": " ",
                "type": "R10.Form.Key -> R10.Form.KeyAsString"
            },
            {
                "name": "label",
                "comment": " ",
                "type": "R10.Palette.Palette -> Element.WithContext.Color"
            },
            {
                "name": "listToKey",
                "comment": " ",
                "type": "List.List String.String -> R10.Form.Key"
            },
            {
                "name": "msg",
                "comment": " ",
                "type": "{ submit : R10.Form.Conf -> R10.Form.Msg, getFocus : R10.Form.Key -> R10.Form.FieldConf -> R10.Form.Msg }"
            },
            {
                "name": "msgToValue",
                "comment": " ",
                "type": "R10.Form.Msg -> Maybe.Maybe String.String"
            },
            {
                "name": "normalizeString",
                "comment": " ",
                "type": "String.String -> String.String"
            },
            {
                "name": "onClickWithStopPropagation",
                "comment": " ",
                "type": "msg -> Element.WithContext.Attribute (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "onFocusOut",
                "comment": " ",
                "type": "String.String -> msg -> Json.Decode.Decoder msg"
            },
            {
                "name": "onLoseFocus",
                "comment": " ",
                "type": "(R10.Form.Key -> R10.Form.FieldConf -> a) -> R10.Form.Msg -> Maybe.Maybe a"
            },
            {
                "name": "onOptionSelect",
                "comment": " ",
                "type": "(R10.Form.Key -> R10.Form.FieldConf -> R10.Form.Conf -> String.String -> a) -> R10.Form.Msg -> Maybe.Maybe a"
            },
            {
                "name": "onValueChange",
                "comment": " ",
                "type": "(R10.Form.Key -> R10.Form.FieldConf -> R10.Form.Conf -> String.String -> a) -> R10.Form.Msg -> Maybe.Maybe a"
            },
            {
                "name": "processValue",
                "comment": " ",
                "type": "{ pattern : String.String, previousValue : String.String, value : String.String } -> String.String"
            },
            {
                "name": "runOnlyExistingValidations",
                "comment": " ",
                "type": "(String.String -> String.String -> String.String) -> List.List ( R10.Form.Key, R10.FormTypes.FieldType, Maybe.Maybe R10.Form.ValidationSpecs ) -> R10.Form.State -> Dict.Dict R10.Form.KeyAsString R10.Form.FieldState -> Dict.Dict R10.Form.KeyAsString R10.Form.FieldState"
            },
            {
                "name": "setActiveTab",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> String.String -> R10.Form.State -> R10.Form.State"
            },
            {
                "name": "setFieldDisabled",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> Basics.Bool -> R10.Form.State -> R10.Form.State"
            },
            {
                "name": "setFieldValidationError",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> String.String -> R10.Form.State -> R10.Form.State"
            },
            {
                "name": "setFieldValue",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> String.String -> R10.Form.State -> R10.Form.State"
            },
            {
                "name": "setMultiplicableQuantities",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> Basics.Int -> R10.Form.State -> R10.Form.State"
            },
            {
                "name": "shouldShowTheValidationOverview",
                "comment": " ",
                "type": "R10.Form.State -> Basics.Bool"
            },
            {
                "name": "singleMsg",
                "comment": " ",
                "type": "{ onOptionSelect : String.String -> R10.Form.SingleMsg }"
            },
            {
                "name": "stateToString",
                "comment": " This can be useful to store the state of a form to the Local Storage, for example. Then, using `stringToState` is possible to restore all the values of a form or keep the form sync'ed on different tabs.\n",
                "type": "R10.Form.State -> String.String"
            },
            {
                "name": "stateToValue",
                "comment": " ",
                "type": "R10.Form.State -> Json.Encode.Value"
            },
            {
                "name": "stringToBool",
                "comment": " ",
                "type": "String.String -> Basics.Bool"
            },
            {
                "name": "stringToConf",
                "comment": " ",
                "type": "String.String -> Result.Result Json.Decode.Error R10.Form.Conf"
            },
            {
                "name": "stringToKey",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> R10.Form.Key"
            },
            {
                "name": "stringToState",
                "comment": " ",
                "type": "String.String -> Result.Result Json.Decode.Error R10.Form.State"
            },
            {
                "name": "stringToStyle",
                "comment": " ",
                "type": "String.String -> R10.Form.Style"
            },
            {
                "name": "style",
                "comment": " ",
                "type": "{ fixedLabels : R10.Form.Style, floatingLabels : R10.Form.Style }"
            },
            {
                "name": "styleToString",
                "comment": " ",
                "type": "R10.Form.Style -> String.String"
            },
            {
                "name": "themeToPalette",
                "comment": " ",
                "type": "R10.Theme.Theme -> R10.Palette.Palette"
            },
            {
                "name": "update",
                "comment": " ",
                "type": "(String.String -> String.String -> String.String) -> R10.Form.Msg -> R10.Form.State -> ( R10.Form.State, Platform.Cmd.Cmd R10.Form.Msg )"
            },
            {
                "name": "updateField",
                "comment": " ",
                "type": "R10.Form.KeyAsString -> (R10.Form.FieldState -> R10.Form.FieldState) -> R10.Form.State -> R10.Form.State"
            },
            {
                "name": "updateSingle",
                "comment": " ",
                "type": "R10.Form.SingleMsg -> R10.Form.SingleModel -> ( R10.Form.SingleModel, Platform.Cmd.Cmd R10.Form.SingleMsg )"
            },
            {
                "name": "validate",
                "comment": " ",
                "type": "{ formStateBeforeValidationFixer : String.String -> String.String -> String.String, showAlsoPassedValidation : Basics.Bool, key : R10.Form.Internal.Key.Key, fieldType : R10.FormTypes.FieldType, maybeValidationSpec : Maybe.Maybe R10.Form.Internal.FieldConf.ValidationSpecs, formState : R10.Form.Internal.State.State } -> R10.Form.FieldState -> R10.Form.FieldState"
            },
            {
                "name": "validateDirtyFormFields",
                "comment": " ",
                "type": "(String.String -> String.String -> String.String) -> R10.Form.Form -> R10.Form.State"
            },
            {
                "name": "validateEntireForm",
                "comment": " ",
                "type": "(String.String -> String.String -> String.String) -> R10.Form.Form -> R10.Form.State"
            },
            {
                "name": "validation",
                "comment": " ",
                "type": "{ allOf : List.List R10.Form.Validation -> R10.Form.Validation, dependant : R10.Form.KeyAsString -> R10.Form.Validation -> R10.Form.Validation, equal : R10.Form.KeyAsString -> R10.Form.Validation, maxLength : Basics.Int -> R10.Form.Validation, minLength : Basics.Int -> R10.Form.Validation, noValidation : R10.Form.Validation, oneOf : List.List R10.Form.Validation -> R10.Form.Validation, regex : String.String -> R10.Form.Validation, required : R10.Form.Validation, withMsg : R10.Form.ValidationMessage -> R10.Form.Validation -> R10.Form.Validation, empty : R10.Form.Validation, not : R10.Form.Validation -> R10.Form.Validation, dateRange : R10.Form.Range -> R10.Form.Validation }"
            },
            {
                "name": "validationCodes",
                "comment": " ",
                "type": "{ emailFormatInvalid : R10.Form.ValidationCode, emailFormatValid : R10.Form.ValidationCode, equalInvalid : R10.Form.ValidationCode, formatInvalid : R10.Form.ValidationCode, formatInvalidCharactersInvalid : R10.Form.ValidationCode, formatNoNumberInvalid : R10.Form.ValidationCode, formatNoSpecialCharactersInvalid : R10.Form.ValidationCode, formatNoUppercaseInvalid : R10.Form.ValidationCode, formatValid : R10.Form.ValidationCode, hexColorFormatInvalid : R10.Form.ValidationCode, jsonFormatInvalid : R10.Form.ValidationCode, lengthTooLargeInvalid : R10.Form.ValidationCode, lengthTooSmallInvalid : R10.Form.ValidationCode, lengthExactInvalid : R10.Form.ValidationCode, lengthValid : R10.Form.ValidationCode, required : R10.Form.ValidationCode, empty : R10.Form.ValidationCode, requiredField : R10.Form.ValidationCode, somethingWrong : R10.Form.ValidationCode, valueInvalid : R10.Form.ValidationCode, allOf : R10.Form.ValidationCode, oneOf : R10.Form.ValidationCode, mobileEmailFormatInvalid : R10.Form.ValidationCode, mobileEmailDomainInvalid : R10.Form.ValidationCode }"
            },
            {
                "name": "validationForViewToErrorMessages",
                "comment": " ",
                "type": "List.List ( R10.Form.Key, R10.Form.ValidationForView ) -> List.List String.String"
            },
            {
                "name": "validationMessage",
                "comment": " ",
                "type": "{ error : String.String -> R10.FormComponents.Internal.Validations.ValidationMessage, ok : String.String -> R10.FormComponents.Internal.Validations.ValidationMessage }"
            },
            {
                "name": "validationToString",
                "comment": " ",
                "type": "R10.Form.ValidationForView -> String.String"
            },
            {
                "name": "view",
                "comment": " This is the simplest way to render a form, as you can see in this minimalistic example:\n\n    module Main exposing (main)\n\n    import Element.WithContext exposing (..)\n    import Html\n    import R10.Form\n    import R10.FormTypes\n\n    formModel : R10.Form.Form\n    formModel =\n        { conf =\n            [ R10.Form.entity.field\n                { id = \"email\"\n                , idDom = Nothing\n                , type_ = R10.FormTypes.TypeText R10.FormTypes.TextEmail\n                , label = \"Email\"\n                , helperText = Just \"My first form\"\n                , requiredLabel = Nothing\n                , validationSpecs = Nothing\n                }\n            ]\n        , state = R10.Form.initState\n        }\n\n    formMsgMapper : R10.Form.MsgMapper ()\n    formMsgMapper =\n        \\_ -> ()\n\n    main : Html.Html ()\n    main =\n        layout [] <|\n            column [ centerX, centerY ] <|\n                R10.Form.view formModel formMsgMapper\n\nNote that the form of this example is not active because it is just rendering the view but it is not wired to The Elm Architecture. If interested, look at the code of an [active form example](https://github.com/rakutentech/r10/blob/master/examples/simpleForm/src/Main.elm).\n\n",
                "type": "R10.Form.Form -> R10.Form.MsgMapper msg -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg)"
            },
            {
                "name": "viewBinary",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> R10.Form.ArgsBinary msg -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "viewButton",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> R10.Form.ArgsButton z msg -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "viewIconButton",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> R10.Form.ArgsIconButton z msg -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "viewSingle",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> R10.Form.SingleModel -> R10.Form.ArgsSingle msg -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "viewSingleCustom",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> R10.Form.SingleModel -> R10.Form.ArgsSingleCustom z msg -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "viewText",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> R10.Form.ArgsText z msg -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "viewWithOptions",
                "comment": " Use this version for full control.\n",
                "type": "R10.Form.Form -> R10.Form.MsgMapper msg -> R10.Form.Options z -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg)"
            },
            {
                "name": "viewWithPalette",
                "comment": " Use this version if you have a specific palette that you want to use.\n",
                "type": "R10.Form.Form -> R10.Form.MsgMapper msg -> R10.Palette.Palette -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg)"
            },
            {
                "name": "viewWithTheme",
                "comment": " Use this version if you have `R10.Theme.Theme`.\n",
                "type": "R10.Form.Form -> R10.Form.MsgMapper msg -> R10.Theme.Theme -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg)"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.FormDebug",
        "comment": " Only used for form debugging\n\n@docs textTypeMetaData, binaryTypeMetaData, singleTypeMetaData\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "binaryTypeMetaData",
                "comment": " ",
                "type": "R10.FormTypes.TypeBinary -> { next : R10.FormTypes.TypeBinary, string : String.String }"
            },
            {
                "name": "singleTypeMetaData",
                "comment": " ",
                "type": "R10.FormTypes.TypeSingle -> { next : R10.FormTypes.TypeSingle, string : String.String }"
            },
            {
                "name": "textTypeMetaData",
                "comment": " ",
                "type": "R10.FormTypes.TypeText -> { next : R10.FormTypes.TypeText, string : String.String }"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.FormTypes",
        "comment": " Types for Forms\n\n@docs TypeText, TypeBinary, TypeMulti, TypeSingle, TypeSpecial\n\n@docs FieldType, FieldOption\n\n@docs inputField\n\n@docs ValidationIcon\n\n@docs Palette\n\n",
        "unions": [
            {
                "name": "FieldType",
                "comment": " ",
                "args": [],
                "cases": [
                    [
                        "TypeText",
                        [
                            "R10.FormTypes.TypeText"
                        ]
                    ],
                    [
                        "TypeSingle",
                        [
                            "R10.FormTypes.TypeSingle",
                            "List.List R10.FormTypes.FieldOption"
                        ]
                    ],
                    [
                        "TypeMulti",
                        [
                            "R10.FormTypes.TypeMulti",
                            "List.List R10.FormTypes.FieldOption"
                        ]
                    ],
                    [
                        "TypeBinary",
                        [
                            "R10.FormTypes.TypeBinary"
                        ]
                    ],
                    [
                        "TypeSpecial",
                        [
                            "R10.FormTypes.TypeSpecial"
                        ]
                    ]
                ]
            },
            {
                "name": "TypeBinary",
                "comment": " Possible types of **Binary** input fields\n",
                "args": [],
                "cases": [
                    [
                        "BinaryCheckbox",
                        []
                    ],
                    [
                        "BinarySwitch",
                        []
                    ]
                ]
            },
            {
                "name": "TypeMulti",
                "comment": " Possible types of **Multi** input fields\n",
                "args": [],
                "cases": [
                    [
                        "MultiCombobox",
                        []
                    ]
                ]
            },
            {
                "name": "TypeSingle",
                "comment": " Possible types of **Single** input fields\n",
                "args": [],
                "cases": [
                    [
                        "SingleRadio",
                        []
                    ],
                    [
                        "SingleRadioRow",
                        []
                    ],
                    [
                        "SingleCombobox",
                        []
                    ],
                    [
                        "SingleComboboxForCountry",
                        []
                    ],
                    [
                        "SingleSelect",
                        []
                    ]
                ]
            },
            {
                "name": "TypeSpecial",
                "comment": " Possible types of **Special** input fields\n",
                "args": [],
                "cases": [
                    [
                        "SpecialPhone",
                        [
                            "{ disableInternationalPrefixPhoneChange : Basics.Bool, isJapanService : Basics.Bool }"
                        ]
                    ]
                ]
            },
            {
                "name": "TypeText",
                "comment": " Possible types of **Text** input fields\n",
                "args": [],
                "cases": [
                    [
                        "TextPlain",
                        []
                    ],
                    [
                        "TextEmail",
                        []
                    ],
                    [
                        "TextEmailWithSuggestions",
                        [
                            "List.List String.String"
                        ]
                    ],
                    [
                        "TextMobileEmail",
                        []
                    ],
                    [
                        "TextUsername",
                        []
                    ],
                    [
                        "TextUsernameWithUseEmailCheckbox",
                        [
                            "String.String"
                        ]
                    ],
                    [
                        "TextPasswordNew",
                        [
                            "String.String"
                        ]
                    ],
                    [
                        "TextPasswordCurrent",
                        [
                            "String.String"
                        ]
                    ],
                    [
                        "TextMultiline",
                        []
                    ],
                    [
                        "TextWithPattern",
                        [
                            "String.String"
                        ]
                    ],
                    [
                        "TextWithPatternLarge",
                        [
                            "String.String"
                        ]
                    ],
                    [
                        "TextWithPatternLargeWithoutLabel",
                        [
                            "String.String"
                        ]
                    ],
                    [
                        "TextOnlyDigitsOrDash",
                        []
                    ]
                ]
            },
            {
                "name": "ValidationIcon",
                "comment": " ",
                "args": [],
                "cases": [
                    [
                        "NoIcon",
                        []
                    ],
                    [
                        "ClearOrCheck",
                        []
                    ],
                    [
                        "ErrorOrCheck",
                        []
                    ]
                ]
            }
        ],
        "aliases": [
            {
                "name": "FieldOption",
                "comment": " ",
                "args": [],
                "type": "{ value : String.String, label : String.String }"
            },
            {
                "name": "Palette",
                "comment": "\n\n    type alias Palette =\n        { primary : Color\n        , primaryVariant : Color\n        , success : Color\n        , error : Color\n\n        -- Text Colors\n        --\n        , onSurface : Color\n        , onPrimary : Color\n\n        -- Background Colors\n        --\n        , surface : Color\n        , background : Color\n        }\n\nNote that these are `Color` from `elm-ui`.\n\nSee <https://material.io/design/color/dark-theme.html#properties> for more details.\n\nIf you want to use the default palette, just pass `Nothing`\n\n",
                "args": [],
                "type": "{ primary : Color.Color, primaryVariant : Color.Color, success : Color.Color, error : Color.Color, border : Color.Color, onSurface : Color.Color, onPrimary : Color.Color, surface : Color.Color, background : Color.Color }"
            }
        ],
        "values": [
            {
                "name": "inputField",
                "comment": " ",
                "type": "{ binaryCheckbox : R10.FormTypes.FieldType, binarySwitch : R10.FormTypes.FieldType, multiCombobox : List.List R10.FormTypes.FieldOption -> R10.FormTypes.FieldType, singleCombobox : List.List R10.FormTypes.FieldOption -> R10.FormTypes.FieldType, singleSelect : List.List R10.FormTypes.FieldOption -> R10.FormTypes.FieldType, singleRadio : List.List R10.FormTypes.FieldOption -> R10.FormTypes.FieldType, singleRadioRow : List.List R10.FormTypes.FieldOption -> R10.FormTypes.FieldType, textEmail : R10.FormTypes.FieldType, textEmailWithSuggestions : List.List String.String -> R10.FormTypes.FieldType, textMobileEmail : R10.FormTypes.FieldType, textMultiline : R10.FormTypes.FieldType, textPasswordCurrent : String.String -> R10.FormTypes.FieldType, textPasswordNew : String.String -> R10.FormTypes.FieldType, textPlain : R10.FormTypes.FieldType, textUsername : R10.FormTypes.FieldType, textUsernameWithUseEmailCheckbox : String.String -> R10.FormTypes.FieldType, textWithPattern : String.String -> R10.FormTypes.FieldType }"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Header",
        "comment": " This create a generic header.\n\n@docs view, Header, LanguageSystem, Msg, Session, SessionData, ViewArgs, attrsLink, closeMenu, decodeSession, extraCss, getSession, init, languageMenu, urlLogin, logoutLink, menuSeparator, menuTitle, subscriptions, update, userExample, iconHamburger, cssHamburger\n\n",
        "unions": [
            {
                "name": "LanguageSystem",
                "comment": " ",
                "args": [
                    "route"
                ],
                "cases": [
                    [
                        "LanguageInRoute",
                        [
                            "{ routeToPath : R10.Language.Language -> route -> String.String, route : route, routeToLanguage : route -> R10.Language.Language }"
                        ]
                    ],
                    [
                        "LanguageInModel",
                        []
                    ]
                ]
            },
            {
                "name": "Msg",
                "comment": " ",
                "args": [],
                "cases": [
                    [
                        "ToggleSideMenu",
                        []
                    ],
                    [
                        "ToggleUserMenu",
                        []
                    ],
                    [
                        "Logout",
                        []
                    ],
                    [
                        "Login",
                        []
                    ],
                    [
                        "CloseUserMenu",
                        []
                    ],
                    [
                        "KeyDown",
                        [
                            "R10.Header.KeyPressed"
                        ]
                    ],
                    [
                        "Click",
                        [
                            "List.List String.String"
                        ]
                    ],
                    [
                        "GotSession",
                        [
                            "Result.Result Http.Error R10.Header.SessionData"
                        ]
                    ]
                ]
            },
            {
                "name": "Session",
                "comment": " ",
                "args": [],
                "cases": [
                    [
                        "SessionNotRequired",
                        []
                    ],
                    [
                        "SessionNotRequested",
                        []
                    ],
                    [
                        "SessionFetching",
                        []
                    ],
                    [
                        "SessionSuccess",
                        [
                            "R10.Header.SessionData"
                        ]
                    ],
                    [
                        "SessionError",
                        [
                            "Http.Error"
                        ]
                    ]
                ]
            }
        ],
        "aliases": [
            {
                "name": "Header",
                "comment": " ",
                "args": [],
                "type": "{ sideMenuOpen : Basics.Bool, userMenuOpen : Basics.Bool, maxWidth : Basics.Int, padding : Basics.Int, supportedLanguageList : List.List R10.Language.Language, urlLogin : String.String, urlLogout : String.String, session : R10.Header.Session, debuggingMode : Basics.Bool, backgroundColor : Maybe.Maybe Element.WithContext.Color }"
            },
            {
                "name": "SessionData",
                "comment": " ",
                "args": [],
                "type": "{ email : String.String, firstName : String.String, lastName : String.String }"
            },
            {
                "name": "ViewArgs",
                "comment": " ",
                "args": [
                    "z",
                    "msg",
                    "route"
                ],
                "type": "{ extraContent : List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg), extraContentRightSide : List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg), from : String.String, msgMapper : R10.Header.Msg -> msg, isTop : Basics.Bool, isMobile : Basics.Bool, onClick : String.String -> msg, urlTop : String.String, languageSystem : R10.Header.LanguageSystem route, logoOnDark : Element.WithContext.Element (R10.Context.ContextInternal z) msg, logoOnLight : Element.WithContext.Element (R10.Context.ContextInternal z) msg, darkHeader : Basics.Bool, theme : R10.Theme.Theme }"
            }
        ],
        "values": [
            {
                "name": "attrsLink",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg)"
            },
            {
                "name": "closeMenu",
                "comment": " ",
                "type": "R10.Header.Header -> R10.Header.Header"
            },
            {
                "name": "cssHamburger",
                "comment": " Styles for the Hamburger icon\n",
                "type": "String.String -> String.String"
            },
            {
                "name": "decodeSession",
                "comment": " ",
                "type": "Json.Decode.Decoder R10.Header.SessionData"
            },
            {
                "name": "extraCss",
                "comment": " ",
                "type": "String.String"
            },
            {
                "name": "getSession",
                "comment": " ",
                "type": "Basics.Float -> Platform.Cmd.Cmd R10.Header.Msg"
            },
            {
                "name": "iconHamburger",
                "comment": " ",
                "type": "{ isActive : Basics.Bool, onPress : msg } -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "init",
                "comment": " ",
                "type": "R10.Header.Header"
            },
            {
                "name": "languageMenu",
                "comment": " ",
                "type": "R10.Header.Header -> R10.Header.ViewArgs z msg route -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg)"
            },
            {
                "name": "logoutLink",
                "comment": " ",
                "type": "R10.Header.Header -> R10.Header.ViewArgs z msg route -> Element.WithContext.Element (R10.Context.ContextInternal z) R10.Header.Msg"
            },
            {
                "name": "menuSeparator",
                "comment": " ",
                "type": "List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg)"
            },
            {
                "name": "menuTitle",
                "comment": " ",
                "type": "List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg) -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "subscriptions",
                "comment": " ",
                "type": "R10.Header.Header -> (R10.Header.Msg -> msg) -> List.List (Platform.Sub.Sub msg)"
            },
            {
                "name": "update",
                "comment": " ",
                "type": "R10.Header.Msg -> R10.Header.Header -> R10.Header.Header"
            },
            {
                "name": "urlLogin",
                "comment": " ",
                "type": "R10.Header.Header -> R10.Header.ViewArgs z msg route -> Element.WithContext.Element (R10.Context.ContextInternal z) R10.Header.Msg"
            },
            {
                "name": "userExample",
                "comment": " ",
                "type": "{ email : String.String, firstName : String.String, lastName : String.String }"
            },
            {
                "name": "view",
                "comment": " ",
                "type": "R10.Header.Header -> R10.Header.ViewArgs z msg route -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.I18n",
        "comment": " Internationalization stuff\n\n@docs t, replace, text, paragraph, RenderingMode, paragraphFromString\n\n",
        "unions": [
            {
                "name": "RenderingMode",
                "comment": " ",
                "args": [],
                "cases": [
                    [
                        "Normal",
                        []
                    ],
                    [
                        "Error",
                        []
                    ]
                ]
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "paragraph",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> { renderingMode : R10.I18n.RenderingMode, tagReplacer : R10.Context.ContextInternal z -> String.String -> String.String, translation : R10.Language.Translations } -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "paragraphFromString",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> { renderingMode : R10.I18n.RenderingMode, tagReplacer : R10.Context.ContextInternal z -> String.String -> String.String, string : String.String, msgNoOp : Maybe.Maybe msg } -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "replace",
                "comment": " Utility for variable replacement in translation.\n\n\n    raw : String\n    raw =\n        \"Hello my name is '{firstName}, {lastName}'\"\n\n    result =\n        raw\n            |> R10.I18n.replace [ ( \"{firstName}\", \"foo\" ), ( \"{lastName}\", \"bar\" ) ]\n\n    -- result == \"Hello my name is 'foo, bar'\"\n\n",
                "type": "List.List ( String.String, String.String ) -> String.String -> String.String"
            },
            {
                "name": "t",
                "comment": " Translate some text\n",
                "type": "R10.Language.Language -> R10.Language.Translations -> String.String"
            },
            {
                "name": "text",
                "comment": " Shorthand to transform a translation into an `Element.text`\n",
                "type": "R10.Language.Translations -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Language",
        "comment": " Internationalization stuff\n\n\"Language\" is sometime also called \"Locale\". We call it \"Language\" as it seems more common to refer to it this way.\n\nAlso in Html these are called \"[lang](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang)\".\n\nSo we consider British English and American English as two different languages rather than two different locales of the same language.\n\n@docs Language, LanguageType, Translations, decodeJsonString, decoder, default, defaultSupportedLanguageList, list, listStringTolistLanguagesRemovingUnsupported, preferredLanguage, select, toStringLong, toString, toStringShort, urlParser, fromStringWithSupportedLanguages\n\n",
        "unions": [
            {
                "name": "Language",
                "comment": " ",
                "args": [],
                "cases": [
                    [
                        "Key",
                        []
                    ],
                    [
                        "Lollipop",
                        []
                    ],
                    [
                        "EN_US",
                        []
                    ],
                    [
                        "JA_JP",
                        []
                    ],
                    [
                        "ZH_TW",
                        []
                    ],
                    [
                        "ZH_CN",
                        []
                    ],
                    [
                        "ES_ES",
                        []
                    ],
                    [
                        "FR_FR",
                        []
                    ],
                    [
                        "DE_DE",
                        []
                    ],
                    [
                        "IT_IT",
                        []
                    ],
                    [
                        "UK_UA",
                        []
                    ],
                    [
                        "PT_PT",
                        []
                    ],
                    [
                        "NL_NL",
                        []
                    ]
                ]
            },
            {
                "name": "LanguageType",
                "comment": " ",
                "args": [],
                "cases": [
                    [
                        "International",
                        []
                    ],
                    [
                        "Localization",
                        []
                    ]
                ]
            }
        ],
        "aliases": [
            {
                "name": "Translations",
                "comment": " ",
                "args": [],
                "type": "{ key : String.String, en_us : String.String, ja_jp : String.String, zh_tw : String.String, es_es : String.String, fr_fr : String.String, de_de : String.String, zh_cn : String.String, it_it : String.String, uk_ua : String.String, pt_pt : String.String, nl_nl : String.String }"
            }
        ],
        "values": [
            {
                "name": "decodeJsonString",
                "comment": " ",
                "type": "List.List R10.Language.Language -> Json.Decode.Value -> Result.Result String.String R10.Language.Language"
            },
            {
                "name": "decoder",
                "comment": " ",
                "type": "List.List R10.Language.Language -> String.String -> Result.Result String.String R10.Language.Language"
            },
            {
                "name": "default",
                "comment": " ",
                "type": "R10.Language.Language"
            },
            {
                "name": "defaultSupportedLanguageList",
                "comment": " ",
                "type": "List.List R10.Language.Language"
            },
            {
                "name": "fromStringWithSupportedLanguages",
                "comment": " Parse Language from string (IETF format). It's case insensitive.\n\nParsing language from flags\n\n    Utils.I18n.Language.fromString \"zh-TW\" ===> Just ZH_TW\n\n    Utils.I18n.Language.fromString \"ZH-TW\" ===> Just ZH_TW\n\n    Utils.I18n.Language.fromString \"foo\" ===> Nothing\n\n",
                "type": "List.List R10.Language.Language -> String.String -> Maybe.Maybe R10.Language.Language"
            },
            {
                "name": "list",
                "comment": " ",
                "type": "List.List R10.Language.Language"
            },
            {
                "name": "listStringTolistLanguagesRemovingUnsupported",
                "comment": " ",
                "type": "List.List R10.Language.Language -> List.List String.String -> List.List R10.Language.Language"
            },
            {
                "name": "preferredLanguage",
                "comment": " ",
                "type": "{ supportedLanguages : List.List R10.Language.Language, navigatorLanguages : List.List String.String } -> Maybe.Maybe R10.Language.Language"
            },
            {
                "name": "select",
                "comment": " ",
                "type": "R10.Language.Language -> R10.Language.Translations -> String.String"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "R10.Language.Language -> String.String"
            },
            {
                "name": "toStringLong",
                "comment": " Convert Language to full language description\n\nExample to convert ZH\\_TW to translation in English and Traditional Chinese\n\n    toStringLong International ZH_TW ===> \"Taiwanese\"\n\n    toStringLong Localization ZH_TW ===> \"繁體中文\"\n\n",
                "type": "R10.Language.LanguageType -> R10.Language.Language -> String.String"
            },
            {
                "name": "toStringShort",
                "comment": " ",
                "type": "R10.Language.Language -> String.String"
            },
            {
                "name": "urlParser",
                "comment": " ",
                "type": "Url.Parser.Parser (R10.Language.Language -> b) b"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.LanguageSelector",
        "comment": " Dropdown for the language selector\n\n@docs view\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "view",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> { changeMsg : Result.Result String.String R10.Language.Language -> msg, colorBackground : Element.WithContext.Color, colorFont : Element.WithContext.Color, currentLanguage : R10.Language.Language, supportedLanguages : List.List R10.Language.Language, fontSize : Basics.Int } -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Libu",
        "comment": "\n\n    ██      ██ ██████  ██    ██\n    ██      ██ ██   ██ ██    ██\n    ██      ██ ██████  ██    ██\n    ██      ██ ██   ██ ██    ██\n    ███████ ██ ██████   ██████\n\nHi! I'm Libu, your new friend, half Link and half Button\n\nI am a super-entity that will take care of all your hypertext necessity\nas I will let user to go wherever they want.\n\n@docs view, Type\n\n",
        "unions": [
            {
                "name": "Type",
                "comment": " `LiNewTab` => A link that open in a new tab.\n\n`LiInternal` => A link that prevent the default behavior of the browser, to be used in SPA so that the browser doesn't refresh.\n\n`Li` => Just a link.\n\n`Bu` => Just a button.\n\n",
                "args": [
                    "msg"
                ],
                "cases": [
                    [
                        "LiNewTab",
                        [
                            "String.String"
                        ]
                    ],
                    [
                        "LiInternal",
                        [
                            "String.String",
                            "String.String -> msg"
                        ]
                    ],
                    [
                        "Li",
                        [
                            "String.String"
                        ]
                    ],
                    [
                        "Bu",
                        [
                            "Maybe.Maybe msg"
                        ]
                    ]
                ]
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "view",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> { type_ : R10.Libu.Type msg, label : Element.WithContext.Element (R10.Context.ContextInternal z) msg } -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Link",
        "comment": "\n\n@docs attrs, attrsUnderline\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "attrs",
                "comment": " Attributes for links, useful if you need to make some text to render as if it was a link.\n",
                "type": "List.List (Element.WithContext.Attr (R10.Context.ContextInternal z) () msg)"
            },
            {
                "name": "attrsUnderline",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attr (R10.Context.ContextInternal z) () msg)"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Mode",
        "comment": " Use `Mode` to determine if the application should be rendered with a `Light` or a `Dark` palette of colors.\n\n@docs Mode, decodeJsonString, decoderExploration, default, fromString, isLight, toString, toggle\n\n",
        "unions": [
            {
                "name": "Mode",
                "comment": " ",
                "args": [],
                "cases": [
                    [
                        "Dark",
                        []
                    ],
                    [
                        "Light",
                        []
                    ]
                ]
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "decodeJsonString",
                "comment": " ",
                "type": "Json.Decode.Value -> Result.Result Json.Decode.Error R10.Mode.Mode"
            },
            {
                "name": "decoderExploration",
                "comment": " ",
                "type": "Json.Decode.Exploration.Decoder R10.Mode.Mode"
            },
            {
                "name": "default",
                "comment": " ",
                "type": "R10.Mode.Mode"
            },
            {
                "name": "fromString",
                "comment": " ",
                "type": "String.String -> R10.Mode.Mode"
            },
            {
                "name": "isLight",
                "comment": " ",
                "type": "R10.Mode.Mode -> Basics.Bool"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "R10.Mode.Mode -> String.String"
            },
            {
                "name": "toggle",
                "comment": " ",
                "type": "R10.Mode.Mode -> R10.Mode.Mode"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Okaimonopanda",
        "comment": " Moving Okaimono Panda.\n\n![Okaimono Panda](https://r10.netlify.app/images/okaimonopanda.gif)\n\n@docs view\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "view",
                "comment": " ",
                "type": "{ c | mouse : { x : Basics.Int, y : Basics.Int }, screen : { x : Basics.Int, y : Basics.Int } } -> List.List (Html.Html msg)"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Paragraph",
        "comment": " Paraggraphs.\n\n@docs large, normal, small, xlarge, xxlarge, xsmall, xxsmall\n\n@docs normalMarkdown\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "large",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg) -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "normal",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg) -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "normalMarkdown",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> String.String -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "small",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg) -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "xlarge",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg) -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "xsmall",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg) -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "xxlarge",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg) -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "xxsmall",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg) -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.SimpleMarkdown",
        "comment": " Parser for seimplified markdown text.\n\n@docs MarkDown, elementMarkdown, elementMarkdownAdvanced, markdown, parseTextForLinks\n\n",
        "unions": [
            {
                "name": "MarkDown",
                "comment": " ",
                "args": [],
                "cases": [
                    [
                        "MarkDownText",
                        [
                            "String.String"
                        ]
                    ],
                    [
                        "MarkDownLink",
                        [
                            "String.String",
                            "String.String"
                        ]
                    ],
                    [
                        "MarkDownBold",
                        [
                            "String.String"
                        ]
                    ],
                    [
                        "MarkDownBreakLine",
                        []
                    ]
                ]
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "elementMarkdown",
                "comment": " ",
                "type": "String.String -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg)"
            },
            {
                "name": "elementMarkdownAdvanced",
                "comment": " ",
                "type": "{ link : List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) } -> String.String -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg)"
            },
            {
                "name": "markdown",
                "comment": " ",
                "type": "(String.String -> Element.WithContext.Element (R10.Context.ContextInternal z) msg) -> (String.String -> Element.WithContext.Element (R10.Context.ContextInternal z) msg) -> (String.String -> String.String -> Element.WithContext.Element (R10.Context.ContextInternal z) msg) -> String.String -> List.List (Element.WithContext.Element (R10.Context.ContextInternal z) msg)"
            },
            {
                "name": "parseTextForLinks",
                "comment": " ",
                "type": "String.String -> List.List R10.SimpleMarkdown.MarkDown"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Svg.Icons",
        "comment": "\n\n@docs arrow_down_l, arrow_left_l, arrow_link_l, arrow_right_l, arrow_up_l, barcode_f, barcode_l, blockquote_left, blockquote_right, browsing_history_f, browsing_history_l, building_f, building_l, bus_f, bus_l, button_chevron_left_f, button_chevron_left_l, button_chevron_right_f, button_chevron_right_l, button_minus_f, button_minus_l, button_plus_f, button_plus_l, calculator_f, calculator_l, calendar_f, calendar_l, campaign_f, campaign_l, car_f, car_l, cart_f, cart_l, change_order_l, check, chevron_left, chevron_right, cloud_f, cloud_l, code_f, code_l, comment_f, comment_l, compare_f, compare_l, coupon_f, coupon_l, credit_card_f, credit_card_l, currency_f, currency_l, delete_f, delete_l, delivery_f, delivery_l, desktop_f, desktop_l, domestic_area_f, domestic_area_l, download_f, download_l, eye_ban_f, eye_ban_l, eye_f, eye_l, favorite_f, favorite_half_f, favorite_l, ferry_f, ferry_l, fill_color_f, fill_color_l, folder_f, folder_l, gift_f, gift_l, heart_f, heart_l, home_f, home_l, image_f, image_l, keyboard_f, keyboard_l, language_f, language_l, laptop_f, laptop_l, like_f, like_l, list_f, list_l, loading_l, location_f, location_l, login_l, logout_l, lucky_kuji_f, lucky_kuji_l, mail_f, mail_l, map_f, map_l, menu, minus, mobile_phone_f, mobile_phone_l, movie_f, movie_l, new_user_f, new_window_l, notice_generic_f, notice_generic_l, notice_user_f, notice_user_l, paint_f, paint_l, paper_plane_f, paper_plane_l, pdf_f, pdf_l, phone_f, phone_l, photograph_f, photograph_l, pin_f, pin_l, plane_f, plane_l, plus, point_f, point_l, price_f, price_l, print_f, print_l, purchase_history_f, purchase_history_l, qrcode_f, qrcode_l, rakuten_account_f, rakuten_account_l, rakuten_registration_f, rakuten_registration_l, ranking_f, ranking_l, refresh, review_comment_f, review_comment_l, review_edit_f, review_edit_l, rss_symbol_l, rss_text_f, rss_text_l, save_f, save_l, search, search_history_f, search_history_l, security_f, security_l, server_f, server_l, settings_f, settings_l, share_f, share_l, shop_f, shop_l, sign_ban_f, sign_ban_l, sign_help_f, sign_help_l, sign_info_f, sign_info_l, sign_warning_f, sign_warning_l, sliders_f, sliders_l, smartphone_f, smartphone_l, survey_f, survey_l, switch_language_f, switch_language_l, tablet_f, tablet_l, tag_f, tag_l, time_f, time_l, train_f, train_l, upload_f, upload_l, voice_input_f, voice_input_l, walking_f, world_f, world_l, x, zip_f, zip_l, zoom_in_f, zoom_in_l, zoom_out_f, zoom_out_l\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "arrow_down_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "arrow_left_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "arrow_link_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "arrow_right_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "arrow_up_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "barcode_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "barcode_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "blockquote_left",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "blockquote_right",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "browsing_history_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "browsing_history_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "building_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "building_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "bus_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "bus_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "button_chevron_left_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "button_chevron_left_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "button_chevron_right_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "button_chevron_right_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "button_minus_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "button_minus_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "button_plus_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "button_plus_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "calculator_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "calculator_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "calendar_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "calendar_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "campaign_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "campaign_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "car_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "car_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "cart_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "cart_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "change_order_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "check",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "chevron_left",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "chevron_right",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "cloud_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "cloud_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "code_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "code_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "comment_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "comment_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "compare_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "compare_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "coupon_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "coupon_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "credit_card_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "credit_card_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "currency_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "currency_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "delete_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "delete_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "delivery_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "delivery_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "desktop_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "desktop_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "domestic_area_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "domestic_area_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "download_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "download_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "eye_ban_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "eye_ban_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "eye_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "eye_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "favorite_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "favorite_half_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "favorite_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "ferry_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "ferry_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "fill_color_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "fill_color_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "folder_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "folder_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "gift_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "gift_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "heart_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "heart_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "home_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "home_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "image_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "image_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "keyboard_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "keyboard_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "language_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "language_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "laptop_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "laptop_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "like_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "like_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "list_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "list_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "loading_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "location_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "location_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "login_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "logout_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "lucky_kuji_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "lucky_kuji_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "mail_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "mail_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "map_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "map_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "menu",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "minus",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "mobile_phone_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "mobile_phone_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "movie_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "movie_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "new_user_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "new_window_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "notice_generic_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "notice_generic_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "notice_user_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "notice_user_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "paint_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "paint_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "paper_plane_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "paper_plane_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "pdf_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "pdf_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "phone_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "phone_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "photograph_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "photograph_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "pin_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "pin_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "plane_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "plane_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "plus",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "point_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "point_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "price_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "price_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "print_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "print_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "purchase_history_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "purchase_history_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "qrcode_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "qrcode_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rakuten_account_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rakuten_account_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rakuten_registration_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rakuten_registration_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "ranking_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "ranking_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "refresh",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "review_comment_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "review_comment_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "review_edit_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "review_edit_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rss_symbol_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rss_text_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rss_text_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "save_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "save_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "search",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "search_history_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "search_history_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "security_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "security_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "server_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "server_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "settings_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "settings_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "share_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "share_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "shop_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "shop_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "sign_ban_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "sign_ban_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "sign_help_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "sign_help_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "sign_info_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "sign_info_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "sign_warning_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "sign_warning_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "sliders_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "sliders_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "smartphone_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "smartphone_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "survey_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "survey_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "switch_language_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "switch_language_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "tablet_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "tablet_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "tag_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "tag_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "time_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "time_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "train_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "train_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "upload_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "upload_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "voice_input_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "voice_input_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "walking_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "world_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "world_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "x",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "zip_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "zip_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "zoom_in_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "zoom_in_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "zoom_out_f",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "zoom_out_l",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Svg.IconsExtra",
        "comment": "\n\n@docs more_vert, checkBold, copy, aToZ, check_thick, bug, add, arrowBack, arrowForward, grid, play, pause, close, clear, submit, love, respect, organize, customSupport, card, highFive, moon, paperPlane, internet, email, waveHand, training, startup, fireworks, alarmClock, conversation, sun, keyboardArrowDown, delete, restore, keyboardArrowUp, search, darkLight, validation_check, validation_clear, validation_error, brokenHeart\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "aToZ",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "add",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "alarmClock",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "arrowBack",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "arrowForward",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "brokenHeart",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "bug",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "card",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "checkBold",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "check_thick",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "clear",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "close",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "conversation",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "copy",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "customSupport",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "darkLight",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "delete",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "email",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "fireworks",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "grid",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "highFive",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "internet",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "keyboardArrowDown",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "keyboardArrowUp",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "love",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "moon",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "more_vert",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "organize",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "paperPlane",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "pause",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "play",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "respect",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "restore",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "search",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "startup",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "submit",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "sun",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "training",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "validation_check",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "validation_clear",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "validation_error",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "waveHand",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Svg.Lists",
        "comment": " These are just lists of icons to generate the live guidelines.\n\n@docs listIcons, listIconsExtra, listLogos, listLogosExtra, listOthers\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "listIcons",
                "comment": " ",
                "type": "Basics.Int -> Element.WithContext.Color -> List.List ( Element.WithContext.Element (R10.Context.ContextInternal z) msg, String.String )"
            },
            {
                "name": "listIconsExtra",
                "comment": " ",
                "type": "Basics.Int -> Element.WithContext.Color -> List.List ( Element.WithContext.Element (R10.Context.ContextInternal z) msg, String.String )"
            },
            {
                "name": "listLogos",
                "comment": " ",
                "type": "Basics.Int -> Element.WithContext.Color -> List.List ( Element.WithContext.Element (R10.Context.ContextInternal z) msg, String.String )"
            },
            {
                "name": "listLogosExtra",
                "comment": " ",
                "type": "Basics.Int -> Element.WithContext.Color -> List.List ( Element.WithContext.Element (R10.Context.ContextInternal z) msg, String.String )"
            },
            {
                "name": "listOthers",
                "comment": " ",
                "type": "Basics.Int -> Element.WithContext.Color -> List.List ( Element.WithContext.Element (R10.Context.ContextInternal z) msg, String.String )"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Svg.Logos",
        "comment": "\n\n@docs authenticator, authenticator_monochrome, r, rakuten, rakutenMarketing, rakutenRagri, rakutenReady, barcelona\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "authenticator",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "authenticator_monochrome",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "barcelona",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "r",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rakuten",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rakutenMarketing",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rakutenRagri",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rakutenReady",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Svg.LogosExtra",
        "comment": "\n\n@docs apple, apple_monochrome, elm, elm_monochrome, facebook, facebook_monochrome, github, google, google_monochrome, microsoft, microsoft_monochrome, pcHome24hours, pcHome24hours_monochrome, r10, visa, visa_monochrome, americanExpress_monochrome, americanExpress, cardVisa, cardMasterCard, cardDiscover, cardJCB, cardAmericanExpress, cardDiners, facebookMeta\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "americanExpress",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "americanExpress_monochrome",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "apple",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "apple_monochrome",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "cardAmericanExpress",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "cardDiners",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "cardDiscover",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "cardJCB",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "cardMasterCard",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "cardVisa",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "elm",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "elm_monochrome",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "facebook",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "facebookMeta",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "facebook_monochrome",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "github",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "google",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "google_monochrome",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "microsoft",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "microsoft_monochrome",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "pcHome24hours",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "pcHome24hours_monochrome",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "r10",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "visa",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "visa_monochrome",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Svg.Others",
        "comment": "\n\n@docs mobileWithPerson, mountain, spinnerRotation, greenCheck, checkMark, errorLens, errorTriangle, letterClosed, letterOpen, rocket, paperPlane, externalLink\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "checkMark",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "errorLens",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "errorTriangle",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "externalLink",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "greenCheck",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "letterClosed",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "letterOpen",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "mobileWithPerson",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Element.WithContext.Color -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "mountain",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "paperPlane",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "rocket",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "spinnerRotation",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> String.String -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Svg.Utils",
        "comment": " Utilities to render SVG elements.\n\n@docs wrapperWithViewbox, wrapper32\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "wrapper32",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> Basics.Int -> List.List (Svg.Svg msg) -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            },
            {
                "name": "wrapperWithViewbox",
                "comment": " ",
                "type": "List.List (Element.WithContext.Attribute (R10.Context.ContextInternal z) msg) -> String.String -> Basics.Int -> List.List (Svg.Svg msg) -> Element.WithContext.Element (R10.Context.ContextInternal z) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Table",
        "comment": "\n\n@docs Column, columnCustom, columnSimple, columnWithAttrs, columnWithViews, config, configWithAccordionRow, customConfig, getActiveFilters, getPaginationStateRecord, initialStateFilters, initialStatePagination, initialStateSort, isLoading, isLoadingByPagination, paginationButtonDisableAll, paginationButtonEnableAll, paginationButtonEnableOther, paginationButtonNextFetch, paginationButtonPrevFetch, setLoading, updatePaginationState, view, viewHeaderRowHelp, State\n\n",
        "unions": [
            {
                "name": "Column",
                "comment": " Describes how to turn `data` into a column in your table.\n",
                "args": [
                    "data",
                    "msg",
                    "context"
                ],
                "cases": []
            }
        ],
        "aliases": [
            {
                "name": "State",
                "comment": " ",
                "args": [],
                "type": "R10.Table.Internal.State.State"
            }
        ],
        "values": [
            {
                "name": "columnCustom",
                "comment": " ",
                "type": "{ name : String.String, viewCell : R10.Palette.Palette -> Maybe.Maybe data -> Element.WithContext.Element (R10.Context.ContextInternal context) msg, viewHeader : R10.Palette.Palette -> R10.Table.Internal.Config.HeaderInfo msg -> Element.WithContext.Element (R10.Context.ContextInternal context) msg, sorter : R10.Table.Internal.Types.Sorter data } -> R10.Table.Column data msg context"
            },
            {
                "name": "columnSimple",
                "comment": " ",
                "type": "{ name : String.String, toStr : data -> String.String } -> R10.Table.Column data msg context"
            },
            {
                "name": "columnWithAttrs",
                "comment": " ",
                "type": "{ name : String.String, toStr : data -> String.String, maybeToCmp : Maybe.Maybe (data -> comparable), maybeAttrs : Maybe.Maybe { header : List.List (Element.WithContext.Attribute (R10.Context.ContextInternal context) msg), cell : List.List (Element.WithContext.Attribute (R10.Context.ContextInternal context) msg) } } -> R10.Table.Column data msg context"
            },
            {
                "name": "columnWithViews",
                "comment": " ",
                "type": "{ name : String.String, viewCell : R10.Palette.Palette -> Maybe.Maybe data -> Element.WithContext.Element (R10.Context.ContextInternal context) msg, viewHeader : R10.Palette.Palette -> R10.Table.Internal.Config.HeaderInfo msg -> Element.WithContext.Element (R10.Context.ContextInternal context) msg, maybeToCmp : Maybe.Maybe (data -> comparable) } -> R10.Table.Column data msg context"
            },
            {
                "name": "config",
                "comment": " Create the `Config` for your `view` function. Everything you need to\nrender your columns efficiently and handle selection of columns.\n\nSay we have a `List Person` that we want to show as a table. The table should\nhave a column for name and age. We would create a `Config` like this:\n\n    import Table\n\n    type Msg = NewTableTable.Model.State R10.Table.Internal.State.State | ...\n\n    config : R10.Table.Internal.Config Person Msg\n    config =\n      R10.Table.config\n        { toId = .name\n        , toMsg = NewTableTable.Model.State\n        , columns =\n            [ R10.Table.stringColumn \"Name\" .name\n            , R10.Table.intColumn \"Age\" .age\n            ]\n        }\n\nYou provide the followerLimiting information in your table configuration:\n\n  - `toId` &mdash; turn a `Person` into a unique ID. This lets us use\n    [`Html.Keyed`][keyed] under the hood to make resorts faster.\n  - `columns` &mdash; specify some columns to show.\n  - `toMsg` &mdash; a way to send new table states to your app as messages.\n\nSee the [examples] to get a better feel for this!\n\n[keyed]: http://package.elm-lang.org/packages/elm-lang/html/latest/Html-Keyed\n[examples]: https://github.com/evancz/elm-sortable-table/tree/master/examples\n\n",
                "type": "{ toId : data -> String.String, toMsg : R10.Table.Internal.Msg.Msg -> msg, columns : List.List (R10.Table.Column data msg context) } -> R10.Table.Internal.Config.Config data msg context"
            },
            {
                "name": "configWithAccordionRow",
                "comment": " ",
                "type": "(Maybe.Maybe data -> Element.WithContext.Element (R10.Context.ContextInternal context) msg) -> Basics.Int -> (Maybe.Maybe data -> Basics.Bool) -> (Maybe.Maybe data -> Basics.Bool) -> R10.Table.Internal.Config.Config data msg context -> R10.Table.Internal.Config.Config data msg context"
            },
            {
                "name": "customConfig",
                "comment": " Just like `config` but you can specify a bunch of table customizations.\n",
                "type": "{ toId : data -> String.String, toMsg : R10.Table.Internal.Msg.Msg -> msg, columns : List.List (R10.Table.Column data msg context), bodyAttrs : List.List (Element.WithContext.Attribute (R10.Context.ContextInternal context) msg), rowAttrsBuilder : Maybe.Maybe data -> List.List (Element.WithContext.Attribute (R10.Context.ContextInternal context) msg), pagination : Maybe.Maybe R10.Table.Internal.Config.PaginationConfig, filters : Maybe.Maybe R10.Table.Internal.Config.FiltersConfig } -> R10.Table.Internal.Config.Config data msg context"
            },
            {
                "name": "getActiveFilters",
                "comment": " ",
                "type": "R10.Table.Internal.State.State -> Dict.Dict String.String String.String"
            },
            {
                "name": "getPaginationStateRecord",
                "comment": " ",
                "type": "R10.Table.Internal.State.State -> Maybe.Maybe R10.Table.Internal.State.PaginationStateRecord"
            },
            {
                "name": "initialStateFilters",
                "comment": " ",
                "type": "{ filterValues : Dict.Dict String.String String.String } -> R10.Table.Internal.State.State -> R10.Table.Internal.State.State"
            },
            {
                "name": "initialStatePagination",
                "comment": " ",
                "type": "{ length : Basics.Int } -> R10.Table.Internal.State.State -> R10.Table.Internal.State.State"
            },
            {
                "name": "initialStateSort",
                "comment": " Create a table state. By providing a column name, you determine which\ncolumn should be used for sorting by default. So if you want your table of\nyachts to be sorted by length by default, you might say:\n\n    import Table\n\n    R10.Table.initialSort \"Length\"\n\n",
                "type": "{ name : String.String, isReversed : Basics.Bool } -> R10.Table.Internal.State.State"
            },
            {
                "name": "isLoading",
                "comment": " ",
                "type": "R10.Table.Internal.State.State -> Basics.Bool"
            },
            {
                "name": "isLoadingByPagination",
                "comment": " ",
                "type": "R10.Table.Internal.State.State -> Basics.Bool"
            },
            {
                "name": "paginationButtonDisableAll",
                "comment": " ",
                "type": "R10.Table.Internal.State.State -> R10.Table.Internal.State.State"
            },
            {
                "name": "paginationButtonEnableAll",
                "comment": " ",
                "type": "R10.Table.Internal.State.State -> R10.Table.Internal.State.State"
            },
            {
                "name": "paginationButtonEnableOther",
                "comment": " ",
                "type": "R10.Table.Internal.State.State -> R10.Table.Internal.State.State"
            },
            {
                "name": "paginationButtonNextFetch",
                "comment": " ",
                "type": "R10.Table.Internal.State.State -> R10.Table.Internal.State.State"
            },
            {
                "name": "paginationButtonPrevFetch",
                "comment": " ",
                "type": "R10.Table.Internal.State.State -> R10.Table.Internal.State.State"
            },
            {
                "name": "setLoading",
                "comment": " ",
                "type": "Basics.Bool -> R10.Table.Internal.State.State -> R10.Table.Internal.State.State"
            },
            {
                "name": "updatePaginationState",
                "comment": " ",
                "type": "R10.Table.Internal.State.PaginationStateRecord -> R10.Table.Internal.State.State -> R10.Table.Internal.State.State"
            },
            {
                "name": "view",
                "comment": " Take a list of data and turn it into a table. The `Config` argument is the\nconfiguration for the table. It describes the columns that we want to show. The\n`Table.State.State` argument describes which column we are sorting by at the moment.\n\n**Note:** The `Table.State.State` and `List data` should live in your `Model`. The `Config`\nfor the table belongs in your `view` code. I very strongly recommend against\nputting `Config` in your model. Describe any potential table configurations\nstatically, and look for a different library if you need something crazier than\nthat.\n\n",
                "type": "R10.Palette.Palette -> R10.Table.Internal.Config.Config data msg context -> R10.Table.Internal.State.State -> List.List data -> Element.WithContext.Element (R10.Context.ContextInternal context) msg"
            },
            {
                "name": "viewHeaderRowHelp",
                "comment": " ",
                "type": "R10.Palette.Palette -> R10.Table.Internal.State.State -> List.List (R10.Table.Internal.Config.ColumnConf data msg context) -> (String.String -> Basics.Bool -> msg) -> Element.WithContext.Element (R10.Context.ContextInternal context) msg"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Theme",
        "comment": " This is how we store information about the primary color used and if the site is in light or dark mode.\n\nMost of the application use only one primary color but some are configurable and can be used with different colors.\n\n@docs Theme, fromFlags\n\n",
        "unions": [],
        "aliases": [
            {
                "name": "Theme",
                "comment": " ",
                "args": [],
                "type": "{ mode : R10.Mode.Mode, primaryColor : R10.Color.Internal.Primary.Color }"
            }
        ],
        "values": [
            {
                "name": "fromFlags",
                "comment": " Usually `mode` and `primaryColor` are stored in the flags. Use this helper to create a `Theme` from flags.\n",
                "type": "{ a | mode : R10.Mode.Mode, primaryColor : R10.Color.Internal.Primary.Color } -> R10.Theme.Theme"
            }
        ],
        "binops": []
    },
    {
        "name": "R10.Translations",
        "comment": " Text translations.\n\nThis is an examples of translation:\n\n    signInHeader : R10.Language.Translations\n    signInHeader =\n        { key = \"signInHeader\"\n        , en_us = \"Sign in to your Rakuten account\"\n        , ja_jp = \"楽天会員 ログイン\"\n        , zh_tw = \"登錄您的Rakuten帳戶\"\n        , de_de = \"Loggen Sie sich in Ihr Rakuten-Konto ein\"\n        , fr_fr = \"Connectez-vous à votre compte Rakuten\"\n        }\n\n@docs language, signIn, signInHeader, signOut\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "language",
                "comment": " ",
                "type": "R10.Language.Translations"
            },
            {
                "name": "signIn",
                "comment": " ",
                "type": "R10.Language.Translations"
            },
            {
                "name": "signInHeader",
                "comment": " ",
                "type": "R10.Language.Translations"
            },
            {
                "name": "signOut",
                "comment": " ",
                "type": "R10.Language.Translations"
            }
        ],
        "binops": []
    }
]