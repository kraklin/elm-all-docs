[
    {
        "name": "Touch",
        "comment": " This module exposes an API for handling touch events.\n\n# Setup\n@docs Msg, Model, initModel, update, element\n\n# Coordinates\n\nCoordinates (returned by some listeners) start at the top left:\n\n    ┏━━━━━━━━━━━━━━━━━▶\n    ┃(0,0) (1,0) (2,0)\n    ┃\n    ┃(0,1) (1,1) (2,1)\n    ┃\n    ┃(0,2) (1,2) (2,2)\n    ┃\n    ┃(0,3) (1,3) (2,3)\n    ▼\n\n# Listeners\n@docs Listener, onMove, onPinch, onRotate\n",
        "unions": [
            {
                "name": "Model",
                "comment": " Represents the internal model used by this library. The `msg` should be the\ntype of message used in your library; not `Touch.Msg`.\n",
                "args": [
                    "msg"
                ],
                "cases": []
            },
            {
                "name": "Msg",
                "comment": " Represents messages handled by this library\n",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [
            {
                "name": "Listener",
                "comment": " Listeners are like subscriptions but for touch events. They are triggered\nby finger movement.\n",
                "args": [
                    "msg"
                ],
                "type": "Touch.Internal.Listener msg"
            }
        ],
        "values": [
            {
                "name": "element",
                "comment": " Creates an HTML element that responds to touch events. The second argument\nmust be a function that converts a `Touch.Msg` to `msg`.\n",
                "type": "List.List (Html.Attribute msg) -> (Touch.Msg -> msg) -> Html.Html msg"
            },
            {
                "name": "initModel",
                "comment": " Use this to initialize the state of `Touch.Model` and to specify the\nlisteners.\n",
                "type": "List.List (Touch.Listener msg) -> Touch.Model msg"
            },
            {
                "name": "onMove",
                "comment": " A listener that triggers when fingers move. The second argument must take the\nX and Y distances (in pixels) and return a `msg`. The X and Y values are deltas,\nso they are higher when the fingers are moving faster and 0 when they don't move.\n",
                "type": "{ fingers : Basics.Int } -> (Basics.Float -> Basics.Float -> msg) -> Touch.Listener msg"
            },
            {
                "name": "onPinch",
                "comment": " Triggers when two fingers move apart. A negative value occurs when the\nfingers come closer together.\n",
                "type": "(Basics.Float -> msg) -> Touch.Listener msg"
            },
            {
                "name": "onRotate",
                "comment": " Triggered when two fingers rotate. This uses standard Elm angles (radians).\nOne full turn is `pi * 2`.\n",
                "type": "(Basics.Float -> msg) -> Touch.Listener msg"
            },
            {
                "name": "update",
                "comment": " This is used to update `Touch.Model` in response to a `Touch.Msg`. It also\ncreates a `Cmd` to trigger listeners. Use it like this:\n\n    update : Msg -> Model -> ( Model, Cmd Msg )\n    update msg model =\n        case msg of\n            TouchMsg touchMsg ->\n                Touch.update\n                    touchMsg\n                    model.touchMsg\n                    ( \\newTouchModel -> { model | touchModel = newTouchModel } )\n\n",
                "type": "Touch.Msg -> Touch.Model msg -> (Touch.Model msg -> model) -> ( model, Platform.Cmd.Cmd msg )"
            }
        ],
        "binops": []
    }
]