[
    {
        "name": "Identicon",
        "comment": " Generate an identicon from a string.\n\n\n# Creating\n\n@docs identicon, custom\n\n\n# Defaults\n\n@docs defaultHash, defaultColor\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "custom",
                "comment": " Creates an identicon with your own hasher/colorer where the string is\npassed into both the hasher and colorer. Here's how to create an identicon\nthat's always the color red:\n\n    import Color exposing (rgb255) -- from avh4/elm-color\n    import Identicon exposing (custom, defaultHash)\n    import Html exposing (Html)\n\n    view : Html msg\n    view =\n        custom defaultHash (always <| rgb255 255 0 0) \"200px\" \"Hello Identicon!\"\n\n",
                "type": "(String.String -> Basics.Int) -> (String.String -> Color.Color) -> String.String -> String.String -> Html.Html msg"
            },
            {
                "name": "defaultColor",
                "comment": " Generate a color from a string\n\nThis generates the same color that would be used in the identicon.\n\n",
                "type": "String.String -> Color.Color"
            },
            {
                "name": "defaultHash",
                "comment": " One-at-a-Time Hash\n\nTaken from <http://www.burtleburtle.net/bob/hash/doobs.html>.\n\n",
                "type": "String.String -> Basics.Int"
            },
            {
                "name": "identicon",
                "comment": " Generate a identicon from a string\n\n    main =\n        identicon \"200px\" \"Hello identicon!\"\n\n",
                "type": "String.String -> String.String -> Html.Html msg"
            }
        ],
        "binops": []
    }
]