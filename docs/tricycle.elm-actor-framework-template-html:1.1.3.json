[
    {
        "name": "Framework.Template.Html",
        "comment": "\n\n@docs HtmlTemplate\n\n\n# Creation\n\n@docs blank, parse, fromNodes\n\n\n# Rendering\n\n@docs toNodes, render, renderAndInterpolate, toString\n\n\n# Utility\n\n@docs getActorsToSpawn\n\n",
        "unions": [],
        "aliases": [
            {
                "name": "HtmlTemplate",
                "comment": " Your parsed template that originated from a string containing valid Html\n",
                "args": [
                    "appActors"
                ],
                "type": "Framework.Template.Html.Internal.HtmlTemplate.HtmlTemplate appActors"
            }
        ],
        "values": [
            {
                "name": "blank",
                "comment": " An empty, blank HtmlTemplate\n",
                "type": "Framework.Template.Html.HtmlTemplate appActors"
            },
            {
                "name": "fromNodes",
                "comment": " Turn a list of Nodes into an HtmlTemplate\n\nThis could be useful for when you use your own Html Parser.\n\n",
                "type": "List.List (Framework.Template.Node appActors) -> Framework.Template.Html.HtmlTemplate appActors"
            },
            {
                "name": "getActorsToSpawn",
                "comment": " Get the actor, reference and original complete node from a template that\nare meant to be spawned.\n\nThe String is a reference that can be used on the render function in combination\nwith a Pid to render the Actors output.\n\n",
                "type": "Framework.Template.Html.HtmlTemplate appActors -> List.List { actor : appActors, reference : String.String, actorElement : Framework.Template.ActorElement appActors }"
            },
            {
                "name": "parse",
                "comment": " Parse a string containing valid Html into an HtmlTemplate\n\nAdd Components to replace Html Elements with your Actors based on their\nnodeNames. (e.g. `<my-actor></my-actor>`)\n\n",
                "type": "Framework.Template.Components.Components appActors -> String.String -> Result.Result String.String (Framework.Template.Html.HtmlTemplate appActors)"
            },
            {
                "name": "render",
                "comment": " Render your template\n",
                "type": "Dict.Dict String.String Framework.Actor.Pid -> (Framework.Actor.Pid -> Maybe.Maybe (Html.Html msg)) -> Framework.Template.Html.HtmlTemplate appActors -> List.List (Html.Html msg)"
            },
            {
                "name": "renderAndInterpolate",
                "comment": " Render your template and interpolate any string matching your interpolation dictionary.\n\n    renderAndInterpolate\n        Dict.empty\n        (Dict.fromList [ ( \"foo\", \"bar\" ) ])\n        (fromNodes [ Text \"<p>#[foo]</p>\" ])\n        temmplate\n\n",
                "type": "Dict.Dict String.String Framework.Actor.Pid -> Dict.Dict String.String String.String -> (Framework.Actor.Pid -> Maybe.Maybe (Html.Html msg)) -> Framework.Template.Html.HtmlTemplate appActors -> List.List (Html.Html msg)"
            },
            {
                "name": "toNodes",
                "comment": " Turn a HtmlTemplate into a list of Nodes\n\nThis could be useful for when you want to write or use another method of\nrendering the template in question.\n\n",
                "type": "Framework.Template.Html.HtmlTemplate appActors -> List.List (Framework.Template.Node appActors)"
            },
            {
                "name": "toString",
                "comment": " Turn a HtmlTemplate into a string\n",
                "type": "Framework.Template.Html.HtmlTemplate appActors -> String.String"
            }
        ],
        "binops": []
    }
]