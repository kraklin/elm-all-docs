[
    {
        "name": "FormatNumber",
        "comment": " This simple package formats `Float` numbers as pretty strings. It is\nflexible enough to deal with different number of decimals, different thousand\nseparators and different decimal separator.\n\n@docs format\n\nIt also `humanize`s decimals numbers with different strategies for handling zeros:\n\n@docs humanize\n\n\n## What about `Int` numbers?\n\nJust convert them to `Float` before passing them to `format`:\n\n    >>> import FormatNumber.Locales exposing (usLocale)\n    >>> format usLocale (toFloat 1234)\n    \"1,234.00\"\n\n    >>> import FormatNumber.Locales exposing (usLocale)\n    >>> format { usLocale | decimals = 0 } <| toFloat 1234\n    \"1,234\"\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "format",
                "comment": " Format a float number as a pretty string:\n\n    import FormatNumber.Locales exposing (Locale, frenchLocale, spanishLocale, usLocale)\n\n    format { decimals = 2, thousandSeparator = \".\", decimalSeparator = \",\", negativePrefix = \"−\", negativeSuffix = \"\", positivePrefix = \"\", positiveSuffix = \"\" } 123456.789\n    --> \"123.456,79\"\n\n    format { decimals = 2, thousandSeparator = \",\", decimalSeparator = \".\", negativePrefix = \"−\", negativeSuffix = \"\", positivePrefix = \"\", positiveSuffix = \"\" } 1234.5567\n    --> \"1,234.56\"\n\n    format (Locale 3 \".\" \",\" \"−\" \"\" \"\" \"\") -7654.3210\n    --> \"−7.654,321\"\n\n    format (Locale 1 \",\" \".\" \"−\" \"\" \"\" \"\") -0.01\n    --> \"0.0\"\n\n    format (Locale 2 \",\" \".\" \"−\" \"\" \"\" \"\") 0.01\n    --> \"0.01\"\n\n    format (Locale 0 \",\" \".\" \"−\" \"\" \"\" \"\") 123.456\n    --> \"123\"\n\n    format (Locale 0 \",\" \".\" \"−\" \"\" \"\" \"\") 1e9\n    --> \"1,000,000,000\"\n\n    format (Locale 5 \",\" \".\" \"−\" \"\" \"\" \"\") 1.0\n    --> \"1.00000\"\n\n    format (Locale 2 \",\" \".\" \"(\" \")\" \"\" \"\") -1.0\n    --> \"(1.00)\"\n\n    format usLocale pi\n    --> \"3.14\"\n\n    format { frenchLocale | decimals = 4 } pi\n    --> \"3,1416\"\n\n    format frenchLocale 67295\n    --> \"67 295,000\"\n\n    format spanishLocale e\n    --> \"2,718\"\n\n    format spanishLocale 67295\n    --> \"67.295,000\"\n\n    format usLocale 67295\n    --> \"67,295.00\"\n\n    format spanishLocale -0.1\n    --> \"−0,100\"\n\n    format spanishLocale -0.00099\n    --> \"−0,001\"\n\n    format usLocale 1e10\n    --> \"10,000,000,000.00\"\n\n    format usLocale -1e10\n    --> \"−10,000,000,000.00\"\n\n    format { usLocale | negativePrefix = \"-\" } -1.0\n    --> \"-1.00\"\n\n    format { usLocale | positivePrefix = \"+\" } 1.0\n    --> \"+1.00\"\n\n    format { usLocale | positiveSuffix = \"+\" } 1.0\n    --> \"1.00+\"\n\n    format usLocale 7.34767309e22\n    --> \"73,476,730,900,000,000,000,000.00\"\n\n    format usLocale 7.34767309e+22\n    --> \"73,476,730,900,000,000,000,000.00\"\n\n    format usLocale 7.34767309e-22\n    --> \"0.00\"\n\n",
                "type": "FormatNumber.Locales.Locale -> Basics.Float -> String.String"
            },
            {
                "name": "humanize",
                "comment": " Humanize the decimal part of a float with different strategies to remove\ntail zeros:\n\n    import FormatNumber exposing (humanize)\n    import FormatNumber.Humanize exposing (ZeroStrategy(..))\n    import FormatNumber.Locales exposing (usLocale)\n\n    humanize usLocale RemoveZeros 10.00\n    --> \"10\"\n    humanize usLocale RemoveZeros 10.10\n    --> \"10.1\"\n\n    humanize usLocale KeepZeros 10.00\n    --> \"10\"\n    humanize usLocale KeepZeros 10.10\n    --> \"10.10\"\n\n",
                "type": "FormatNumber.Locales.Locale -> FormatNumber.Humanize.ZeroStrategy -> Basics.Float -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "FormatNumber.Humanize",
        "comment": " These types abstract different strategies to handle decimals ending in\nzeros. `KeepZeros` will only remove decimals if all digits are zeros, while\n`RemoveZeros` will shorten the decimals removing ending zeros.\n\n@docs ZeroStrategy\n\n",
        "unions": [
            {
                "name": "ZeroStrategy",
                "comment": " This is the `ZeroStrategy` type.\n",
                "args": [],
                "cases": [
                    [
                        "KeepZeros",
                        []
                    ],
                    [
                        "RemoveZeros",
                        []
                    ]
                ]
            }
        ],
        "aliases": [],
        "values": [],
        "binops": []
    },
    {
        "name": "FormatNumber.Locales",
        "comment": " These locales and its names are based on this\n[International Language Environments\nGuide](https://docs.oracle.com/cd/E19455-01/806-0169/overview-9/index.html)\n\n@docs Locale\n\n\n# Pre-defined locales\n\n@docs frenchLocale, spanishLocale, usLocale\n\n",
        "unions": [],
        "aliases": [
            {
                "name": "Locale",
                "comment": " This is the `Locale` type and constructor.\n",
                "args": [],
                "type": "{ decimals : Basics.Int, thousandSeparator : String.String, decimalSeparator : String.String, negativePrefix : String.String, negativeSuffix : String.String, positivePrefix : String.String, positiveSuffix : String.String }"
            }
        ],
        "values": [
            {
                "name": "frenchLocale",
                "comment": " Locale used in France, Canada, Finland and Sweden. It has 3 decimals\ndigits, uses a thin space (`U+202F`) as thousand separator and a `,` as decimal\nseparator. It uses a minus sign (not a hyphen) as a prefix for negative\nnumbers, but no sufix or prefix for positive numbers.\n",
                "type": "FormatNumber.Locales.Locale"
            },
            {
                "name": "spanishLocale",
                "comment": " Locale used in Spain, Italy and Norway. It has 3 decimals digits, uses a\n`.` as thousand separator and a `,` as decimal separator. It uses a minus sign\n(not a hyphen) as a prefix for negative numbers, but no sufix or prefix for\npositive numbers.\n",
                "type": "FormatNumber.Locales.Locale"
            },
            {
                "name": "usLocale",
                "comment": " Locale used in the United States, Great Britain and Thailand. It has 2\ndecimals digits, uses a `,` as thousand separator and a `.` as decimal\nseparator. It uses a minus sign (not a hyphen) as a prefix for negative\nnumbers, no sufix or prefix for positive numbers.\n",
                "type": "FormatNumber.Locales.Locale"
            }
        ],
        "binops": []
    }
]