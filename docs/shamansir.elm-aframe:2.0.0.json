[
    {
        "name": "AFrame",
        "comment": " [A-Frame](https://aframe.io/docs/0.2.0/guide/) is an open-source framework for creating 3D and virtual reality experiences on the web.\n\n# Scene\n@docs scene\n\n# Entity\n@docs entity\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "entity",
                "comment": " An entity is represented by the <a-entity> element.\n    As defined in the entity-component-system pattern,\n    entities are placeholder objects to which we plug in components\n    to in order to provide them apperance, behavior, and functionality.\n\n    entity [ rotation 90 0 0 ] []\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "scene",
                "comment": " A scene is represented by the <a-scene> element.\n    The scene is the global root object,\n    and all entities are contained within the scene.\n\n    main =\n        scene [] [ box [] [] ]\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Animations",
        "comment": " This module provides a set of functions for declaring A-Frame animations.\n\n# Definition\n@docs animation\n\n# Animation attributes\n@docs attribute_, begin, direction, dur, easing, fill, from, fromColor, fromVec2, fromVec3, fromBool, fromValue, to, toColor, toVec2, toVec3, toBool, toValue, loop, loopForever\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "animation",
                "comment": " Animation declaration.\n\n    box\n        []\n        [ animation\n            [ attribute \"rotation\"\n            , dur 10000\n            , fill \"forwards\"\n            , to \"0 360 0\"\n            , repeat \"indefinite\"\n            ]\n            []\n        ]\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "attribute_",
                "comment": " Attribute to animate.\n\n    animation [ attribute \"rotation\" ] []\n",
                "type": "String.String -> Html.Attribute msg"
            },
            {
                "name": "begin",
                "comment": " Delay (in milliseconds) or event name to wait on before beginning animation.\n\n    animation [ begin 5000 ] []\n",
                "type": "Basics.Int -> Html.Attribute msg"
            },
            {
                "name": "direction",
                "comment": " Direction of the animation (between from and to).\n    One of alternate, alternateReverse, normal, reverse.\n\n    animation [ direction \"reverse\" ] []\n",
                "type": "AFrame.Variants.Direction.Direction -> Html.Attribute msg"
            },
            {
                "name": "dur",
                "comment": " Duration in (milliseconds) of the animation.\n\n    animation [ dur 5000 ] []\n",
                "type": "Basics.Int -> Html.Attribute msg"
            },
            {
                "name": "easing",
                "comment": " Easing function of the animation.\n\n    animation [ easing \"rotation\" ] []\n",
                "type": "AFrame.Variants.Easing.Easing -> Html.Attribute msg"
            },
            {
                "name": "fill",
                "comment": " Determines effect of animation when not actively in play.\n    One of backwards, both, forwards, none.\n\n    animation [ fill forwards ] []\n",
                "type": "AFrame.Variants.Fill.Fill -> Html.Attribute msg"
            },
            {
                "name": "from",
                "comment": " Starting value.\n\n    animation [ from \"0 120 0\" ] []\n",
                "type": "String.String -> Html.Attribute msg"
            },
            {
                "name": "fromBool",
                "comment": " ",
                "type": "Basics.Bool -> Html.Attribute msg"
            },
            {
                "name": "fromColor",
                "comment": " ",
                "type": "Color.Color -> Html.Attribute msg"
            },
            {
                "name": "fromValue",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "fromVec2",
                "comment": " ",
                "type": "Basics.Float -> Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "fromVec3",
                "comment": " ",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "loop",
                "comment": " Repeat count.\n\n    animation [ loop 5000 ] []\n",
                "type": "Basics.Int -> Html.Attribute msg"
            },
            {
                "name": "loopForever",
                "comment": " Loop infinitely\n\n    animation [ loopForever ] []\n",
                "type": "Html.Attribute msg"
            },
            {
                "name": "to",
                "comment": " Ending value. Must be specified.\n\n    animation [ to \"0 360 0\" ] []\n",
                "type": "String.String -> Html.Attribute msg"
            },
            {
                "name": "toBool",
                "comment": " ",
                "type": "Basics.Bool -> Html.Attribute msg"
            },
            {
                "name": "toColor",
                "comment": " ",
                "type": "Color.Color -> Html.Attribute msg"
            },
            {
                "name": "toValue",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "toVec2",
                "comment": " ",
                "type": "Basics.Float -> Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "toVec3",
                "comment": " ",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> Html.Attribute msg"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components",
        "comment": " # Component\n\n`Component msg` is just an alias for `Html.Attribute msg`, but lets you specify typed properties and than builds up the required string value by itself.\n\n    entity\n        [ geometry [ primitive box ]\n        , material [ color Color.red ]\n        , animation_ \"mouseenter\"\n            [ property_ \"components.material.material.color\"\n            , type_ \"color\"\n            , toColor Color.blue\n            , startEvents [ mouseEnter ]\n            , dur 500\n            ]\n        , animation_ \"mouseleave\"\n            [ property_ \"components.material.material.color\"\n            , type_ \"color\"\n            , toColor Color.red\n            , startEvents [ mouseLeave ]\n            , dur 500\n            ]\n        , animation [ property_ \"rotation\" ]\n        , animation_ \"2\" [ property_ \"position\" ]\n        , animation_ \"color\" [ property_ \"color\" ]\n        ]\n        []\n\n@docs Component, component, node, node_\n\n# General\n\n@docs background, camera, cursor, embedded, fog, geometry, light, line, line_, link, material, pool, raycaster, renderer, shadow, sound, text\n\n# Properties\n\n@docs position, rotation, scale, visible\n\n# Models\n\n@docs gltfModel, objModel\n\n# Animation\n\n@docs animation, animation_, animationMixer\n\n# Controls\n\n@docs daydreamControls, gearVrControls, handControls, laserControls, lookControls, oculusGoControls, oculusTouchControls, trackedControls, viveControls, viveFocusControls, wasdControls, windowsMotionControls\n\n# UI and Helpers\n\n@docs keyboardShortcuts, loadingScreen, debug, stats, deviceOrientationPersmissionUi, vrModeUi, screenshot\n\n",
        "unions": [],
        "aliases": [
            {
                "name": "Component",
                "comment": " ",
                "args": [
                    "msg"
                ],
                "type": "Html.Attribute msg"
            }
        ],
        "values": [
            {
                "name": "animation",
                "comment": " The animation component lets us animate and tween values. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "animationMixer",
                "comment": " ",
                "type": "AFrame.Components.Component msg"
            },
            {
                "name": "animation_",
                "comment": " The animation with custom ID component lets us animate and tween values. ",
                "type": "String.String -> List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "background",
                "comment": " The background component sets a basic color background of a scene that is more performant than a-sky since geometry is not created. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "camera",
                "comment": " The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "component",
                "comment": " ",
                "type": "String.String -> List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "cursor",
                "comment": " The cursor component provides hover and click states for interaction on top of the raycaster component. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "daydreamControls",
                "comment": " The `daydream-controls` component interfaces with the Google Daydream controllers. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "debug",
                "comment": " The debug component enables component-to-DOM serialization. ",
                "type": "AFrame.Components.Component msg"
            },
            {
                "name": "deviceOrientationPersmissionUi",
                "comment": " Starting with Safari on iOS 13 browsers require sites to be served over https and request user permission to access DeviceOrientation events. This component presents a permission dialog for the user to grant or deny access. The `device-orientation-permission-ui` component applies only to the `<a-scene> `element ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "embedded",
                "comment": " The embedded component removes fullscreen CSS styles from A-Frame’s `<canvas>` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller. ",
                "type": "AFrame.Components.Component msg"
            },
            {
                "name": "fog",
                "comment": " The `fog` component obscures entities in fog given distance from the camera. The fog component applies only to the `<a-scene>` element. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "gearVrControls",
                "comment": " The `gearvr-controls` component interfaces with the Samsung/Oculus Gear VR controllers. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "geometry",
                "comment": " The `geometry` component provides a basic shape for an entity. The primitive property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh.",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "gltfModel",
                "comment": " glTF (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies.\n\nThe gltf-model component loads a 3D model using a glTF (`.gltf` or `.glb`) file. ",
                "type": "String.String -> AFrame.Components.Component msg"
            },
            {
                "name": "handControls",
                "comment": " The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the vive-controls and oculus-touch-controls which in turn wrap the tracked-controls component. By specifying just hand-controls, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "keyboardShortcuts",
                "comment": " The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the `<a-scene>` element. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "laserControls",
                "comment": " The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. DoF stands for degrees of freedom. Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "light",
                "comment": " The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with shader: flat. Note that lights are computationally expensive we should limit number of lights in a scene. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "line",
                "comment": " The line component draws a line given a start coordinate and end coordinate using THREE.Line. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "line_",
                "comment": " ",
                "type": "String.String -> List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "link",
                "comment": " The `link` component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "loadingScreen",
                "comment": " The loading screen component configures the loading screen visual style. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "lookControls",
                "comment": " The `look-controls` component:\n\n* Rotates the entity when we rotate a VR head-mounted display (HMD).\n* Rotates the entity when we move the mouse.\n* Rotates the entity when we touch-drag the touchscreen.\n",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "material",
                "comment": " The `material` component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the `geometry` component which provides shape. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "node",
                "comment": " ",
                "type": "String.String -> List.List AFrame.Properties.Property -> Html.Html msg"
            },
            {
                "name": "node_",
                "comment": " ",
                "type": "String.String -> List.List AFrame.Properties.Property -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "objModel",
                "comment": " The obj-model component loads a 3D model and material using a Wavefront (`.OBJ`) file and a `.MTL` file. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "oculusGoControls",
                "comment": " The `oculus-go-controls` component interfaces with the Oculus Go controllers. It wraps the tracked-controls component while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger). ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "oculusTouchControls",
                "comment": " The `oculus-touch-controls` component interfaces with the Oculus Touch controllers. It wraps the tracked-controls component while adding button mappings, events, and a Touch controller model. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "pool",
                "comment": " The `pool` component allows for object pooling. This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce garbage collection pauses. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "position",
                "comment": " The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers.\n\nAll entities inherently have the position component.\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Components.Component msg"
            },
            {
                "name": "raycaster",
                "comment": " The raycaster component provides line-based intersection testing with a raycaster. Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "renderer",
                "comment": " The `renderer` system configures a scene’s `THREE.WebGLRenderer` instance. It also configures presentation attributes when entering WebVR/WebXR. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "rotation",
                "comment": " The `rotation` component defines the orientation of an entity in degrees. It takes the pitch (x), yaw (y), and roll (z) as three space-delimited numbers indicating degrees of rotation.\n\nAll entities inherently have the rotation component. ",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Components.Component msg"
            },
            {
                "name": "scale",
                "comment": " The `scale` component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes.\n\nAll entities inherently have the scale component. ",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Components.Component msg"
            },
            {
                "name": "screenshot",
                "comment": " The `screenshot` component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don’t have to do anything to use the component. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "shadow",
                "comment": " The `shadow` component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently.\n\nWithout this component, an entity will not cast nor receive shadows. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "sound",
                "comment": " The `sound` component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the components-position. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "stats",
                "comment": " The `stats` component displays a UI with performance-related metrics. The stats component applies only to the` <a-scene>` element. ",
                "type": "AFrame.Components.Component msg"
            },
            {
                "name": "text",
                "comment": " The `text` component renders signed distance field (`SDF`) font text. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "trackedControls",
                "comment": " The `tracked-controls` component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the hand-controls component as well as the vive-controls, oculus-touch-controls, windows-motion-controls, and daydream-controls components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as daydream-controls, a primitive arm model is used to emulate positional data. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "visible",
                "comment": " The `visible` component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn.\n\nVisibility effectively applies to all children. If an entity’s parent or ancestor entity has visibility set to `false`, then the entity will also not be visible nor draw. It’s a common pattern to create container entities that contain an entire group of entities that you can flip on an off with `visible`. ",
                "type": "Basics.Bool -> AFrame.Components.Component msg"
            },
            {
                "name": "viveControls",
                "comment": " The `vive-controls` component interfaces with the HTC Vive controllers/wands. It wraps the tracked-controls component while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "viveFocusControls",
                "comment": " The `vive-focus-controls` component interfaces with the Vive Focus controller. It wraps the tracked-controls component while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger). ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "vrModeUi",
                "comment": " The `vr-mode-ui` component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The `vr-mode-ui` component applies only to the `<a-scene>` element. If we wish to simply toggle the UI, use CSS instead. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "wasdControls",
                "comment": " The `wasd-controls` component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the camera component. ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            },
            {
                "name": "windowsMotionControls",
                "comment": " The `windows-motion-controls` component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the tracked-controls component while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.) ",
                "type": "List.List AFrame.Properties.Property -> AFrame.Components.Component msg"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Animations",
        "comment": " # Core\n\n@docs type_, property, isRawProperty\n\n# Tween\n\n@docs from, fromBool, fromColor, fromVec2, fromVec3, fromValue, to, toBool, toColor, toVec2, toVec3, toValue, dir\n\n# Easing\n\n@docs easing, elasticity, round\n\n# Timing\n\n@docs delay, dur, fill\n\n# Repeat\n\n@docs loop, loopForever\n\n# Events\n\n@docs autoplay, startEvents, pauseEvents, resumeEvents\n\n# Turning off\n\n@docs enabled\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "autoplay",
                "comment": " Whether or not the animation should autoplay. Should be specified if the animation is defined for the [animation-timeline](https://www.npmjs.com/package/aframe-animation-timeline-component) component.\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "delay",
                "comment": " How long (milliseconds) to wait before starting.\n\nDefault : `0`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "dir",
                "comment": " Which dir to go from from to to.\n\nDefault: `normal`\n\nOther: `alternate`, `reverse`\n",
                "type": "AFrame.Variants.Direction.Direction -> AFrame.Properties.Property"
            },
            {
                "name": "dur",
                "comment": " How long (milliseconds) each cycle of the animation is.\n\nDefault : `1000`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "easing",
                "comment": " Easing function of animation. To ease in, ease out, ease in and out.\n",
                "type": "AFrame.Variants.Easing.Easing -> AFrame.Properties.Property"
            },
            {
                "name": "elasticity",
                "comment": " How much to bounce (higher is stronger).\n\nDefault : `400`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "enabled",
                "comment": " If disabled, animation will stop and startEvents will not trigger animation start.\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "fill",
                "comment": " Determines effect of animation when not actively in play.\nOne of `backwards`, `both`, `forwards`, `none`.\n",
                "type": "AFrame.Variants.Fill.Fill -> AFrame.Properties.Property"
            },
            {
                "name": "from",
                "comment": " Initial value at start of animation. If not specified, the current property value of the entity will be used (will be sampled on each animation start). It is best to specify a from value when possible for stability.\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "fromBool",
                "comment": " Initial bool value at start of animation.\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "fromColor",
                "comment": " Initial color at start of animation.\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "fromValue",
                "comment": " Initial numeric value at start of animation.\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "fromVec2",
                "comment": " Initial vector value at end of animation.\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "fromVec3",
                "comment": " Initial vector at start of animation.\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "isRawProperty",
                "comment": " Flag to animate an arbitrary object property outside of A-Frame components for better performance. If set to true, for example, we can set property to like `components.material.material.opacity`. If property starts with components or `object3D`, this will be inferred to `true`.\n\nDefault: `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "loop",
                "comment": " How many times the animation should repeat.\n\nDefault : `0`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "loopForever",
                "comment": " ",
                "type": "AFrame.Properties.Property"
            },
            {
                "name": "pauseEvents",
                "comment": " Comma-separated list of events to listen to trigger pause. Can be resumed with resumeEvents.\n",
                "type": "List.List AFrame.EventRefs.EventRef -> AFrame.Properties.Property"
            },
            {
                "name": "property",
                "comment": " Property to animate. Can be a component name, a dot-delimited property of a component (e.g., `material.color`), or a plain attribute.\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "resumeEvents",
                "comment": " Comma-separated list of events to listen to trigger resume after pausing.\n",
                "type": "List.List AFrame.EventRefs.EventRef -> AFrame.Properties.Property"
            },
            {
                "name": "round",
                "comment": " Whether to round values. ",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "startEvents",
                "comment": " Comma-separated list of events to listen to trigger a restart and play. Animation will not autoplay if specified. `startEvents` will *restart* the animation, use `pauseEvents` to resume it. If there are other animation components on the entity animating the same property, those animations will be automatically paused to not conflict. ",
                "type": "List.List AFrame.EventRefs.EventRef -> AFrame.Properties.Property"
            },
            {
                "name": "to",
                "comment": " Target value at end of animation.\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "toBool",
                "comment": " Target bool value at end of animation.\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "toColor",
                "comment": " Target color value at end of animation.\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "toValue",
                "comment": " Target numeric value at end of animation.\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "toVec2",
                "comment": " Target vector value at end of animation.\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "toVec3",
                "comment": " Target vector value at end of animation.\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "type_",
                "comment": " Right now only supports color for tweening isRawProperty color XYZ/RGB vector values.\n\nDefault: `''`\n",
                "type": "String.String -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Background",
        "comment": " # Background\n\n@docs background, transparent\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "background",
                "comment": " Color of the scene background.\n\nDefault: `black`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "transparent",
                "comment": " Background is transparent. The color property is ignored.\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Camera",
        "comment": " # Camera\n\n@docs active, near, far, fov, spectator, zoom\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "active",
                "comment": " Whether the camera is the active camera in a scene with more than one camera.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "far",
                "comment": " Camera frustum far clipping plane.\n\nDefault : `10000`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "fov",
                "comment": " Field of view (in degrees).\n\nDefault : `80`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "near",
                "comment": " Camera frustum near clipping plane.\n\nDefault : `0.005`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "spectator",
                "comment": " Whether the camera is used to render a third-person view of the scene on the 2D display while in VR mode.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "zoom",
                "comment": " Zoom factor of the camera.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.Daydream",
        "comment": " The `daydream-controls` component interfaces with the Google Daydream controllers. It wraps the `tracked-controls` component while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad).\n\nAs a first time set up, to use the Daydream controller on Chrome for Android enable both `WebVR` and `Gamepad` Extensions experiments in `chrome://flags` and relaunch the browser.\n\nThen, open your web app, enter VR mode and place the phone inside the headset. It can occassionally take a few seconds before the controller can be used.\n\n# Basic\n\n@docs hand, armModel, model\n\n# Buttons colors\n\n@docs buttonColor, buttonTouchedColor, buttonHighlightColor\n\n# Orientation\n\n@docs orientationOffset\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "armModel",
                "comment": " Whether the arm model is used for positional data.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "buttonColor",
                "comment": " Button colors when not pressed.\n\nDefault : `#000000`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "buttonHighlightColor",
                "comment": " Button colors when pressed and active.\n\nDefault : `#FFFFFF`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "buttonTouchedColor",
                "comment": " Button colors when touched.\n\nDefault : `#777777`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "hand",
                "comment": " Set hand that will be tracked (i.e., `right`, `left`). ",
                "type": "AFrame.Variants.Hand.Hand -> AFrame.Properties.Property"
            },
            {
                "name": "model",
                "comment": " Whether the controller model is loaded.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "orientationOffset",
                "comment": " Offset to apply to model orientation.\n\nDefault: `x: 0, y: 0, z: 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.GearVR",
        "comment": " # GearVR Controls\n\n# Basic\n\n@docs hand, armModel, model\n\n# Buttons colors\n\n@docs buttonColor, buttonTouchedColor, buttonHighlightColor\n\n# Orientation\n\n@docs orientationOffset\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "armModel",
                "comment": " Whether the arm model is used for positional data.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "buttonColor",
                "comment": " Button colors when not pressed.\n\nDefault : `#000000`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "buttonHighlightColor",
                "comment": " Button colors when pressed and active.\n\nDefault : `#FFFFFF`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "buttonTouchedColor",
                "comment": " Button colors when touched.\n\nDefault : `#777777`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "hand",
                "comment": " Set hand that will be tracked (i.e., `right`, `left`). ",
                "type": "AFrame.Variants.Hand.Hand -> AFrame.Properties.Property"
            },
            {
                "name": "model",
                "comment": " Whether the controller model is loaded.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "orientationOffset",
                "comment": " Offset to apply to model orientation.\n\nDefault: `x: 0, y: 0, z: 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.Hand",
        "comment": " # Hand Controls\n\n@docs hand, handModelStyle, color\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "color",
                "comment": " Color of hand material.\n\nDefault : `white`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "hand",
                "comment": " Set hand that will be tracked (i.e., `right`, `left`). ",
                "type": "AFrame.Variants.Hand.Hand -> AFrame.Properties.Property"
            },
            {
                "name": "handModelStyle",
                "comment": " Style of the hand 3D model loaded. Can be `lowPoly`, `highPoly` or `toon`.\n\nDefault: `lowPoly`\n",
                "type": "AFrame.Variants.HandStyle.HandStyle -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.Laser",
        "comment": " # Laser Controls\n\n@docs hand, model, defaultModelColor\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "defaultModelColor",
                "comment": " Color for the default controller model.\n\n`laser-controls`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "hand",
                "comment": " Set hand that will be tracked (i.e., `right`, `left`). ",
                "type": "AFrame.Variants.Hand.Hand -> AFrame.Properties.Property"
            },
            {
                "name": "model",
                "comment": " Whether the controller model is loaded.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.Look",
        "comment": " # Look Controls\n\n@docs enabled, hmdEnabled, touchEnabled, pointerLockEnabled, reverseMouseDrag, reverseTouchDrag\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "enabled",
                "comment": " Whether look controls are enabled.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "hmdEnabled",
                "comment": " Whether to use VR headset pose in VR mode.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "pointerLockEnabled",
                "comment": " Whether to hide the cursor using the [Pointer Lock API](https://developer.mozilla.org/docs/Web/API/Pointer_Lock_API).\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "reverseMouseDrag",
                "comment": " Whether to reverse mouse drag\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "reverseTouchDrag",
                "comment": " Whether to reverse touch drag\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "touchEnabled",
                "comment": " Whether to use touch controls in magic window mode.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.OculusGo",
        "comment": " # Oculus Go Controls\n\n# Basic\n\n@docs hand, armModel, model\n\n# Buttons colors\n\n@docs buttonColor, buttonTouchedColor, buttonHighlightColor\n\n# Orientation\n\n@docs orientationOffset\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "armModel",
                "comment": " Whether the arm model is used for positional data.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "buttonColor",
                "comment": " Button colors when not pressed.\n\nDefault : `#000000`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "buttonHighlightColor",
                "comment": " Button colors when pressed and active.\n\nDefault : `#FFFFFF`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "buttonTouchedColor",
                "comment": " Button colors when touched.\n\nDefault : `#777777`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "hand",
                "comment": " Set hand that will be tracked (i.e., `right`, `left`). ",
                "type": "AFrame.Variants.Hand.Hand -> AFrame.Properties.Property"
            },
            {
                "name": "model",
                "comment": " Whether the controller model is loaded.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "orientationOffset",
                "comment": " Offset to apply to model orientation.\n\nDefault: `x: 0, y: 0, z: 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.OculusTouch",
        "comment": " # Oculus Touch Controls\n\n# Basic\n\n@docs hand, model\n\n# Orientation\n\n@docs orientationOffset\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "hand",
                "comment": " Set hand that will be tracked (i.e., `right`, `left`). ",
                "type": "AFrame.Variants.Hand.Hand -> AFrame.Properties.Property"
            },
            {
                "name": "model",
                "comment": " Whether the controller model is loaded.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "orientationOffset",
                "comment": " Offset to apply to model orientation.\n\nDefault: `x: 0, y: 0, z: 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.Tracked",
        "comment": " # Tracked Controls\n\n# Basic\n\n@docs hand, armModel, headModel, autoHide\n\n# Controller\n\n@docs controller, id, idPrefix\n\n# Orientation\n\n@docs orientationOffset\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "armModel",
                "comment": " Whether the arm model is used for positional data.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "autoHide",
                "comment": " Whether to toggle visibility automatically when controller is connected or disconnected.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "controller",
                "comment": " Index of the controller in array returned by the Gamepad API.\n\nDefault : `0`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "hand",
                "comment": " Set hand that will be tracked (i.e., `right`, `left`). ",
                "type": "AFrame.Variants.Hand.Hand -> AFrame.Properties.Property"
            },
            {
                "name": "headModel",
                "comment": " Head element for arm model if needed (if not active camera).\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "id",
                "comment": " Selects the controller from the Gamepad API using exact match.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "idPrefix",
                "comment": " Selects the controller from the Gamepad API using prefix match.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "orientationOffset",
                "comment": " Offset to apply to model orientation.\n\nDefault: `x: 0, y: 0, z: 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.Vive",
        "comment": " # Vive Controls\n\n# Basic\n\n@docs hand,  model\n\n# Buttons colors\n\n@docs buttonColor, buttonHighlightColor\n\n# Orientation\n\n@docs orientationOffset\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "buttonColor",
                "comment": " Button colors when not pressed.\n\nDefault : `#FAFAFA` (_off-white_)\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "buttonHighlightColor",
                "comment": " Button colors when pressed and active.\n\nDefault : `#22D1EE` (_light blue_)\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "hand",
                "comment": " Set hand that will be tracked (i.e., `right`, `left`). ",
                "type": "AFrame.Variants.Hand.Hand -> AFrame.Properties.Property"
            },
            {
                "name": "model",
                "comment": " Whether the Vive controller model is loaded.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "orientationOffset",
                "comment": " Offset to apply to model orientation.\n\nDefault: `x: 0, y: 0, z: 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.ViveFocus",
        "comment": " # Oculus Go Controls\n\n# Basic\n\n@docs hand, armModel, model\n\n# Buttons colors\n\n@docs buttonTouchedColor, buttonHighlightColor\n\n# Orientation\n\n@docs orientationOffset\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "armModel",
                "comment": " Whether the arm model is used for positional data.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "buttonHighlightColor",
                "comment": " Button colors when pressed and active.\n\nDefault : `#FFFFFF`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "buttonTouchedColor",
                "comment": " Button colors when touched (Trackpad only).\n\nDefault : `#777777`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "hand",
                "comment": " Set hand that will be tracked (i.e., `right`, `left`). ",
                "type": "AFrame.Variants.Hand.Hand -> AFrame.Properties.Property"
            },
            {
                "name": "model",
                "comment": " Whether the Vive Focus controller model is loaded.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "orientationOffset",
                "comment": " Offset to apply to model orientation.\n\nDefault: `x: 0, y: 0, z: 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.Wasd",
        "comment": " # WSAD Controls\n\n# Basic\n\n@docs enabled, acceleration, fly\n\n# Axes\n\n@docs adAxis, wsAxis, adInverted, wsInverted\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "acceleration",
                "comment": " How fast the entity accelerates when holding the keys.\n\nDefault : `65`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "adAxis",
                "comment": " Axis that the A and D keys act upon\n\nDefault : `x`\n",
                "type": "AFrame.Variants.Axis.Axis -> AFrame.Properties.Property"
            },
            {
                "name": "adInverted",
                "comment": " Whether the axis that the A and D keys act upon are inverted.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "enabled",
                "comment": " Whether the WASD controls are enabled.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "fly",
                "comment": " Whether or not movement is restricted to the entity’s initial plane.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "wsAxis",
                "comment": " Axis that the W and S keys act upon\n\nDefault : `z`\n",
                "type": "AFrame.Variants.Axis.Axis -> AFrame.Properties.Property"
            },
            {
                "name": "wsInverted",
                "comment": " Whether the axis that the W and S keys act upon are inverted.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Controls.WindowsMotion",
        "comment": " # Windows Motion Controls\n\n# Basic\n\n@docs hand, model, hideDisconnected\n\n# Controllers\n\n@docs pair\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "hand",
                "comment": " Set hand that will be tracked (i.e., `right`, `left`). ",
                "type": "AFrame.Variants.Hand.Hand -> AFrame.Properties.Property"
            },
            {
                "name": "hideDisconnected",
                "comment": " Disable rendering of controller model when no matching gamepad (based on ID & hand) is connected.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "model",
                "comment": " Whether the controller model is loaded.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "pair",
                "comment": " Which pair of controllers, if > 2 are connected.\n\nDefault : `0`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Cursor",
        "comment": " # Cursor\n\n@docs fuse, fuseTimeout, rayOrigin\n\n# Events\n\n@docs downEvents, upEvents\n\n# Style\n\n@docs mouseCursorStylesEnabled\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "downEvents",
                "comment": " Array of additional events on the entity to listen to for triggering mousedown (e.g., triggerdown for vive-controls).\n\nDefault : `[]`\n",
                "type": "List.List AFrame.EventRefs.EventRef -> AFrame.Properties.Property"
            },
            {
                "name": "fuse",
                "comment": " Whether cursor is fuse-based.\n\nDefault : `false` on desktop, `true` on mobile\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "fuseTimeout",
                "comment": " How long to wait (in milliseconds) before triggering a fuse-based click event.\n\nDefault : `1500`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "mouseCursorStylesEnabled",
                "comment": " Whether to show pointer cursor in `rayOrigin: mouse` mode when hovering over entity.\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "rayOrigin",
                "comment": " Where the intersection ray is cast from (i.e.,`entity` or `mouse`). `rayOrigin: mouse` is extremely useful for VR development on a mouse and keyboard.\n\nDefault: `entity`\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "upEvents",
                "comment": " Array of additional events on the entity to listen to for triggering mouseup (e.g., trackpadup for daydream-controls).\n\nDefault : `[]`\n",
                "type": "List.List AFrame.EventRefs.EventRef -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.DeviceOrientation",
        "comment": " # Device Orientation\n\nStarting with Safari on iOS 13 browsers require sites to be served over https and request user permission to access DeviceOrientation events. This component presents a permission dialog for the user to grant or deny access. The device-orientation-permission-ui component applies only to the `<a-scene>` element\n\n@docs enabled\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "enabled",
                "comment": " Whether or not to display the dialog when required\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Fog",
        "comment": " # Fog\n\n@docs type_, color\n\n# Linear\n\n@docs near, far\n\n# Exponential\n\n@docs density\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "color",
                "comment": " Color of fog. For example, if set to black, far away objects will be rendered black.\n\nDefault : `#000`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "density",
                "comment": " How quickly the fog grows dense.\n\n`exponential`\n\nDefault : `0.00025`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "far",
                "comment": " Maximum distance to stop applying fog. Objects farther than this won’t be affected by fog.\n\n`linear`\n\nDefault : `1000`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "near",
                "comment": " Minimum distance to start applying fog. Objects closer than this won’t be affected by fog.\n\n`linear`\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "type_",
                "comment": " Type of fog distribution. Can be `linear` or `exponential`.\n\nDefault : `linear`\n\n",
                "type": "AFrame.Variants.Fog.Fog -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry",
        "comment": " # Geometry\n\n@docs primitive\n\n# Config\n\n@docs buffer, skipCache\n\n*NB:* The functions below are just the references to all the possible properties of primitives in `AFrame.Components.Geometry`, not to make you import every module separately when in urgen need. Still we recommend to prefer using those for particular primitives instead.\n\n# Dimensions\n\n@docs width, height, depth\n\n# Radial dimensions\n\n@docs radius, radiusInner, radiusOuter, radiusTubular\n\n# Mesh structure\n\n@docs segments, segmentsWidth, segmentsHeight, segmentsDepth\n\n# Radial mesh structure\n\n@docs segmentsRadial, segmentsTubular, segmentsTheta, segmentsPhi\n\n# Phi & Theta for partial primitives\n\n@docs phiStart, phiLength, thetaStart, thetaLength\n\n# Partial primitives\n\n@docs arc, p, q\n\n# Vertices\n\n@docs vertexA, vertexB, vertexC\n\n# Cone open end\n\n@docs openEnded\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "arc",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "buffer",
                "comment": " Transform geometry into a BufferGeometry to reduce memory usage at the cost of being harder to manipulate.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "depth",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "height",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "openEnded",
                "comment": " ",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "p",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "phiLength",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "phiStart",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "primitive",
                "comment": " Name of a geometry. Determines the geometry type and what other properties are available.\n\nDefault : `box`\n",
                "type": "AFrame.Variants.Primitive.Primitive -> AFrame.Properties.Property"
            },
            {
                "name": "q",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "radius",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "radiusInner",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "radiusOuter",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "radiusTubular",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "segments",
                "comment": " ",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsDepth",
                "comment": " ",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsHeight",
                "comment": " ",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsPhi",
                "comment": " ",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsRadial",
                "comment": " ",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsTheta",
                "comment": " ",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsTubular",
                "comment": " ",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsWidth",
                "comment": " ",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "skipCache",
                "comment": " Disable retrieving the shared geometry object from the cache.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "thetaLength",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "thetaStart",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "vertexA",
                "comment": " ",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "vertexB",
                "comment": " ",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "vertexC",
                "comment": " ",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "width",
                "comment": " ",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Box",
        "comment": " # Box\n\n# Dimensions\n\n@docs width, height, depth\n\n# Mesh\n\n@docs segmentsWidth, segmentsHeight, segmentsDepth\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "depth",
                "comment": " Depth (in meters) of the sides on the Z axis.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "height",
                "comment": " Height (in meters) of the sides on the Y axis.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsDepth",
                "comment": " Number of segmented faces on the z-axis\n\n`box`\n\nDefault : `1`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsHeight",
                "comment": " Number of segmented faces on the y-axis\n\n`box`\n\nDefault : `1`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsWidth",
                "comment": " Number of segmented faces on the x-axis\n\n`box`\n\nDefault : `1`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "width",
                "comment": " Width (in meters) of the sides on the X axis.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Circle",
        "comment": " # Circle\n\n# Dimensions\n\n@docs radius\n\n# Mesh\n\n@docs segments\n\n# Partial\n\n@docs thetaStart, thetaLength\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "radius",
                "comment": " Radius (in meters) of the circle.\n\nDefault: `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "segments",
                "comment": " Number of triangles to construct the circle, like pizza slices. A higher number of segments means the circle will be more round.\n\nDefault: `32`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "thetaLength",
                "comment": " The central angle (in degrees). Defaults to 360, which makes for a complete circle.\n\nDefault: `360`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "thetaStart",
                "comment": " Start angle for first segment. Can be used to define a partial circle.\n\nDefault: `0`\n\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Cone",
        "comment": " # Cone\n\n# Dimensions\n\n@docs height, radiusTop, radiusBottom\n\n# Mesh\n\n@docs segmentsRadial, segmentsHeight, openEnded\n\n# Partial\n\n@docs thetaStart, thetaLength\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "height",
                "comment": " Height of a cone.\n\nDefault : `2`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "openEnded",
                "comment": " Whether the ends of the cone are open (true) or capped (false).\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "radiusBottom",
                "comment": " Radius of the bottom end of the cone.\n\nDefault: `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "radiusTop",
                "comment": " Radius of the top end of the cone.\n\nDefault: `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsHeight",
                "comment": " Number of rows of faces along the height of the cone.\n\nDefault: `18`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsRadial",
                "comment": " Number of segmented faces around the circumference of the cone.\n\nDefault: `36`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "thetaLength",
                "comment": " Central angle in degrees.\n\nDefault: `360`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "thetaStart",
                "comment": " Start angle in degrees.\n\nDefault: `0`\n\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Cylinder",
        "comment": " # Cylinder\n\n# Dimensions\n\n@docs radius, height\n\n# Mesh\n\n@docs segmentsRadial, segmentsHeight, openEnded\n\n# Partial\n\n@docs thetaStart, thetaLength\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "height",
                "comment": " Height of a cylinder.\n\nDefault : `2`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "openEnded",
                "comment": " Whether the ends of the cylinder are open (true) or capped (false).\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "radius",
                "comment": " Radius of a cylinder.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsHeight",
                "comment": " Number of rows of faces along the height of the cylinder.\n\nDefault: `18`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsRadial",
                "comment": " Number of segmented faces around the circumference of the cylinder.\n\nDefault: `36`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "thetaLength",
                "comment": " Central angle in degrees.\n\nDefault: `360`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "thetaStart",
                "comment": " Start angle in degrees.\n\nDefault: `0`\n\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Dodecahedron",
        "comment": " # Dodecahedron\n\n# Dimensions\n\n@docs radius\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "radius",
                "comment": " Radius (in meters) of the dodecahedron.\n\nDefault: `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Octahedron",
        "comment": " # Octahedron\n\n# Dimensions\n\n@docs radius\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "radius",
                "comment": " Radius (in meters) of the octahedron.\n\nDefault: `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Plane",
        "comment": " # Plane\n\n# Dimensions\n\n@docs width, height\n\n# Mesh\n\n@docs segmentsWidth, segmentsHeight\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "height",
                "comment": " Height along the Y axis.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsHeight",
                "comment": " Number of segmented faces on the y-axis\n\nDefault: `1`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsWidth",
                "comment": " Number of segmented faces on the x-axis\n\nDefault: `1`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "width",
                "comment": " Width along the X axis.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Ring",
        "comment": " # Ring\n\n# Dimensions\n\n@docs radiusInner, radiusOuter\n\n# Mesh\n\n@docs segmentsTheta, segmentsPhi\n\n# Partial\n\n@docs thetaStart, thetaLength\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "radiusInner",
                "comment": " Radius of the inner hole of the ring.\n\nDefault: `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "radiusOuter",
                "comment": " Radius of the outer edge of the ring.\n\nDefault: `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsPhi",
                "comment": " Number of triangles within each face defined by segmentsTheta.\n\nDefault: `8`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsTheta",
                "comment": " Number of segments. A higher number means the ring will be more round.\n\nDefault: `32`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "thetaLength",
                "comment": " Central angle in degrees.\n\nDefault: `360`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "thetaStart",
                "comment": " Start angle in degrees\n\nDefault: `0`\n\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Sphere",
        "comment": " # Sphere\n\n# Dimensions\n\n@docs radius\n\n# Mesh\n\n@docs segmentsWidth, segmentsHeight\n\n# Partial\n\n@docs phiStart, phiLength, thetaStart, thetaLength\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "phiLength",
                "comment": " Horizontal sweep angle size.\n\nDefault: `360`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "phiStart",
                "comment": " Horizontal starting angle.\n\nDefault: `0`\n\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "radius",
                "comment": " Radius (in meters) of the sphere.\n\nDefault: `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsHeight",
                "comment": " Number of vertical segments.\n\nDefault: `36`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsWidth",
                "comment": " Number of horizontal segments.\n\nDefault: `18`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "thetaLength",
                "comment": " Vertical sweep angle size.\n\nDefault: `360`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "thetaStart",
                "comment": " Vertical starting angle.\n\nDefault: `0`\n\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Tetrahedron",
        "comment": " # Tetrahedron\n\n# Dimensions\n\n@docs radius\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "radius",
                "comment": " Radius (in meters) of the tetrahedron.\n\nDefault: `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Torus",
        "comment": " # Torus\n\n# Dimensions\n\n@docs radius, radiusTubular\n\n# Mesh\n\n@docs segmentsRadial, segmentsTubular\n\n# Partial\n\n@docs arc\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "arc",
                "comment": " Central angle\n\nDefault: `360`\n\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "radius",
                "comment": " Radius of the outer edge of the torus.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "radiusTubular",
                "comment": " Radius of the tube.\n\nDefault : `0.2`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsRadial",
                "comment": " Number of segments along the circumference of the tube ends. A higher number means the tube will be more round.\n\nDefault: `36`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsTubular",
                "comment": " Number of segments along the circumference of the tube face. A higher number means the tube will be more round.\n\nDefault: `32`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.TorusKnot",
        "comment": " # TorusKnot\n\n# Dimensions\n\n@docs radius, radiusTubular\n\n# Mesh\n\n@docs segmentsRadial, segmentsTubular\n\n# Partial\n\n@docs p, q\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "p",
                "comment": " How many times the geometry winds around its axis of rotational symmetry.\n\nDefault: `2`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "q",
                "comment": " How many times the geometry winds around a circle in the interior of the torus\n\nDefault: `3`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "radius",
                "comment": " Radius of the outer edge of the torus.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "radiusTubular",
                "comment": " Radius of the tube.\n\nDefault : `0.2`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsRadial",
                "comment": " Number of segments along the circumference of the tube ends. A higher number means the tube will be more round.\n\nDefault: `36`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "segmentsTubular",
                "comment": " Number of segments along the circumference of the tube face. A higher number means the tube will be more round.\n\nDefault: `32`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Geometry.Triangle",
        "comment": " # Triangle\n\n# Points\n\n@docs vertexA, vertexB, vertexC\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "vertexA",
                "comment": " Coordinates of one of the three vertices.\n\nDefault : `0 0.5 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "vertexB",
                "comment": " Coordinates of one of the three vertices.\n\nDefault : `-0.5 -0.5 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "vertexC",
                "comment": " Coordinates of one of the three vertices.\n\nDefault : `0.5 -0.5 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Keyboard",
        "comment": " # Keyboard\n\n@docs enterVr\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "enterVr",
                "comment": " ",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Light",
        "comment": " # Light\n\n@docs type_\n\n# Colors\n\n@docs color, groundColor\n\n# Rotation\n\n@docs target, distance, angle\n\n# Characteristics\n\n@docs intensity, decay, penumbra\n\n# Shadow\n\nSee `AFrame.Components.Shadow` for shadow properties\n\n@docs castShadow\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "angle",
                "comment": " Maximum extent of spot light from its direction (in degrees).\n\n`spot`\n\nDefault : `60`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "castShadow",
                "comment": " Whether this light casts shadows on the scene.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "color",
                "comment": " Light color.\n\n`ambient`, `directional`, `hemisphere` (_from above_), `point`, `spot`\n\nDefault : `#fff`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "decay",
                "comment": " Amount the light dims along the distance of the light.\n\n`point`, `spot`\n\nDefault : `1.0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "distance",
                "comment": " Distance where intensity becomes `0`. If distance is `0`, then the point light does not decay with distance.\n\n`point`, `spot`\n\nDefault : `0.0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "groundColor",
                "comment": " Light color from below.\n\n`hemisphere`\n\nDefault : `#fff`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "intensity",
                "comment": " Light strength.\n\n`ambient`, `directional`, `hemisphere`, `point`, `spot`\n\nDefault : `1.0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "penumbra",
                "comment": " Percent of the spotlight cone that is attenuated due to penumbra.\n\n`spot`\n\nDefault : `0.0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "target",
                "comment": " element the spot should point to. set to null to transform spotlight by orientation, pointing to it’s `-Z` axis\n\n`spot`\n\nDefault : `null`\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "type_",
                "comment": " One of `ambient`, `directional`, `hemisphere`, `point`, `spot`.\n\nDefault : `directional`\n",
                "type": "AFrame.Variants.Light.Light -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Line",
        "comment": " # Line\n\n@docs color, start, end, opacity, visible\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "color",
                "comment": " Color of fog. For example, if set to black, far away objects will be rendered black.\n\nDefault : `#000`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "end",
                "comment": " End point coordinate.\n\nDefault : `0 0 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "opacity",
                "comment": " Line opacity.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "start",
                "comment": " Start point coordinate.\n\nDefault : `0 0 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "visible",
                "comment": " Whether the material visible.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Link",
        "comment": " # Link\n\n@docs href, image, title\n\n# Colors\n\n@docs backgroundColor, borderColor, highlightedColor, titleColor\n\n# Configuration\n\n@docs highlighted, peekMode, visualAspectEnabled\n\n# Events\n\n@docs on\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "backgroundColor",
                "comment": " Inner (background) color of the portal.\n\nDefault : `red`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "borderColor",
                "comment": " Border color of the portal.\n\nDefault : `white`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "highlighted",
                "comment": " Boolean to toggle link highlight color.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "highlightedColor",
                "comment": " Border color when highlighted.\n\nDefault : `#24CAFF`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "href",
                "comment": " Destination URL where the link points to.\n\nDefault : `''`\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "image",
                "comment": " 360° image used as scene preview in the portal. Can be a selector to an <img> element or a URL.\n\nDefault : `''`\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "on",
                "comment": " Event to listen to that triggers link traversal.\n\nDefault : `click`\n",
                "type": "AFrame.EventRefs.EventRef -> AFrame.Properties.Property"
            },
            {
                "name": "peekMode",
                "comment": " Whether the 360° image is fully expanded for preview.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "title",
                "comment": " Text displayed on the link. The href or page URL is used if not defined.\n\nDefault : `''`\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "titleColor",
                "comment": " Color of the text displayed on the link.\n\nDefault : `white`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "visualAspectEnabled",
                "comment": " Whether to enable the default visual appearance of a portal. Set to false if we want to implement our own pattern or form of link traversal.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.LoadingScreen",
        "comment": " # LoadingScreen\n\n@docs dotsColor, backgroundColor, enabled\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "backgroundColor",
                "comment": " Loader background color.\n\nDefault : `#24CAFF`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "dotsColor",
                "comment": " Loader dots color.\n\nDefault : `white`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "enabled",
                "comment": " Enables / Disables the loading screen.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Material",
        "comment": " # Material\n\n@docs shader\n\n@docs alphaTest, depthTest\n\n@docs blending, dithering, flatShading\n\n@docs offset, opacity, repeat, side, transparent, npot\n\n@docs vertexColors, visible\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "alphaTest",
                "comment": " Alpha test threshold for transparency.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "blending",
                "comment": " The blending mode for the material’s RGB and Alpha sent to the WebGLRenderer. Can be one of `none`, `normal`, `additive`, `subtractive` or `multiply`.\n\nDefault : `normal`\n",
                "type": "AFrame.Variants.Blending.Blending -> AFrame.Properties.Property"
            },
            {
                "name": "depthTest",
                "comment": " Whether depth testing is enabled when rendering the material.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "dithering",
                "comment": " Whether material is dithered with noise. Removes banding from gradients like ones produced by lighting.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "flatShading",
                "comment": " Use `THREE.FlatShading` rather than `THREE.StandardShading`.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "npot",
                "comment": " Use settings for non-power-of-two (NPOT) texture.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "offset",
                "comment": " Texture offset to be used.\n\nDefault : `{x: 0, y: 0}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "opacity",
                "comment": " Extent of transparency. If the `transparent` property is not `true`, then the material will remain opaque and `opacity` will only affect color.\n\nDefault : `1.0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "repeat",
                "comment": " Texture repeat to be used.\n\nDefault : `{x: 1, y: 1}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "shader",
                "comment": " Which material to use. Defaults to the [standard material](https://aframe.io/docs/1.0.0/components/material.html#standard). Can be set to the [flat material](https://aframe.io/docs/1.0.0/components/material.html#flat) or to a registered custom shader material.\n\nDefault : `standard`\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "side",
                "comment": " Which sides of the mesh to render. Can be one of `front`, `back`, or `double`.\n\nDefault : `front`\n",
                "type": "AFrame.Variants.Side.Side -> AFrame.Properties.Property"
            },
            {
                "name": "transparent",
                "comment": " Whether material is transparent. Transparent entities are rendered after non-transparent entities.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "vertexColors",
                "comment": " Whether to use vertex or face colors to shade the material. Can be one of `none`, `vertex`, or `face`.\n\nDefault : `none`\n",
                "type": "AFrame.Variants.VertexColors.VertexColors -> AFrame.Properties.Property"
            },
            {
                "name": "visible",
                "comment": " Whether material is visible. Raycasters will ignore invisible materials.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Material.Flat",
        "comment": " # Flat Material\n\n# Source\n\n@docs src\n\n# Dimensions\n\n@docs width, height\n\n# Look\n\n@docs color, fog, wireframe, wireframeLinewidth\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "color",
                "comment": " Base diffuse color.\n\nDefault : `#fff`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "fog",
                "comment": " Whether or not material is affected by fog.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "height",
                "comment": " Height of video (in pixels), if defining a video texture.\n\nDefault : `360`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "src",
                "comment": " Image or video texture map. Can either be a selector to an `<img>` or `<video>`, or an inline URL.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "width",
                "comment": " Width of video (in pixels), if defining a video texture.\n\nDefault : `640`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "wireframe",
                "comment": " Whether to render just the geometry edges.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "wireframeLinewidth",
                "comment": " Width in px of the rendered line.\n\nDefault : `2`\n\nNB: It is `width` all-lowercase in docs and sources so it is intentionally left the same way\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Material.Standard",
        "comment": " # Standard Material\n\n# Source\n\n@docs src\n\n# Dimensions\n\n@docs width, height\n\n# Look\n\n@docs color, fog, wireframe, wireframeLinewidth\n\n# Repeat\n\n@docs repeat\n\n# Сharacteristics\n\n@docs emissive, emissiveIntensity, metalness, roughness\n\n# Ambient Occlusion\n\n@docs ambientOcclusionMap, ambientOcclusionMapIntensity, ambientOcclusionTextureRepeat, ambientOcclusionTextureOffset\n\n# Displacement Map\n\n@docs displacementMap, displacementScale, displacementBias, displacementTextureRepeat, displacementTextureOffset\n\n# Environment Map\n\n@docs envMap, sphericalEnvMap\n\n# Normal Map\n\n@docs normalMap, normalScale, normalTextureRepeat, normalTextureOffset\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "ambientOcclusionMap",
                "comment": " Ambient occlusion map. Used to add shadows to the mesh. Can either be a selector to an `<img>`, or an inline URL. Requires 2nd set of UVs (see below).\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "ambientOcclusionMapIntensity",
                "comment": " The intensity of the ambient occlusion map, a number between 0 and 1.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "ambientOcclusionTextureOffset",
                "comment": " How the ambient occlusion texture is offset in the x y direction.\n\nDefault : `{x: 0, y: 0}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "ambientOcclusionTextureRepeat",
                "comment": " How many times the ambient occlusion texture repeats in the X and Y direction.\n\nDefault : `{x: 1, y: 1}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "color",
                "comment": " Base diffuse color.\n\nDefault : `#fff`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "displacementBias",
                "comment": " The zero point of the displacement map.\n\nDefault : `0.5`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "displacementMap",
                "comment": " Displacement map. Used to distort a mesh. Can either be a selector to an `<img>`, or an inline URL.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "displacementScale",
                "comment": " The intensity of the displacement map effect\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "displacementTextureOffset",
                "comment": " How the displacement texture is offset in the x y direction.\n\nDefault : `{x: 0, y: 0}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "displacementTextureRepeat",
                "comment": " How many times the displacement texture repeats in the X and Y direction.\n\nDefault : `{x: 1, y: 1}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "emissive",
                "comment": " The color of the emissive lighting component. Used to make objects produce light even without other lighting in the scene.\n\nDefault : `#000`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "emissiveIntensity",
                "comment": " Intensity of the emissive lighting component.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "envMap",
                "comment": " Environment cubemap texture for reflections. Can be a selector to or a comma-separated list of URLs.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "fog",
                "comment": " Whether or not material is affected by fog.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "height",
                "comment": " Height of video (in pixels), if defining a video texture.\n\nDefault : `360`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "metalness",
                "comment": " How metallic the material is from 0 to 1.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "normalMap",
                "comment": " Normal map. Used to add the illusion of complex detail. Can either be a selector to an <img>, or an inline URL.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "normalScale",
                "comment": " Scale of the effect of the normal map in the X and Y directions.\n\nDefault : `{x: 1, y: 1}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "normalTextureOffset",
                "comment": " How the normal texture is offset in the x y direction.\n\nDefault : `{x: 0, y: 0}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "normalTextureRepeat",
                "comment": " How many times the normal texture repeats in the X and Y direction.\n\nDefault : `{x: 1, y: 1}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "repeat",
                "comment": " How many times a texture (defined by src) repeats in the X and Y direction.\n\nDefault : `{x: 1, y: 1}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "roughness",
                "comment": " How rough the material is from 0 to 1. A rougher material will scatter reflected light in more directions than a smooth material.\n\nDefault : `0.5`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "sphericalEnvMap",
                "comment": " Environment spherical texture for reflections. Can either be a selector to an <img>, or an inline URL.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "src",
                "comment": " Image or video texture map. Can either be a selector to an `<img>` or `<video>`, or an inline URL.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "width",
                "comment": " Width of video (in pixels), if defining a video texture.\n\nDefault : `640`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "wireframe",
                "comment": " Whether to render just the geometry edges.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "wireframeLinewidth",
                "comment": " Width in px of the rendered line.\n\nDefault : `2`\n\nNB: It is `width` all-lowercase in docs and sources so it is intentionally left the same way\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Model.Gltf",
        "comment": " # GLTF Model\n\n@docs dracoDecoderPath\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "dracoDecoderPath",
                "comment": "\nPath to the Draco decoder libraries.\n",
                "type": "String.String -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Model.Obj",
        "comment": " # OBJ Model\n\n@docs obj, material\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "material",
                "comment": " Selector to an <a-asset-item> pointing to a `.MTL` file or an inline path to a `.MTL` file. Optional if you wish to use the material component instead.\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "obj",
                "comment": " Selector to an `<a-asset-item>` pointing to a `.OBJ` file or an inline path to a `.OBJ` file.\n",
                "type": "String.String -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Pool",
        "comment": " # Pool\n\n@docs container, size, dynamic, mixin\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "container",
                "comment": " Selector to store pooled entities. Defaults to the scene.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "dynamic",
                "comment": " Grow the pool automatically if more entities are requested after reaching the `size`.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "mixin",
                "comment": " Mixin required to initialize the entities of the pool.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "size",
                "comment": " Number of preallocated entities in the pool.\n\nDefault : `0`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Position",
        "comment": " # Position\n\n@docs x, y, z\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "x",
                "comment": " Negative X axis extends left. Positive X Axis extends right.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "y",
                "comment": " Negative Y axis extends down. Positive Y Axis extends up.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "z",
                "comment": " Negative Z axis extends in. Positive Z Axis extends out.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Raycaster",
        "comment": " # Raycaster\n\n# Setup\n\n@docs origin, direction, objects, interval\n\n# Continuation\n\n@docs near, far, inifitelyFar\n\n# Other\n\n@docs showLine, autoRefresh, enabled, useWorldCoordinates\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "autoRefresh",
                "comment": " Whether to automatically refresh raycaster’s list of objects to test for intersection using mutation observers to detect added or removed entities and components.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "direction",
                "comment": " Vector3 coordinate of which direction the ray should point from relative to the entity’s origin.\n\nDefault : `0 0 -1`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "enabled",
                "comment": " Whether raycaster is actively checking for intersections.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "far",
                "comment": " Maximum distance under which resulting entities are returned. Cannot be lower than `near`.\n\nDefault : _Infinity_\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "inifitelyFar",
                "comment": " ",
                "type": "AFrame.Properties.Property"
            },
            {
                "name": "interval",
                "comment": " Number of milliseconds to wait in between each intersection test. Lower number is better for faster updates. Higher number is better for performance. Intersection tests are performed at most once per frame.\n\nDefault : `0`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "near",
                "comment": " Minimum distance over which resuilting entities are returned. Cannot be lower than 0.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "objects",
                "comment": " Query selector to pick which objects to test for intersection. If not specified, all entities will be tested. Note that only objects attached via `.setObject3D` and their recursive children will be tested.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "origin",
                "comment": " Vector3 coordinate of where the ray should originate from relative to the entity’s origin.\n\nDefault : `0 0 0`\n",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "showLine",
                "comment": " Whether or not to display the raycaster visually with the line component.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "useWorldCoordinates",
                "comment": " Whether the raycaster origin and direction properties are specified in world coordinates.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Renderer",
        "comment": " # Renderer\n\n# Canvas\n\n@docs maxCanvasWidth, maxCanvasHeight\n\n# Configuration\n\n@docs alpha, antialias, antialiasAuto, colorManagement, foveationLevel, highRefreshRate, logarithmicDepthBuffer, logarithmicDepthBufferAuto, physicallyCorrectLights, precision, sortObjects\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "alpha",
                "comment": " Whether the canvas should contain an alpha buffer.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "antialias",
                "comment": " Whether to perform antialiasing.\n\nDefault : `auto`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "antialiasAuto",
                "comment": " Antialiasing is disabled on mobile, enabled on desktop. ",
                "type": "AFrame.Properties.Property"
            },
            {
                "name": "colorManagement",
                "comment": " Whether to use a color-managed linear workflow.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "foveationLevel",
                "comment": " Enables foveation in VR to improve perf.\n\nDefault : `none`\n",
                "type": "AFrame.Variants.FoveationLevel.FoveationLevel -> AFrame.Properties.Property"
            },
            {
                "name": "highRefreshRate",
                "comment": " Toggles 72hz mode on Oculus Browser. Defaults to 60hz.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "logarithmicDepthBuffer",
                "comment": " Whether to use a logarithmic depth buffer.\n\nDefault : `auto`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "logarithmicDepthBufferAuto",
                "comment": " ",
                "type": "AFrame.Properties.Property"
            },
            {
                "name": "maxCanvasHeight",
                "comment": " Maximum canvas height. Behaves the same as `maxCanvasWidth`.\n\nDefault : `1920`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "maxCanvasWidth",
                "comment": " Maximum canvas width. Uses the size multiplied by device pixel ratio. Does not limit canvas width if set to `-1`.\n\nDefault : `1920`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "physicallyCorrectLights",
                "comment": " Whether to use physically-correct light attenuation.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "precision",
                "comment": " Fragment shader precision : `low`, `medium` or `high`.\n\nDefault : `high`\n",
                "type": "AFrame.Variants.Precision.Precision -> AFrame.Properties.Property"
            },
            {
                "name": "sortObjects",
                "comment": " Whether to sort objects before rendering.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Rotation",
        "comment": " # Rotation\n\n@docs x, y, z\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "x",
                "comment": " Pitch, rotation about the X-axis.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "y",
                "comment": " Yaw, rotation about the Y-axis.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "z",
                "comment": " Roll, rotation about the Z-axis.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Scale",
        "comment": " # Scale\n\n@docs x, y, z\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "x",
                "comment": " Scaling factor in the X direction.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "y",
                "comment": " Scaling factor in the Y direction.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "z",
                "comment": " Scaling factor in the Z direction.\n\nDefault : `1`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Screenshot",
        "comment": " # Screenshot\n\n@docs width, height\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "height",
                "comment": " The height in pixels of the screenshot taken.\n\nDefault : `2048`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "width",
                "comment": " The width in pixels of the screenshot taken.\n\nDefault : `4096`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Shadow",
        "comment": " # Shadow\n\nSee `AFrame.Components.Light` for corresponding light component.\n\n@docs type_\n\n# Cast / Receive\n\n@docs cast, receive\n\n# Shadow Map\n\n@docs shadowMapWidth, shadowMapHeight\n\n# Shadow Camera Cube\n\n@docs shadowCameraLeft, shadowCameraTop, shadowCameraRight, shadowCameraBottom, shadowCameraNear, shadowCameraFar\n\n# Shadow Camera Options\n\n@docs shadowCameraFov, shadowCameraVisible\n\n# Configuration\n\n@docs shadowBias, autoUpdate, enabled\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "autoUpdate",
                "comment": " Whether to dynamically update the shadow map every frame. Disable and manually update by setting `renderer.shadowMap.needsUpdate = true` for best performance. Calculating shadow maps is expensive.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "cast",
                "comment": " Whether the entity casts shadows onto the surrounding scene.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "enabled",
                "comment": " Whether to disable shadows globally, even if there is a shadow component and a light with `castShadow: true` enabled.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "receive",
                "comment": " Whether the entity receives shadows from the surrounding scene.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "shadowBias",
                "comment": " Offset depth when deciding whether a surface is in shadow. Tiny adjustments here (in the order of +/-0.0001) may reduce artifacts in shadows.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "shadowCameraBottom",
                "comment": " Bottom plane of shadow camera frustum.\n\n`directional`\n\nDefault : `-5`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "shadowCameraFar",
                "comment": " Far plane of shadow camera frustum.\n\nDefault : `500`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "shadowCameraFov",
                "comment": " Shadow camera’s FOV.\n\n`point`, `spot`\n\nDefault : `50`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "shadowCameraLeft",
                "comment": " Left plane of shadow camera frustum.\n\n`directional`\n\nDefault : `-5`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "shadowCameraNear",
                "comment": " Near plane of shadow camera frustum.\n\nDefault : `0.5`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "shadowCameraRight",
                "comment": " Right plane of shadow camera frustum.\n\n`directional`\n\nDefault : `5`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "shadowCameraTop",
                "comment": " Top plane of shadow camera frustum.\n\n`directional`\n\nDefault : `5`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "shadowCameraVisible",
                "comment": " Displays a visual aid showing the shadow camera’s position and frustum. This is the light’s view of the scene, used to project shadows.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "shadowMapHeight",
                "comment": " Displays a visual aid showing the shadow camera’s position and frustum. This is the light’s view of the scene, used to project shadows.\n\nDefault : `false`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "shadowMapWidth",
                "comment": " Displays a visual aid showing the shadow camera’s position and frustum. This is the light’s view of the scene, used to project shadows.\n\nDefault : `false`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "type_",
                "comment": " Defines shadow map type (`basic`, `pcf`, `pcfsoft`) with varying appearance and performance characteristics.\n\nDefault : `pcf` (_percentage closer filtering_)\n",
                "type": "AFrame.Variants.Shadow.Shadow -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.Text",
        "comment": " # Text\n\n@docs value, font, fontImage, color, opacity, transparent\n\n# Material\n\n@docs shader, npot, side, dithering, flatShading\n\n# Bounds\n\n@docs width, height\n\n# Typography\n\n@docs align, anchor, baseline, lineHeight, whiteSpace, wrapCount, wrapPixels, letterSpacing, tabSize\n\n# Offset & Repeat\n\n@docs offset, xOffset, zOffset, repeat\n\n# Alpha & Depth\n\n@docs alphaTest, depthTest\n\n# Visible\n\n@docs visible\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "align",
                "comment": " Multi-line text alignment (`left`, `center`, `right`).\n\nDefault : `left`\n",
                "type": "AFrame.Variants.Text.Align.Align -> AFrame.Properties.Property"
            },
            {
                "name": "alphaTest",
                "comment": " Discard text pixels if alpha is less than this value.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "anchor",
                "comment": " Horizontal positioning (`left`, `center`, `right`, `align`).\n\nDefault : `center`\n",
                "type": "AFrame.Variants.Text.Anchor.Anchor -> AFrame.Properties.Property"
            },
            {
                "name": "baseline",
                "comment": " Vertical positioning (`top`, `center`, `bottom`).\n\nDefault : `center`\n",
                "type": "AFrame.Variants.Text.Baseline.Baseline -> AFrame.Properties.Property"
            },
            {
                "name": "color",
                "comment": " Text color.\n\nDefault : `white`\n",
                "type": "Color.Color -> AFrame.Properties.Property"
            },
            {
                "name": "depthTest",
                "comment": " Whether depth testing is enabled when rendering the material.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "dithering",
                "comment": " Whether material is dithered with noise. Removes banding from gradients like ones produced by lighting.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "flatShading",
                "comment": " Use `THREE.FlatShading` rather than `THREE.StandardShading`.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "font",
                "comment": " Font to render text, either the name of one of [A-Frame’s stock fonts](https://aframe.io/docs/1.0.0/components/text.html#stock-fonts) or a URL to a font file.\n\nDefault : `default`\n",
                "type": "AFrame.Variants.Text.Font.Font -> AFrame.Properties.Property"
            },
            {
                "name": "fontImage",
                "comment": " Font image texture path to render text. Defaults to the font‘s name with extension replaced to .png. Don’t need to specify if using a stock font.\n\nDefault : _derived from font name_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "height",
                "comment": " Height of text block.\n\nDefault : _derived from text size_\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "letterSpacing",
                "comment": " Letter spacing in pixels.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "lineHeight",
                "comment": " Line height in pixels.\n\nDefault : _derived from font file_\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "npot",
                "comment": " Use settings for non-power-of-two (NPOT) texture.\n\nDefault : `false`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "offset",
                "comment": " Texture offset to be used.\n\nDefault : `{x: 0, y: 0}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "opacity",
                "comment": " Opacity, on a scale from 0 to 1, where 0 means fully transparent and 1 means fully opaque.\n\nDefault : `1.0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "repeat",
                "comment": " Texture repeat to be used.\n\nDefault : `{x: 1, y: 1}`\n",
                "type": "Basics.Float -> Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "shader",
                "comment": " Shader used to render text.\n\nDefault : `sdf`\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "side",
                "comment": " Side to render. (`front`, `back`, `double`)\n\nDefault : `front`\n",
                "type": "AFrame.Variants.Side.Side -> AFrame.Properties.Property"
            },
            {
                "name": "tabSize",
                "comment": " Tab size in spaces.\n\nDefault : `4`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "transparent",
                "comment": " Whether text is transparent.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "value",
                "comment": " The actual content of the text. Line breaks and tabs are supported with `\\n` and `\\t`.\n\nDefault : `''`\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "visible",
                "comment": " Whether material is visible. Raycasters will ignore invisible materials.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "whiteSpace",
                "comment": " How whitespace should be handled (i.e., `normal`, `pre`, `nowrap`).\n\nDefault : `normal`\n",
                "type": "AFrame.Variants.Text.WhiteSpace.WhiteSpace -> AFrame.Properties.Property"
            },
            {
                "name": "width",
                "comment": " Width in meters.\n\nDefault : _derived from geometry if exists_\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "wrapCount",
                "comment": " Number of characters before wrapping text (more or less).\n\nDefault : `40`\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "wrapPixels",
                "comment": " Number of pixels before wrapping text.\n\nDefault : _derived from wrapCount_\n",
                "type": "Basics.Int -> AFrame.Properties.Property"
            },
            {
                "name": "xOffset",
                "comment": " X-offset to apply to add padding.\n\nDefault : `0`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            },
            {
                "name": "zOffset",
                "comment": " Z-offset to apply to avoid Z-fighting if using with a geometry as a background.\n\nDefault : `0.001`\n",
                "type": "Basics.Float -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Components.VrModeUi",
        "comment": " # VR-Mode UI\n\n@docs enterVRButton, enterARButton, enabled\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "enabled",
                "comment": " Whether or not to display UI related to entering VR.\n\nDefault : `true`\n",
                "type": "Basics.Bool -> AFrame.Properties.Property"
            },
            {
                "name": "enterARButton",
                "comment": " Selector to a custom AR button. On click, the button will enter AR.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            },
            {
                "name": "enterVRButton",
                "comment": " Selector to a custom VR button. On click, the button will enter VR.\n\nDefault : _None_\n",
                "type": "String.String -> AFrame.Properties.Property"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.EventRefs",
        "comment": " # Event Reference\n\nUse `EventRef`s to reference the events on animation etc.\n\nTo actually listen for events and produce messages in response, use `on : EventRef -> Decoder msg -> Attribute msg` from `AFrame.Events`.\n\n@docs EventRef, ref\n\n# Animation\n\n@docs animationBegin, animationComplete, animationCompleteWithId\n\n# Model\n\n@docs modelLoaded, modelError\n\n# Material\n\n@docs materialTextureLoaded, materialVideoLoadedData, materialVideoEnded\n\n# Raycaster\n\n@docs raycasterIntersected, raycasterIntersectedCleared, raycasterIntersection, raycasterIntersectionCleared\n\n# Text\n\n@docs textFontSet\n\n# Sound\n\n@docs soundLoaded, soundEnded\n\n# Device Orientation\n\n@docs deviceOrientationPermissionGranted, deviceOrientationPermissionRejected, deviceOrientationPermissionRequested\n\n# Controls : Cursor & Mouse\n\n@docs click, fusing, mouseDown, mouseEnter, mouseLeave, mouseUp\n\n# Controls : Generic Button\n\n@docs buttonDown, buttonUp, buttonChanged\n\n# Controls : Generic Touch\n\n@docs touchStart, touchEnd\n\n# Controls : Trackpad\n\n@docs trackPadDown, trackPadUp, trackPadTouchStart, trackPadTouchEnd, trackPadChanged, trackPadMoved\n\n# Controls : Trigger\n\n@docs triggerDown, triggerUp, triggerTouchStart, triggerTouchEnd, triggerChanged\n\n# Controls : Thumbstick\n\n@docs thumbstickDown, thumbstickUp, thumbstickTouchStart, thumbstickTouchEnd, thumbstickChanged, thumbstickMoved\n\n# Controls : Grip\n\n@docs gripDown, gripUp, gripTouchStart, gripTouchEnd, gripChanged\n\n# Controls : A Button\n\n@docs aButtonDown, aButtonUp, aButtonTouchStart, aButtonTouchEnd, aButtonChanged\n\n# Controls : B Button\n\n@docs bButtonDown, bButtonUp, bButtonTouchStart, bButtonTouchEnd, bButtonChanged\n\n# Controls : X Button\n\n@docs xButtonDown, xButtonUp, xButtonTouchStart, xButtonTouchEnd, xButtonChanged\n\n# Controls : Y Button\n\n@docs yButtonDown, yButtonUp, yButtonTouchStart, yButtonTouchEnd, yButtonChanged\n\n# Controls : Surface\n\n@docs surfaceDown, surfaceUp, surfaceTouchStart, surfaceTouchEnd, surfaceChanged\n\n# Controls : Menu\n\n@docs menuDown, menuUp, menuChanged\n\n# Controls : System\n\n@docs systemDown, systemUp, systemChanged\n\n# Controls : Fingers\n\n@docs pointUp, pointDown, thumbUp, thumbDown, pointingStart, pointingEnd, pistolStart, pistolEnd\n\n# Controls : Axis\n\n@docs axisMove\n\n# Controller\n\n@docs controllerConnected, controllerDisconnected, controllerModelReady\n\n# Stringify\n\n@docs toString, stringify\n\n",
        "unions": [
            {
                "name": "EventRef",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "aButtonChanged",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "aButtonDown",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "aButtonTouchEnd",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "aButtonTouchStart",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "aButtonUp",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "animationBegin",
                "comment": " Animation began. Event detail contains `name` of animation. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "animationComplete",
                "comment": " Animation completed. Event detail contains `name` of animation. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "animationCompleteWithId",
                "comment": " Animation completed if animation has an ID (e.g., `animation_ \"click\"`). ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "axisMove",
                "comment": " Axis changed (e.g., for thumbstick, touchpad). Contains `axis` and `axesChanged` in the event detail. `axis` is an array of values from `-1.0` (left, down) to `1.0` (right, up). ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "bButtonChanged",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "bButtonDown",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "bButtonTouchEnd",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "bButtonTouchStart",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "bButtonUp",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "buttonChanged",
                "comment": " Any touch or press of a button fires this. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "buttonDown",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "buttonUp",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "click",
                "comment": " Emitted on both cursor and intersected entity if a currently intersected entity is clicked (whether by mouse or by fuse). ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "controllerConnected",
                "comment": " Controller connected and set up. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "controllerDisconnected",
                "comment": " Controller disconnected. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "controllerModelReady",
                "comment": " The model file is loaded and completed parsing. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "deviceOrientationPermissionGranted",
                "comment": " User has granted access to DeviceOrientation events ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "deviceOrientationPermissionRejected",
                "comment": " User or browser has denied access to DeviceOrientation events ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "deviceOrientationPermissionRequested",
                "comment": " Application has requested permission to access DeviceOrientation events ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "fusing",
                "comment": " Emitted on both cursor and intersected entity when fuse-based cursor starts counting down. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "gripChanged",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "gripDown",
                "comment": " The hand is closed into a fist without thumb raised. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "gripTouchEnd",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "gripTouchStart",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "gripUp",
                "comment": " The hand is no longer closed into a fist without thumb raised. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "materialTextureLoaded",
                "comment": " Texture loaded onto material. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "materialVideoEnded",
                "comment": " For video textures, emitted when the video has reached its end (may not work with loop). ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "materialVideoLoadedData",
                "comment": " Video data loaded and is going to play. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "menuChanged",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "menuDown",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "menuUp",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "modelError",
                "comment": " glTF model could not be loaded. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "modelLoaded",
                "comment": " glTF model has been loaded into the scene. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "mouseDown",
                "comment": " Emitted on both cursor and intersected entity (if any) on `mousedown` on the canvas element. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "mouseEnter",
                "comment": " Emitted on both cursor and intersected entity (if any) when cursor intersects with an entity. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "mouseLeave",
                "comment": " Emitted on both cursor and intersected entity (if any) when cursor no longer intersects with previously intersected entity. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "mouseUp",
                "comment": " Emitted on both cursor and intersected entity (if any) on mouseup on the canvas element. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "pistolEnd",
                "comment": " The hand is no longer pointing with thumb raised. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "pistolStart",
                "comment": " The hand is pointing with index finger and thumb raised. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "pointDown",
                "comment": " The hand is no longer touching or pressing the trigger only. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "pointUp",
                "comment": " The hand is touching or pressing the trigger only. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "pointingEnd",
                "comment": " The hand is no longer pointing without thumb raised. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "pointingStart",
                "comment": " The hand is pointing with index finger without thumb raised. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "raycasterIntersected",
                "comment": " Emitted on the intersected entity. Entity is intersecting with a raycaster. Event detail will contain `el`, the raycasting entity, and `intersection`, and `.getIntersection `(el) function which can be used to obtain current intersection data. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "raycasterIntersectedCleared",
                "comment": " Emitted on the intersected entity. Entity is no longer intersecting with a raycaster. Event detail will contain `el`, the raycasting entity. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "raycasterIntersection",
                "comment": " Emitted on the raycasting entity. Raycaster is intersecting with one or more entities. Event detail will contain `els`, an array with the intersected entities, and `intersections`, and `.getIntersection (el)` function which can be used to obtain current intersection data. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "raycasterIntersectionCleared",
                "comment": " Emitted on the raycasting entity. Raycaster is no longer intersecting with one or more entities. Event detail will contain `clearedEls`, an array with the formerly intersected entities. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "ref",
                "comment": " Constructor for custom events' references. ",
                "type": "String.String -> AFrame.EventRefs.EventRef"
            },
            {
                "name": "soundEnded",
                "comment": " Triggered when sound finishes playing. Event detail will contain the sound’s `name` and `id`. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "soundLoaded",
                "comment": " Triggered when sound file is loaded. Event detail will contain the sound’s `name` and `id`. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "stringify",
                "comment": " ",
                "type": "List.List AFrame.EventRefs.EventRef -> String.String"
            },
            {
                "name": "surfaceChanged",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "surfaceDown",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "surfaceTouchEnd",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "surfaceTouchStart",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "surfaceUp",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "systemChanged",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "systemDown",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "systemUp",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "textFontSet",
                "comment": " Emitted when the font source has been loaded. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "thumbDown",
                "comment": " The hand is no longer closed into a fist with thumb raised. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "thumbUp",
                "comment": " The hand is closed into a fist with thumb raised. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "thumbstickChanged",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "thumbstickDown",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "thumbstickMoved",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "thumbstickTouchEnd",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "thumbstickTouchStart",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "thumbstickUp",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef -> String.String"
            },
            {
                "name": "touchEnd",
                "comment": " Touch sensitive button released. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "touchStart",
                "comment": " Touch sensitive button touched. ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "trackPadChanged",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "trackPadDown",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "trackPadMoved",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "trackPadTouchEnd",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "trackPadTouchStart",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "trackPadUp",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "triggerChanged",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "triggerDown",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "triggerTouchEnd",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "triggerTouchStart",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "triggerUp",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "xButtonChanged",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "xButtonDown",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "xButtonTouchEnd",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "xButtonTouchStart",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "xButtonUp",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "yButtonChanged",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "yButtonDown",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "yButtonTouchEnd",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "yButtonTouchStart",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            },
            {
                "name": "yButtonUp",
                "comment": " ",
                "type": "AFrame.EventRefs.EventRef"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Events",
        "comment": " # Events\n\nFor the moment there is no out-of-the-box decoders for the events handling since it's already the huge list of their kinds and the things they could contain would be dozen times longer. So we would better suggest to implement them on demand and then, if possible, reuse, and then optionally include in this package.\n\n@docs on, custom\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "custom",
                "comment": " Create a custom handler using event reference from `AFrame.EventRefs`. ",
                "type": "AFrame.EventRefs.EventRef -> Json.Decode.Decoder { message : msg, stopPropagation : Basics.Bool, preventDefault : Basics.Bool } -> Html.Attribute msg"
            },
            {
                "name": "on",
                "comment": " Create a handler using event reference from `AFrame.EventRefs`. Custom decoder is needed. ",
                "type": "AFrame.EventRefs.EventRef -> Json.Decode.Decoder msg -> Html.Attribute msg"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Extra.Physics",
        "comment": " Components for A-Frame physics integration.\n\n# Primitives\n@docs grid\n\n# Primitive attributes\n@docs dynamicBody, staticBody\n\n# Camera attributes\n@docs kinematicBody\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "dynamicBody",
                "comment": " A freely-moving object.\n    Dynamic bodies have mass, collide with other objects,\n    bounce or slow during collisions, and fall if gravity is enabled.\n\n    box [ dynamicBody ] []\n",
                "type": "Html.Attribute msg"
            },
            {
                "name": "grid",
                "comment": " Floor.\n\n    grid [ staticBody ] []\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "kinematicBody",
                "comment": " Player-controlled body, which can move but is not affected (directly)\n    by the physics engine. Intended for use on the player's model.\n    Gravity and collisions are simulated,\n    without giving full control to the physics engine.\n\n    box [ kinematicBody ] []\n",
                "type": "Html.Attribute msg"
            },
            {
                "name": "staticBody",
                "comment": " A fixed-position or animated object.\n    Other objects may collide with static bodies,\n    but static bodies themselves are unaffected by gravity and collisions.\n\n    box [ staticBody ] []\n",
                "type": "Html.Attribute msg"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Primitives",
        "comment": " A-Frame primitives.\n\n# Geometric primitives\n@docs box, circle, colladaModel, cone, cursor, curvedimage, cylinder, dodecahedron, gltfModel, icosahedron, link, objModel, octahedron, plane, ring, sound, sphere, tetrahedron, text, torusKnot, torus, triangle, video, videosphere\n\n# Scene primitives\n@docs sky\n\n# Asset management\n@docs assets, assetItem, image\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "assetItem",
                "comment": " An individual asset item. Asset items load an asset up front\nand can be referenced as a source later on. Use a src attribute\nto define what to load and specify an id which is used later on\nto use this asset as a source.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "assets",
                "comment": " The assets group is used to store assets that are pre-loaded\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "box",
                "comment": " The box primitive, formerly called <a-cube>,\n    creates shapes such as boxes, cubes, or walls.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "circle",
                "comment": "\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "colladaModel",
                "comment": " ",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "cone",
                "comment": " The cone primitive creates a cone shape.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "cursor",
                "comment": " ",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "curvedimage",
                "comment": " ",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "cylinder",
                "comment": " The cylinder primitive is an entity that\n    prescribes the geometry with its geometric primitive set to cylinder.\n    It can be used to create tubes and curved surfaces.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "dodecahedron",
                "comment": " ",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "gltfModel",
                "comment": " ",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "icosahedron",
                "comment": " ",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "image",
                "comment": " The image primitive shows an image on a flat plane.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "link",
                "comment": " ",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "objModel",
                "comment": " ",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "octahedron",
                "comment": " ",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "plane",
                "comment": " The plane primitive creates flat surfaces.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "ring",
                "comment": " The ring primitive creates a ring or disc shape.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "sky",
                "comment": " The sky primitive adds a background to a scene\n    or display a 360-degree photo.\n    It is an entity that prescribes a large sphere with the material\n    mapped to the inside.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "sound",
                "comment": " The sound primitive wraps a sound component\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "sphere",
                "comment": " The sphere primitive creates a spherical or polyhedron shapes.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "tetrahedron",
                "comment": "\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "text",
                "comment": " The text primitive displays a text.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "torus",
                "comment": " The torus primitive creates a donut or circular tube shape.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "torusKnot",
                "comment": "\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "triangle",
                "comment": " ",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "video",
                "comment": " The video primitive shows a video on a flat plane.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "videosphere",
                "comment": " The videosphere primitive shows a video on a sphere.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Primitives.Attributes",
        "comment": " A-Frame primitive attributes.\n\n# Mesh attributes\n@docs color, metalness, shader, src, opacity, roughness, translate, transparent\n\n# Geometry attributes\n@docs radius, radiusTop, radiusBottom, position, scale, rotation, height, width, depth, segmentsRadial\n\n# Light attributes\n@docs angle, decay, distance, exponent, groundColor, intensity, type_\n\n# Scene attributes\n@docs vrModeUi\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "angle",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "color",
                "comment": " ",
                "type": "Color.Color -> Html.Attribute msg"
            },
            {
                "name": "decay",
                "comment": " Amount the light dims along the distance of the light.\n",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "depth",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "distance",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "exponent",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "groundColor",
                "comment": " ",
                "type": "Color.Color -> Html.Attribute msg"
            },
            {
                "name": "height",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "intensity",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "metalness",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "opacity",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "position",
                "comment": " ",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "radius",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "radiusBottom",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "radiusTop",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "rotation",
                "comment": " ",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "roughness",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "scale",
                "comment": " ",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "segmentsRadial",
                "comment": " ",
                "type": "Basics.Int -> Html.Attribute msg"
            },
            {
                "name": "shader",
                "comment": " ",
                "type": "String.String -> Html.Attribute msg"
            },
            {
                "name": "src",
                "comment": " ",
                "type": "String.String -> Html.Attribute msg"
            },
            {
                "name": "translate",
                "comment": " ",
                "type": "Basics.Float -> Basics.Float -> Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "transparent",
                "comment": " ",
                "type": "Basics.Bool -> Html.Attribute msg"
            },
            {
                "name": "type_",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "vrModeUi",
                "comment": " The vr-mode-ui component toggles UI such as an Enter VR button, compatibility modal, and orientation modal for mobile.\nThe vr-mode-ui component applies only to the `<a-scene>` element.\n",
                "type": "Basics.Bool -> Html.Attribute msg"
            },
            {
                "name": "width",
                "comment": " ",
                "type": "Basics.Float -> Html.Attribute msg"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Primitives.Camera",
        "comment": " Camera primitive.\n\n# Primitives\n@docs camera\n\n# Attributes\n@docs far, fov, lookControlsEnabled, near, wasdControlsEnabled\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "camera",
                "comment": " The camera primitive places the user somewhere within the scene.\n\n    camera [] []\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "far",
                "comment": " Camera frustum far clipping plane.\n",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "fov",
                "comment": " Field of view (in degrees).\n",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "lookControlsEnabled",
                "comment": " Enable look controls.\n\n    camera [ lookControlsEnabled False ] []\n",
                "type": "Basics.Bool -> Html.Attribute msg"
            },
            {
                "name": "near",
                "comment": " Camera frustum near clipping plane.\n",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "wasdControlsEnabled",
                "comment": " Enable WASD controls for camera.\n\n    camera [ wasdControlsEnabled False ] []\n",
                "type": "Basics.Bool -> Html.Attribute msg"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Primitives.Cursor",
        "comment": " Cursor primitive.\n\n# Definitions\n@docs cursor\n\n# Attributes\n@docs fuse, maxDistance, timeout, raycaster\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "cursor",
                "comment": " The cursor primitive places a reticle or crosshair to add clicking\n    and interactivity with the scene.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "fuse",
                "comment": " Whether cursor should also be fuse-based.\n",
                "type": "Basics.Bool -> Html.Attribute msg"
            },
            {
                "name": "maxDistance",
                "comment": " Maximum distance to check for intersections on entities for clicks.\n",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "raycaster",
                "comment": " Customize the raycasting pieces of the cursor.\n",
                "type": "String.String -> Html.Attribute msg"
            },
            {
                "name": "timeout",
                "comment": " How long to wait (in milliseconds) to trigger a click event if fuse-based.\n",
                "type": "Basics.Int -> Html.Attribute msg"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Primitives.Light",
        "comment": " Light primitive.\n\n# Primitives\n@docs light\n\n# Attributes\n@docs type_, intensity\n\n",
        "unions": [],
        "aliases": [],
        "values": [
            {
                "name": "intensity",
                "comment": " Light strength.\n",
                "type": "Basics.Float -> Html.Attribute msg"
            },
            {
                "name": "light",
                "comment": " The light primitive adjusts the lighting setup of the scene.\n",
                "type": "List.List (Html.Attribute msg) -> List.List (Html.Html msg) -> Html.Html msg"
            },
            {
                "name": "type_",
                "comment": " Set light type.\n\n  Check https://aframe.io/docs/0.5.0/components/light.html#properties to get more information about the different kinds of lights\n",
                "type": "AFrame.Variants.Light.Light -> Html.Attribute msg"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Properties",
        "comment": " # Property\n\nProperty of a component. Hardly everything under `AFrame.Components` are just properties so that theu may be passed to components as a list and form an `Attribute` in the end.\n\n@docs Property, property\n\n# Conversion\n\n@docs toString\n\n",
        "unions": [],
        "aliases": [
            {
                "name": "Property",
                "comment": " Property is a tuple of its name/ID and current stringified value ",
                "args": [],
                "type": "( String.String, String.String )"
            }
        ],
        "values": [
            {
                "name": "property",
                "comment": " Create custom property. ",
                "type": "String.String -> String.String -> AFrame.Properties.Property"
            },
            {
                "name": "toString",
                "comment": " Encode a list of properties into the `aframe`-friendly string. ",
                "type": "List.List AFrame.Properties.Property -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Axis",
        "comment": " # Axis\n\n@docs Axis\n\n# Values\n\n@docs x, y, z\n\n@docs toString\n",
        "unions": [
            {
                "name": "Axis",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Axis.Axis -> String.String"
            },
            {
                "name": "x",
                "comment": " ",
                "type": "AFrame.Variants.Axis.Axis"
            },
            {
                "name": "y",
                "comment": " ",
                "type": "AFrame.Variants.Axis.Axis"
            },
            {
                "name": "z",
                "comment": " ",
                "type": "AFrame.Variants.Axis.Axis"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Blending",
        "comment": " # Blending\n\n@docs Blending, blending\n\n# Values\n\n@docs none, normal, additive, subtractive, multiply\n\n@docs toString\n",
        "unions": [
            {
                "name": "Blending",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "additive",
                "comment": " ",
                "type": "AFrame.Variants.Blending.Blending"
            },
            {
                "name": "blending",
                "comment": " ",
                "type": "String.String -> AFrame.Variants.Blending.Blending"
            },
            {
                "name": "multiply",
                "comment": " ",
                "type": "AFrame.Variants.Blending.Blending"
            },
            {
                "name": "none",
                "comment": " ",
                "type": "AFrame.Variants.Blending.Blending"
            },
            {
                "name": "normal",
                "comment": " ",
                "type": "AFrame.Variants.Blending.Blending"
            },
            {
                "name": "subtractive",
                "comment": " ",
                "type": "AFrame.Variants.Blending.Blending"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Blending.Blending -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Direction",
        "comment": " # Direction\n\n@docs Direction\n\n# Values\n\n@docs normal, alternate, reverse\n\n@docs toString\n",
        "unions": [
            {
                "name": "Direction",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "alternate",
                "comment": " ",
                "type": "AFrame.Variants.Direction.Direction"
            },
            {
                "name": "normal",
                "comment": " ",
                "type": "AFrame.Variants.Direction.Direction"
            },
            {
                "name": "reverse",
                "comment": " ",
                "type": "AFrame.Variants.Direction.Direction"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Direction.Direction -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.DistanceModel",
        "comment": " # DistanceModel\n\n@docs DistanceModel\n\n# Values\n\n@docs linear, reverse, exponential\n\n@docs toString\n",
        "unions": [
            {
                "name": "DistanceModel",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "exponential",
                "comment": " ",
                "type": "AFrame.Variants.DistanceModel.DistanceModel"
            },
            {
                "name": "linear",
                "comment": " ",
                "type": "AFrame.Variants.DistanceModel.DistanceModel"
            },
            {
                "name": "reverse",
                "comment": " ",
                "type": "AFrame.Variants.DistanceModel.DistanceModel"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.DistanceModel.DistanceModel -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Easing",
        "comment": " # Easing\n\n@docs Easing, easing\n\n# In\n\n@docs easeInQuad, easeInCubic, easeInQuart, easeInQuint, easeInSine, easeInExpo, easeInCirc, easeInBack, easeInElastic\n\n# Out\n\n@docs easeOutQuad, easeOutCubic, easeOutQuart, easeOutQuint, easeOutSine, easeOutExpo, easeOutCirc, easeOutBack, easeOutElastic\n\n# InOut\n\n@docs easeInOutQuad, easeInOutCubic, easeInOutQuart, easeInOutQuint, easeInOutSine, easeInOutExpo, easeInOutCirc, easeInOutBack, easeInOutElastic\n\n# Stringify\n\n@docs toString\n",
        "unions": [
            {
                "name": "Easing",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "easeInBack",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInCirc",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInCubic",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInElastic",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInExpo",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInOutBack",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInOutCirc",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInOutCubic",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInOutElastic",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInOutExpo",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInOutQuad",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInOutQuart",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInOutQuint",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInOutSine",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInQuad",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInQuart",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInQuint",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeInSine",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeOutBack",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeOutCirc",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeOutCubic",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeOutElastic",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeOutExpo",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeOutQuad",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeOutQuart",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeOutQuint",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easeOutSine",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing"
            },
            {
                "name": "easing",
                "comment": " ",
                "type": "String.String -> AFrame.Variants.Easing.Easing"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Easing.Easing -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Fill",
        "comment": " # Fill\n\n@docs Fill\n\n# Values\n\n@docs none, forwards, backwards, both\n\n@docs toString\n",
        "unions": [
            {
                "name": "Fill",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "backwards",
                "comment": " ",
                "type": "AFrame.Variants.Fill.Fill"
            },
            {
                "name": "both",
                "comment": " ",
                "type": "AFrame.Variants.Fill.Fill"
            },
            {
                "name": "forwards",
                "comment": " ",
                "type": "AFrame.Variants.Fill.Fill"
            },
            {
                "name": "none",
                "comment": " ",
                "type": "AFrame.Variants.Fill.Fill"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Fill.Fill -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Fog",
        "comment": " # Fog\n\n@docs Fog\n\n# Values\n\n@docs linear, exponential\n\n@docs toString\n",
        "unions": [
            {
                "name": "Fog",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "exponential",
                "comment": " Exponential fog grows exponentially denser with distance. ",
                "type": "AFrame.Variants.Fog.Fog"
            },
            {
                "name": "linear",
                "comment": " Linear fog grows linearly denser with distance. ",
                "type": "AFrame.Variants.Fog.Fog"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Fog.Fog -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.FoveationLevel",
        "comment": " # FoveationLevel\n\n@docs FoveationLevel\n\n# Values\n\n@docs none, low, medium, high\n\n@docs toInt\n",
        "unions": [
            {
                "name": "FoveationLevel",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "high",
                "comment": " ",
                "type": "AFrame.Variants.FoveationLevel.FoveationLevel"
            },
            {
                "name": "low",
                "comment": " ",
                "type": "AFrame.Variants.FoveationLevel.FoveationLevel"
            },
            {
                "name": "medium",
                "comment": " ",
                "type": "AFrame.Variants.FoveationLevel.FoveationLevel"
            },
            {
                "name": "none",
                "comment": " ",
                "type": "AFrame.Variants.FoveationLevel.FoveationLevel"
            },
            {
                "name": "toInt",
                "comment": " ",
                "type": "AFrame.Variants.FoveationLevel.FoveationLevel -> Basics.Int"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Hand",
        "comment": " # Hand\n\n@docs Hand\n\n# Values\n\n@docs right, left\n\n@docs toString\n",
        "unions": [
            {
                "name": "Hand",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "left",
                "comment": " ",
                "type": "AFrame.Variants.Hand.Hand"
            },
            {
                "name": "right",
                "comment": " ",
                "type": "AFrame.Variants.Hand.Hand"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Hand.Hand -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.HandStyle",
        "comment": " # HandStyle\n\n@docs HandStyle\n\n# Values\n\n@docs lowPoly, highPoly, toon\n\n@docs toString\n",
        "unions": [
            {
                "name": "HandStyle",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "highPoly",
                "comment": " ",
                "type": "AFrame.Variants.HandStyle.HandStyle"
            },
            {
                "name": "lowPoly",
                "comment": " ",
                "type": "AFrame.Variants.HandStyle.HandStyle"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.HandStyle.HandStyle -> String.String"
            },
            {
                "name": "toon",
                "comment": " ",
                "type": "AFrame.Variants.HandStyle.HandStyle"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Light",
        "comment": " # Light\n\n@docs Light\n\n# Values\n\n@docs ambient, directional, hemisphere, point, spot\n\n@docs toString\n",
        "unions": [
            {
                "name": "Light",
                "comment": " Different kinds of lights\n",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "ambient",
                "comment": " ",
                "type": "AFrame.Variants.Light.Light"
            },
            {
                "name": "directional",
                "comment": " ",
                "type": "AFrame.Variants.Light.Light"
            },
            {
                "name": "hemisphere",
                "comment": " ",
                "type": "AFrame.Variants.Light.Light"
            },
            {
                "name": "point",
                "comment": " ",
                "type": "AFrame.Variants.Light.Light"
            },
            {
                "name": "spot",
                "comment": " ",
                "type": "AFrame.Variants.Light.Light"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Light.Light -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Precision",
        "comment": " # Precision\n\n@docs Precision\n\n# Values\n\n@docs low, medium, high\n\n@docs toString\n",
        "unions": [
            {
                "name": "Precision",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "high",
                "comment": " ",
                "type": "AFrame.Variants.Precision.Precision"
            },
            {
                "name": "low",
                "comment": " ",
                "type": "AFrame.Variants.Precision.Precision"
            },
            {
                "name": "medium",
                "comment": " ",
                "type": "AFrame.Variants.Precision.Precision"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Precision.Precision -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Primitive",
        "comment": " # Primitive\n\n@docs Primitive, primitive\n\n# Flat\n\n@docs plane, triangle, circle\n\n# Angled\n\n@docs box, tetrahedron, octahedron, dodecahedron\n\n# Circly\n\n@docs cone, cylinder, ring, sphere, torus, torusKnot\n\n# Stringify\n\n@docs toString\n\n",
        "unions": [
            {
                "name": "Primitive",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "box",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "circle",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "cone",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "cylinder",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "dodecahedron",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "octahedron",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "plane",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "primitive",
                "comment": " ",
                "type": "String.String -> AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "ring",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "sphere",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "tetrahedron",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive -> String.String"
            },
            {
                "name": "torus",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "torusKnot",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            },
            {
                "name": "triangle",
                "comment": " ",
                "type": "AFrame.Variants.Primitive.Primitive"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Shadow",
        "comment": " # Shadow\n\n@docs Shadow\n\n# Values\n\n@docs basic, pcf, pcfSoft\n\n@docs toString\n",
        "unions": [
            {
                "name": "Shadow",
                "comment": " Different kinds of shadows\n",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "basic",
                "comment": " ",
                "type": "AFrame.Variants.Shadow.Shadow"
            },
            {
                "name": "pcf",
                "comment": " ",
                "type": "AFrame.Variants.Shadow.Shadow"
            },
            {
                "name": "pcfSoft",
                "comment": " ",
                "type": "AFrame.Variants.Shadow.Shadow"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Shadow.Shadow -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Side",
        "comment": " # Side\n\n@docs Side\n\n# Values\n\n@docs front, back, double\n\n@docs toString\n",
        "unions": [
            {
                "name": "Side",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "back",
                "comment": " ",
                "type": "AFrame.Variants.Side.Side"
            },
            {
                "name": "double",
                "comment": " ",
                "type": "AFrame.Variants.Side.Side"
            },
            {
                "name": "front",
                "comment": " ",
                "type": "AFrame.Variants.Side.Side"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Side.Side -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Text.Align",
        "comment": " # Align\n\n@docs Align\n\n# Values\n\n@docs left, center, right\n\n@docs toString\n",
        "unions": [
            {
                "name": "Align",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "center",
                "comment": " ",
                "type": "AFrame.Variants.Text.Align.Align"
            },
            {
                "name": "left",
                "comment": " ",
                "type": "AFrame.Variants.Text.Align.Align"
            },
            {
                "name": "right",
                "comment": " ",
                "type": "AFrame.Variants.Text.Align.Align"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Text.Align.Align -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Text.Anchor",
        "comment": " # Anchor\n\n@docs Anchor\n\n# Values\n\n@docs left, center, right, align\n\n@docs toString\n",
        "unions": [
            {
                "name": "Anchor",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "align",
                "comment": " ",
                "type": "AFrame.Variants.Text.Anchor.Anchor"
            },
            {
                "name": "center",
                "comment": " ",
                "type": "AFrame.Variants.Text.Anchor.Anchor"
            },
            {
                "name": "left",
                "comment": " ",
                "type": "AFrame.Variants.Text.Anchor.Anchor"
            },
            {
                "name": "right",
                "comment": " ",
                "type": "AFrame.Variants.Text.Anchor.Anchor"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Text.Anchor.Anchor -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Text.Baseline",
        "comment": " # Baseline\n\n@docs Baseline\n\n# Values\n\n@docs top, center, bottom\n\n@docs toString\n",
        "unions": [
            {
                "name": "Baseline",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "bottom",
                "comment": " ",
                "type": "AFrame.Variants.Text.Baseline.Baseline"
            },
            {
                "name": "center",
                "comment": " ",
                "type": "AFrame.Variants.Text.Baseline.Baseline"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Text.Baseline.Baseline -> String.String"
            },
            {
                "name": "top",
                "comment": " ",
                "type": "AFrame.Variants.Text.Baseline.Baseline"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Text.Font",
        "comment": " # Font\n\n@docs Font, custom\n\n# Values\n\n@docs default\n\n## Values : SDF (`json`)\n\n@docs roboto\n\n## Values : MSDF (`fnt`)\n\n@docs aileronSemibold, dejaVu, exo2Bold, exo2SemiBold, kelsonSans, monoid, mozillaVR, sourceCodePro\n\n@docs toString\n",
        "unions": [
            {
                "name": "Font",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "aileronSemibold",
                "comment": " ",
                "type": "AFrame.Variants.Text.Font.Font"
            },
            {
                "name": "custom",
                "comment": " Custom fonr using its URL ",
                "type": "AFrame.Variants.Text.Font.FontUrl -> AFrame.Variants.Text.Font.Font"
            },
            {
                "name": "default",
                "comment": " ",
                "type": "AFrame.Variants.Text.Font.Font"
            },
            {
                "name": "dejaVu",
                "comment": " ",
                "type": "AFrame.Variants.Text.Font.Font"
            },
            {
                "name": "exo2Bold",
                "comment": " ",
                "type": "AFrame.Variants.Text.Font.Font"
            },
            {
                "name": "exo2SemiBold",
                "comment": " ",
                "type": "AFrame.Variants.Text.Font.Font"
            },
            {
                "name": "kelsonSans",
                "comment": " ",
                "type": "AFrame.Variants.Text.Font.Font"
            },
            {
                "name": "monoid",
                "comment": " ",
                "type": "AFrame.Variants.Text.Font.Font"
            },
            {
                "name": "mozillaVR",
                "comment": " ",
                "type": "AFrame.Variants.Text.Font.Font"
            },
            {
                "name": "roboto",
                "comment": " ",
                "type": "AFrame.Variants.Text.Font.Font"
            },
            {
                "name": "sourceCodePro",
                "comment": " ",
                "type": "AFrame.Variants.Text.Font.Font"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Text.Font.Font -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.Text.WhiteSpace",
        "comment": " # WhiteSpace\n\n@docs WhiteSpace\n\n# Values\n\n@docs normal, pre, nowrap\n\n@docs toString\n",
        "unions": [
            {
                "name": "WhiteSpace",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "normal",
                "comment": " ",
                "type": "AFrame.Variants.Text.WhiteSpace.WhiteSpace"
            },
            {
                "name": "nowrap",
                "comment": " ",
                "type": "AFrame.Variants.Text.WhiteSpace.WhiteSpace"
            },
            {
                "name": "pre",
                "comment": " ",
                "type": "AFrame.Variants.Text.WhiteSpace.WhiteSpace"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.Text.WhiteSpace.WhiteSpace -> String.String"
            }
        ],
        "binops": []
    },
    {
        "name": "AFrame.Variants.VertexColors",
        "comment": " # VertexColors\n\n@docs VertexColors\n\n# Values\n\n@docs none, vertex, face\n\n@docs toString\n",
        "unions": [
            {
                "name": "VertexColors",
                "comment": " ",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "face",
                "comment": " ",
                "type": "AFrame.Variants.VertexColors.VertexColors"
            },
            {
                "name": "none",
                "comment": " ",
                "type": "AFrame.Variants.VertexColors.VertexColors"
            },
            {
                "name": "toString",
                "comment": " ",
                "type": "AFrame.Variants.VertexColors.VertexColors -> String.String"
            },
            {
                "name": "vertex",
                "comment": " ",
                "type": "AFrame.Variants.VertexColors.VertexColors"
            }
        ],
        "binops": []
    }
]