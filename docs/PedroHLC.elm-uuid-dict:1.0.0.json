[
    {
        "name": "UUID.Dict",
        "comment": " Fork of [`elm/core`'s `Dict`](/packages/elm/core/1.0.5/Dict), bypassing the\n\"comparable\"-key limitation for [`UUID`s](/packages/TSFoster/elm-uuid/4.2.0/UUID#UUID).\n\nAlso includes some extras.\n\nInsert, remove, and query operations all take _O(log n)_ time.\n\n\n# Dictionaries\n\n@docs Dict\n\n\n# Build\n\n@docs empty, singleton, insert, update, remove\n\n\n# Query\n\n@docs isEmpty, member, get, size\n\n\n# Lists\n\n@docs keys, values, toList, fromList\n\n\n# Transform\n\n@docs map, foldl, foldr, filter, partition\n\n\n# Combine\n\n@docs union, intersect, diff, merge\n\n\n# Extra\n\n@docs getFirst, findl, findr, toggle\n\n",
        "unions": [
            {
                "name": "Dict",
                "comment": " A dictionary of [`UUID`s](/packages/TSFoster/elm-uuid/4.2.0/UUID#UUID) and values.\n\nSee [`elm/core`'s `Dict.Dict`](/packages/elm/core/1.0.5/Dict#Dict) for the original version.\n\n    import UUID\n    import UUID.Dict\n\n    initUsers : Seeds -> List User -> ( Seeds, UUID.Dict User )\n    initUsers seed1 =\n        let\n            ( id1, seed2 ) =\n                UUID.step seed1\n\n            ( id2, seed3 ) =\n                UUID.step seed2\n\n            ( id3, seed4 ) =\n                UUID.step seed2\n        in\n        UUID.Dict.fromList\n            [ ( id1, User \"Alice\" 28 1.65 )\n            , ( id2, User \"Bob\" 19 1.82 )\n            , ( id3, User \"Chuck\" 33 1.75 )\n            ]\n            |> Tuple.pair seed4\n\n    type alias User =\n        { name : String\n        , age : Int\n        , height : Float\n        }\n\n",
                "args": [
                    "v"
                ],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "diff",
                "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n",
                "type": "UUID.Dict.Dict a -> UUID.Dict.Dict b -> UUID.Dict.Dict a"
            },
            {
                "name": "empty",
                "comment": " Create an empty dictionary.\n",
                "type": "UUID.Dict.Dict v"
            },
            {
                "name": "filter",
                "comment": " Keep only the key-value pairs that pass the given test.\n",
                "type": "(UUID.UUID -> v -> Basics.Bool) -> UUID.Dict.Dict v -> UUID.Dict.Dict v"
            },
            {
                "name": "findl",
                "comment": " Retrieve the first node that matches a predicate.\n",
                "type": "(UUID.UUID -> v -> Basics.Bool) -> UUID.Dict.Dict v -> Maybe.Maybe ( UUID.UUID, v )"
            },
            {
                "name": "findr",
                "comment": " Retrieve the last node that matches a predicate.\n",
                "type": "(UUID.UUID -> v -> Basics.Bool) -> UUID.Dict.Dict v -> Maybe.Maybe ( UUID.UUID, v )"
            },
            {
                "name": "foldl",
                "comment": " Fold over the key-value pairs in a dictionary from lowest key to highest key.\n\nSee [`elm/core`'s `Dict.foldl`](/packages/elm/core/1.0.5/Dict#foldl) for the original version.\n\n",
                "type": "(UUID.UUID -> v -> b -> b) -> b -> UUID.Dict.Dict v -> b"
            },
            {
                "name": "foldr",
                "comment": " Fold over the key-value pairs in a dictionary from highest key to lowest key.\n\nSee [`elm/core`'s `Dict.foldr`](/packages/elm/core/1.0.5/Dict#foldr) for the original version.\n\n",
                "type": "(UUID.UUID -> v -> b -> b) -> b -> UUID.Dict.Dict v -> b"
            },
            {
                "name": "fromList",
                "comment": " Convert an association list into a dictionary.\n",
                "type": "List.List ( UUID.UUID, v ) -> UUID.Dict.Dict v"
            },
            {
                "name": "get",
                "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\nSee [`elm/core`'s `Dict.get`](/packages/elm/core/1.0.5/Dict#get) for the original version.\n\n",
                "type": "UUID.UUID -> UUID.Dict.Dict v -> Maybe.Maybe v"
            },
            {
                "name": "getFirst",
                "comment": " Retrieve the node with the smallest key.\n",
                "type": "UUID.Dict.Dict v -> Maybe.Maybe ( UUID.UUID, v )"
            },
            {
                "name": "insert",
                "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision.\n",
                "type": "UUID.UUID -> v -> UUID.Dict.Dict v -> UUID.Dict.Dict v"
            },
            {
                "name": "intersect",
                "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary.\n",
                "type": "UUID.Dict.Dict v -> UUID.Dict.Dict v -> UUID.Dict.Dict v"
            },
            {
                "name": "isEmpty",
                "comment": " Determine if a dictionary is empty.\nisEmpty empty == True\n",
                "type": "UUID.Dict.Dict v -> Basics.Bool"
            },
            {
                "name": "keys",
                "comment": " Get all of the keys in a dictionary, sorted from lowest to highest.\n\nSee [`elm/core`'s `Dict.keys`](/packages/elm/core/1.0.5/Dict#keys) for the original version.\n\n",
                "type": "UUID.Dict.Dict v -> List.List UUID.UUID"
            },
            {
                "name": "map",
                "comment": " Apply a function to all values in a dictionary.\n",
                "type": "(UUID.UUID -> a -> b) -> UUID.Dict.Dict a -> UUID.Dict.Dict b"
            },
            {
                "name": "member",
                "comment": " Determine if a key is in a dictionary.\n",
                "type": "UUID.UUID -> UUID.Dict.Dict v -> Basics.Bool"
            },
            {
                "name": "merge",
                "comment": " Combines two dictionaries.\n\nSee [`elm/core`'s `Dict.merge`](/packages/elm/core/1.0.5/Dict#merge) for the original version.\n\n",
                "type": "(UUID.UUID -> a -> result -> result) -> (UUID.UUID -> a -> b -> result -> result) -> (UUID.UUID -> b -> result -> result) -> UUID.Dict.Dict a -> UUID.Dict.Dict b -> result -> result"
            },
            {
                "name": "partition",
                "comment": " Partition a dictionary according to some test. The first dictionary\ncontains all key-value pairs which passed the test, and the second contains\nthe pairs that did not.\n",
                "type": "(UUID.UUID -> v -> Basics.Bool) -> UUID.Dict.Dict v -> ( UUID.Dict.Dict v, UUID.Dict.Dict v )"
            },
            {
                "name": "remove",
                "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made.\n",
                "type": "UUID.UUID -> UUID.Dict.Dict v -> UUID.Dict.Dict v"
            },
            {
                "name": "singleton",
                "comment": " Create a dictionary with one key-value pair.\n",
                "type": "UUID.UUID -> v -> UUID.Dict.Dict v"
            },
            {
                "name": "size",
                "comment": " Determine the number of key-value pairs in the dictionary.\n",
                "type": "UUID.Dict.Dict v -> Basics.Int"
            },
            {
                "name": "toList",
                "comment": " Convert a dictionary into an association list of key-value pairs, sorted by keys.\n",
                "type": "UUID.Dict.Dict v -> List.List ( UUID.UUID, v )"
            },
            {
                "name": "toggle",
                "comment": " Like insert, but removes if the key already exists in the dictionary, discarding the new value too.\n",
                "type": "UUID.UUID -> v -> UUID.Dict.Dict v -> UUID.Dict.Dict v"
            },
            {
                "name": "union",
                "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary.\n",
                "type": "UUID.Dict.Dict v -> UUID.Dict.Dict v -> UUID.Dict.Dict v"
            },
            {
                "name": "update",
                "comment": " Update the value of a dictionary for a specific key with a given function.\n",
                "type": "UUID.UUID -> (Maybe.Maybe v -> Maybe.Maybe v) -> UUID.Dict.Dict v -> UUID.Dict.Dict v"
            },
            {
                "name": "values",
                "comment": " Get all of the values in a dictionary, in the order of their keys.\n\nSee [`elm/core`'s `Dict.values`](/packages/elm/core/1.0.5/Dict#values) for the original version.\n\n",
                "type": "UUID.Dict.Dict v -> List.List v"
            }
        ],
        "binops": []
    },
    {
        "name": "UUID.Set",
        "comment": " Fork of [`elm/core`'s `Set`](/packages/elm/core/1.0.5/Set), bypassing the\n\"comparable\"-key limitation for [`UUID`s](/packages/TSFoster/elm-uuid/4.2.0/UUID#UUID).\nAlso includes some extras.\n\nInsert, remove, and query operations all take _O(log n)_ time.\n\n\n# Sets\n\n@docs Set\n\n\n# Build\n\n@docs empty, singleton, insert, remove\n\n\n# Query\n\n@docs isEmpty, member, size\n\n\n# Combine\n\n@docs union, intersect, diff\n\n\n# Lists\n\n@docs toList, fromList\n\n\n# Transform\n\n@docs map, foldl, foldr, filter, partition\n\n\n# Extra\n\n@docs getFirst, toggle\n\n",
        "unions": [
            {
                "name": "Set",
                "comment": " Represents a set of unique [`UUID`s](/packages/TSFoster/elm-uuid/4.2.0/UUID#UUID).\n",
                "args": [],
                "cases": []
            }
        ],
        "aliases": [],
        "values": [
            {
                "name": "diff",
                "comment": " Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set.\n",
                "type": "UUID.Set.Set -> UUID.Set.Set -> UUID.Set.Set"
            },
            {
                "name": "empty",
                "comment": " Create an empty set.\n",
                "type": "UUID.Set.Set"
            },
            {
                "name": "filter",
                "comment": " Only keep elements that pass the given test.\n\nSee [`elm/core`'s `Set.filter`](/packages/elm/core/1.0.5/Set#filter) for the original version.\n\n",
                "type": "(UUID.UUID -> Basics.Bool) -> UUID.Set.Set -> UUID.Set.Set"
            },
            {
                "name": "foldl",
                "comment": " Fold over the values in a set, in order from lowest to highest.\n",
                "type": "(UUID.UUID -> b -> b) -> b -> UUID.Set.Set -> b"
            },
            {
                "name": "foldr",
                "comment": " Fold over the values in a set, in order from highest to lowest.\n",
                "type": "(UUID.UUID -> b -> b) -> b -> UUID.Set.Set -> b"
            },
            {
                "name": "fromList",
                "comment": " Convert a list into a set, removing any duplicates.\n",
                "type": "List.List UUID.UUID -> UUID.Set.Set"
            },
            {
                "name": "getFirst",
                "comment": " Retrieve the node with the smallest key.\n",
                "type": "UUID.Set.Set -> Maybe.Maybe UUID.UUID"
            },
            {
                "name": "insert",
                "comment": " Insert a `UUID` into a set.\n",
                "type": "UUID.UUID -> UUID.Set.Set -> UUID.Set.Set"
            },
            {
                "name": "intersect",
                "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\n",
                "type": "UUID.Set.Set -> UUID.Set.Set -> UUID.Set.Set"
            },
            {
                "name": "isEmpty",
                "comment": " Determine if a set is empty.\n",
                "type": "UUID.Set.Set -> Basics.Bool"
            },
            {
                "name": "map",
                "comment": " Map a function onto an [`elm/core`'s `Set`](/packages/elm/core/1.0.5/Set),\ncreating a new set with no duplicates.\n",
                "type": "(UUID.UUID -> comparable) -> UUID.Set.Set -> Set.Set comparable"
            },
            {
                "name": "member",
                "comment": " Determine if an `UUID` is in a set.\n",
                "type": "UUID.UUID -> UUID.Set.Set -> Basics.Bool"
            },
            {
                "name": "partition",
                "comment": " Create two new sets. The first contains all the elements that passed the\ngiven test, and the second contains all the elements that did not.\n",
                "type": "(UUID.UUID -> Basics.Bool) -> UUID.Set.Set -> ( UUID.Set.Set, UUID.Set.Set )"
            },
            {
                "name": "remove",
                "comment": " Remove a `UUID` from a set. If the `UUID` is not found, no changes are made.\n",
                "type": "UUID.UUID -> UUID.Set.Set -> UUID.Set.Set"
            },
            {
                "name": "singleton",
                "comment": " Create a set with one `UUID`.\n",
                "type": "UUID.UUID -> UUID.Set.Set"
            },
            {
                "name": "size",
                "comment": " Determine the number of elements in a set.\n",
                "type": "UUID.Set.Set -> Basics.Int"
            },
            {
                "name": "toList",
                "comment": " Convert a set into a list, sorted from lowest to highest.\n",
                "type": "UUID.Set.Set -> List.List UUID.UUID"
            },
            {
                "name": "toggle",
                "comment": " Like insert, but removes if the key already exists int the set, discarding the new value too.\n",
                "type": "UUID.UUID -> UUID.Set.Set -> UUID.Set.Set"
            },
            {
                "name": "union",
                "comment": " Get the union of two sets. Keep all values.\n",
                "type": "UUID.Set.Set -> UUID.Set.Set -> UUID.Set.Set"
            }
        ],
        "binops": []
    }
]